{
	"name": "Orchestrator ITDR",
	"properties": {
		"activities": [
			{
				"name": "Create portalPlanTypeId for ITDR",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Set currentPortalId",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "Create ITDR portalPlanType - not used",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"currentPortalId": {
							"value": "@variables('currentPortalId')",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Get Preparis PortalID",
				"type": "ExecutePipeline",
				"dependsOn": [],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "Get Portal Id By DB Name",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true
				}
			},
			{
				"name": "Set currentPortalId",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Preparis PortalID",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "currentPortalId",
					"value": {
						"value": "@activity('Get Preparis PortalID').output.pipelineReturnValue.currentPortalId",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set portalPlanTypeId",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Create portalPlanTypeId for ITDR",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "portalPlanTypeId",
					"value": {
						"value": "@activity('Create portalPlanTypeId for ITDR').output.pipelineReturnValue.portalPlanTypeId",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Migrate ITDR Technologies Partitioned",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Create ITDR Data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "Migrate ITDR Technologies Partitioned",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"currentPortalId": {
							"value": "@variables('currentPortalId')",
							"type": "Expression"
						},
						"portalPlanTypeId": {
							"value": "@variables('portalPlanTypeId')",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Create ITDR Data",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set portalPlanTypeId",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureMySqlSource",
						"query": "/*All technologies for ITDR*/\r\ndrop table if exists migration_itdr_technologies;\r\nCREATE TABLE migration_itdr_technologies\r\nas (\r\n    select tech.*,\r\n    td.technologyId,\r\n    uuid() newPortalPlanTechnologyId,\r\n    ROW_NUMBER() OVER (ORDER BY tech.rp_technology_id) row_num\r\n    from\r\n    (SELECT r.id rp_technology_id\r\n        , r.name rp_technology_name\r\n        , MAX(!ISNULL(vr.VENDOR_ID)) has_vendor\r\n        , MAX(!ISNULL(fr.FILE_ID)) has_file\r\n        , MAX(!ISNULL(pr.PLAN_ID)) has_plan\r\n        , MAX(!ISNULL(tr.TASK_ID)) has_task\r\n    FROM T_RESOURCE r\r\n        LEFT JOIN T_VENDOR_RESOURCE vr ON r.id = vr.RESOURCE_ID\r\n        LEFT JOIN T_FILE_RESOURCE fr ON r.id = fr.RESOURCE_ID\r\n        LEFT JOIN T_RESOURCE_PLAN pr ON r.id = pr.RESOURCE_ID\r\n        LEFT JOIN T_TASK_RESOURCE tr ON r.id = tr.RESOURCE_ID\r\n    GROUP BY r.id, r.name\r\n    HAVING has_vendor OR has_file OR has_plan OR has_task) tech\r\n    join migration_technology_data td on td.rp_technology_id = tech.rp_technology_id\r\n);\r\n\r\n/*select * from migration_itdr_technologies;*/\r\n\r\n/*Task sets*/\r\ndrop table if exists migration_itdr_task_sets;\r\ncreate table migration_itdr_task_sets\r\nas (\r\n    select t.*,\r\n    ROW_NUMBER() OVER (ORDER BY rp_technology_id) row_num,\r\n    ROW_NUMBER() OVER (PARTITION BY t.newPortalPlanTechnologyId ORDER BY t.newPortalPlanTechnologyId) sequence_number,\r\n    uuid() newPortalPlanTechnologyTaskSetId\r\n    from\r\n    (SELECT DISTINCT\r\n    r.rp_technology_id,\r\n    r.rp_technology_name,\r\n    r.newPortalPlanTechnologyId,\r\n    tm.id team_id,\r\n    tm.name team_name\r\n    FROM migration_itdr_technologies r\r\n        JOIN T_TASK_RESOURCE tr ON tr.RESOURCE_ID = r.rp_technology_id\r\n        JOIN T_TASK t ON tr.TASK_ID = t.id\r\n        JOIN T_TASK_HOLDER th ON th.task_id = t.id\r\n        JOIN T_TEAM tm ON tm.id = th.team_id) t\r\n);\r\n\r\n/*\r\nselect distinct team_id, team_name from migration_itdr_task_sets;\r\nselect count(*) from migration_itdr_task_sets;\r\nselect distinct * from migration_itdr_task_sets;\r\n*/\r\n\r\n\r\n/*Task Set members*/\r\ndrop table if exists migration_itdr_task_set_members;\r\ncreate table migration_itdr_task_set_members\r\nas (\r\n    select mem.*,\r\n    ROW_NUMBER() OVER (ORDER BY mem.newPortalPlanTechnologyTaskSetId) row_num,\r\n    uuid() newPortalPlanTechnologyTaskSetMemberId\r\n    from \r\n    (select \r\n    DISTINCT\r\n    ts.newPortalPlanTechnologyTaskSetId,\r\n    ts.team_id,\r\n    ts.team_name,\r\n    ud.userId,\r\n    ud.firstName,\r\n    ud.lastName,\r\n    ud.newUserId\r\n    from migration_itdr_task_sets ts\r\n    JOIN T_INDIVIDUAL_ASSIGNMENT ia ON ia.team_id = ts.team_id\r\n    JOIN T_INDIVIDUAL_ASSIGNMENT_MEMBER iam ON ia.id = iam.ASSIGNMENT_ID\r\n    join migration_all_user_data ud on ud.userId = iam.user_id\r\n    order by newPortalPlanTechnologyTaskSetId) mem\r\n);\r\n\r\n/*select * from migration_itdr_task_set_members\r\norder by newPortalPlanTechnologyTaskSetMemberId;*/\r\n\r\n\r\n/*Task Sets Tasks*/\r\ndrop table if exists migration_itdr_task_set_tasks;\r\ncreate table migration_itdr_task_set_tasks\r\nas (\r\n/*Build a task tree - it is a hierarchical data. Sorting will be done after data is migrated to SQL server using hierarchyId data type*/\r\nwith recursive task_tree (id, task_id, team_id, root_position_sort, parent_id, depth, tp) as\r\n(select id, task_id, team_id, root_position + 1 root_position_sort, parent_id, 0, replace(cast((ifnull(root_position, -2) + 1) as char), '-1', '')\r\n from T_TASK_HOLDER\r\nwhere parent_id is null\r\nUNION ALL\r\nselect th.id, th.task_id, th.team_id, tt.root_position_sort, th.parent_id, tt.depth+1, concat(tt.tp, '.', replace(cast((ifnull(th.child_position, -2) + 1) as char), '-1', ''))\r\nfrom T_TASK_HOLDER th\r\njoin task_tree tt on tt.id = th.parent_id\r\nwhere th.parent_id is not null\r\n),\r\nfiltered_tasks as (\r\n    select tt.* from task_tree tt\r\n    join T_TASK t ON t.id = tt.task_id\r\n    where t.event_data_id is null\r\n)\r\n\r\nselect \r\nuuid() newPortalPlanTechnologyTaskId,\r\nts.newPortalPlanTechnologyTaskSetId,\r\nts.team_id,\r\nts.team_name,\r\nt.id task_id,\r\nt.estimatedTime,\r\nt.measure time_measure,\r\nft.tp,\r\nft.root_position_sort topLevelTaskPosition,\r\n/*CONVERT in this case returns TEXT data type (max 65,535 bytes)*/\r\nCONVERT(AES_DECRYPT(t.description, x'37a95c7d900e8ebb39c9d1b36cf448a5') using utf8) task_name,\r\nROW_NUMBER() OVER (ORDER BY ts.newPortalPlanTechnologyTaskSetId) row_num\r\nfrom\r\n/*Select distinct task ids*/\r\n(select distinct \r\ntask_id\r\n from\r\n    (\r\n    /*select tasks directly associated to the teams*/\r\n    select distinct\r\n    tt.task_id\r\n    from\r\n    filtered_tasks tt\r\nUNION\r\n    /*select all tasks associated to the teams via RP task sets*/\r\n    select distinct\r\n    t.id task_id\r\n    from\r\n    migration_itdr_task_sets ts\r\n    join t_team_task_set tts on tts.team_id = ts.team_id\r\n    join t_task t on t.task_set_id = tts.task_set_id and t.event_data_id is null\r\n    ) temp\r\n) dt\r\njoin t_task t on t.id = dt.task_id\r\njoin filtered_tasks ft on ft.task_id = dt.task_id\r\nJOIN migration_itdr_task_sets ts ON ft.team_id = ts.team_id\r\n);\r\n/*\r\nselect * from \r\nmigration_itdr_task_set_tasks\r\norder by newPortalPlanTechnologyTaskSetId, topLevelTaskPosition;\r\n*/\r\n\r\nselect count(*) from migration_itdr_task_set_tasks;",
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "RecoveryPlanner",
						"type": "DatasetReference",
						"parameters": {
							"db_name": {
								"value": "@pipeline().globalParameters.rp_db_name",
								"type": "Expression"
							},
							"server_name": {
								"value": "@pipeline().globalParameters.rp_server_name",
								"type": "Expression"
							}
						}
					}
				}
			},
			{
				"name": "Migrate ITDR TaskSet Partitioned",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Migrate ITDR Technologies Partitioned",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "Migrate ITDR TaskSet Partitioned",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true
				}
			},
			{
				"name": "Migrate ITDR TaskSet Members Partitioned",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Migrate ITDR TaskSet Partitioned",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "Migrate ITDR TaskSet Members Partitioned",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true
				}
			},
			{
				"name": "Migrate ITDR TaskSet Tasks Partitioned",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Migrate ITDR TaskSet Partitioned",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "Migrate ITDR TaskSet Tasks Partitioned",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"currentPortalId": {
							"value": "@variables('currentPortalId')",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Migrate ITDR Vendors Partitioned",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Migrate ITDR Technologies Partitioned",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "Migrate ITDR Vendors Partitioned",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true
				}
			},
			{
				"name": "Migrate ITDR Technology Dependencies Partitioned",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Migrate ITDR Technologies Partitioned",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "Migrate ITDR Technology Dependencies Partitioned",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true
				}
			}
		],
		"variables": {
			"currentPortalId": {
				"type": "String"
			},
			"portalPlanTypeId": {
				"type": "String"
			},
			"insertSQL": {
				"type": "Array"
			},
			"taskSetInsertSql": {
				"type": "Array"
			},
			"membersSQL": {
				"type": "Array"
			},
			"teamsSQL": {
				"type": "Array"
			}
		},
		"folder": {
			"name": "ITDR"
		},
		"annotations": []
	}
}