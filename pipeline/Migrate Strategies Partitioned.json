{
	"name": "Migrate Strategies Partitioned",
	"properties": {
		"activities": [
			{
				"name": "Build Migration table for Process Strategies",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureMySqlSource",
						"query": "drop table if exists migration_portalProcess_strategy;\r\n\r\ncreate table migration_portalProcess_strategy AS\r\n(\r\nwith toDefault as\r\n(\r\n    select\r\n    f.id function_id\r\n    from T_FUNCTION f\r\n    left join T_BIA_MATRIX_FUNCTION_ENTRY mfe on f.Id = mfe.function_id\r\n    where mfe.FUNCTION_ID is null\r\n),\r\nfromMatrix as \r\n(\r\n    select\r\n    ROW_NUMBER() OVER (PARTITION by m.department_id, mfe.function_id order by mfe.siteType, CASE when (l.newSiteId is not null) then 0 else 1 end, rto.seconds ) row_num_internal\r\n    , m.id matrix_id\r\n    , m.name matrixName\r\n    , m.description\r\n    , mfe.siteType\r\n    , mfe.site_id\r\n    , mfe.function_id\r\n    , f.name functionName\r\n    , m.department_id\r\n    , m.lastUpdateDate matrixLastUpdateDate\r\n    , mfe.lastUpdateDate funcEntryLastUpdateDate\r\n    , mfe.rto_id\r\n    , case when l.newSiteId is null then '9c004e84-4eb4-44f1-a008-cd33f5211014' /*Work From Anywhere*/ else '704acb8f-ed9b-4f11-ab37-0f0139895d5b' /*Temporary Workspace*/ end strategyTypeId\r\n    , pp.portalProcessId\r\n    , pfa.portalFunctionalAreaId\r\n    , l.newSiteId locationId\r\n    , rto.seconds\r\n    from T_BIA_MATRIX m\r\n    join T_BIA_MATRIX_FUNCTION_ENTRY mfe on m.id = mfe.matrix_id\r\n    join t_function f on f.id = mfe.function_id\r\n    join migration_portalfunctionalArea_data pfa on pfa.department_id = m.department_id\r\n    join migration_portalProcess_data pp on pp.function_id = mfe.function_Id and pp.portalFunctionalAreaId = pfa.portalFunctionalAreaId\r\n    left join migration_site_data l on l.id = mfe.site_id\r\n    left join migration_rto_intervals rto on rto.id = mfe.rto_id\r\n),\r\nwithDefaults as\r\n(\r\n    select\r\n    1 row_num_internal\r\n    , 0 matrix_id\r\n    , 'Default' matrixName\r\n    , 'Default' description\r\n    , null siteType\r\n    , null site_id\r\n    , pp.function_id\r\n    , pp.portalProcessName\r\n    , null department_id\r\n    , null matrixLastUpdateDate\r\n    , null funcEntryLastUpdateDate\r\n    , null rto_id\r\n    , '9c004e84-4eb4-44f1-a008-cd33f5211014' /*Work From Anywhere*/ strategyTypeId\r\n    , pp.portalProcessId\r\n    , pp.portalFunctionalAreaId\r\n    , null locationId\r\n    , null seconds\r\n    from toDefault d\r\n    join migration_portalProcess_data pp on pp.function_id = d.function_id\r\n)\r\n\r\nselect ROW_NUMBER() over (order by portalProcessId) row_num\r\n, t.* from\r\n(   select\r\n    uuid() portalProcessStrategyId\r\n    , fm.* from fromMatrix fm\r\n    where row_num_internal = 1\r\n    union\r\n    select\r\n    uuid() portalProcessStrategyId\r\n    , wd.* from withDefaults wd) t\r\n);\r\n\r\nselect count(*) rowsCount from migration_portalProcess_strategy;",
						"queryTimeout": "02:00:00"
					},
					"dataset": {
						"referenceName": "RecoveryPlanner",
						"type": "DatasetReference",
						"parameters": {
							"db_name": {
								"value": "@pipeline().globalParameters.rp_db_name",
								"type": "Expression"
							},
							"server_name": {
								"value": "@pipeline().globalParameters.rp_server_name",
								"type": "Expression"
							}
						}
					},
					"firstRowOnly": false
				}
			},
			{
				"name": "Process Stratagies Iteration",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Lookup Iteration Data",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
						"type": "Expression"
					},
					"isSequential": true,
					"activities": [
						{
							"name": "Process Strategies",
							"type": "ExecutePipeline",
							"dependsOn": [],
							"policy": {
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"pipeline": {
									"referenceName": "Migrate Strategies",
									"type": "PipelineReference"
								},
								"waitOnCompletion": true,
								"parameters": {
									"iterationStart": {
										"value": "@item().iteration_start",
										"type": "Expression"
									},
									"iterationStop": {
										"value": "@item().iteration_stop",
										"type": "Expression"
									},
									"currentPortalId": {
										"value": "@pipeline().parameters.currentPortalId",
										"type": "Expression"
									}
								}
							}
						}
					]
				}
			},
			{
				"name": "Lookup Iteration Data",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Build Migration table for Process Strategies",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "Lookup Iteration Data",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"tableName": "migration_portalProcess_strategy",
						"rp_db_name": {
							"value": "@pipeline().globalParameters.rp_db_name",
							"type": "Expression"
						},
						"rp_server_name": {
							"value": "@pipeline().globalParameters.rp_server_name",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Update Strategy Impact Timespan Id",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Process Stratagies Iteration",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Preparis_dev",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "update pps\nset pps.impactTimespanId = pp.rtoImpactTimespanId\n from\nbcPortalProcessStrategy pps\njoin bcPortalProcess pp on pp.portalProcessId = pps.portalProcessId\njoin bcPortalFunctionalArea pfa on pfa.portalFunctionalAreaId = pp.portalFunctionalAreaId\nwhere pfa.portalId = '@{pipeline().parameters.currentPortalId}'\nand pp.rtoImpactTimespanId is not NULL",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Update Strategy locations",
				"type": "Script",
				"dependsOn": [
					{
						"activity": "Process Stratagies Iteration",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Preparis_dev",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": {
								"value": "insert into bcPortalProcessStrategyLocation\n(portalProcessStrategyLocationId\n, portalProcessStrategyId\n, strategyLocationTypeId\n, locationId\n, processStrategyResourceStatusTypeId\n, dateTimeCreated\n, createdById)\nselect\nnewid()\n, portalProcessStrategyId\n, '226d7117-02fb-409a-a4da-29cca8689300' /*Internal location*/\n, pl.locationId\n, 'dfa05d5e-7ec3-4d2e-8170-bbad882951c5' /*Active*/\n, CURRENT_TIMESTAMP\n, pl.createdById\n from\nbcPortalProcessStrategy pps\njoin bcPortalProcessLocation pl on pl.portalProcessLocationId = pps.portalProcessLocationId\njoin bcPortalProcess pp on pp.portalProcessId = pps.portalProcessId\njoin bcPortalFunctionalArea pfa on pfa.portalFunctionalAreaId = pp.portalFunctionalAreaId\nwhere pfa.portalId = '@{pipeline().parameters.currentPortalId}'",
								"type": "Expression"
							}
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			}
		],
		"parameters": {
			"currentPortalId": {
				"type": "string"
			}
		},
		"folder": {
			"name": "BC/Strategies"
		},
		"annotations": []
	}
}