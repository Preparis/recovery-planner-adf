{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "recovery-planner-adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Create Department Users')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Department User",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nnewEntityUserItemId\n, newDepartmentId\n, newUserId\nfrom migration_department_users\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach User Email",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Department User",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Department User').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().newDepartmentId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Create Department User",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().newDepartmentId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach User Email",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup Department User').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Group Users')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Group User",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nnewEntityUserItemId\n, newGroupId\n, newUserId\nfrom migration_group_users\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Group User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Group User",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Group User').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().newGroupId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Create Department User",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().newDepartmentId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach Group User",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup Group User').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create ITDR portalPlanType - not used')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set output portalPlanTypeId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Create or Get ITDR portalPlanTypeId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "portalPlanTypeId",
									"value": {
										"type": "Expression",
										"content": "@activity('Create or Get ITDR portalPlanTypeId').output.firstRow.portalPlanTypeId"
									}
								}
							],
							"setSystemVariable": true
						}
					},
					{
						"name": "Create or Get ITDR portalPlanTypeId",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "if not exists \n(select 1 from bcPortalPlanTypes\n where portalId = '@{pipeline().parameters.currentPortalId}'\n    and portalPlanTypeStatusTypeId = 'ab727771-44c6-4e3c-bcf7-6f7c37673aaa' /*Active*/\n    and planTypeId = 'a5a1b20b-bbce-425e-b4ef-04e065cf3288' /*Disaster Recovery*/)\nbegin\ninsert into bcPortalPlanTypes\n(\n    portalPlanTypeId,\n    portalId,\n    planTypeId,\n    portalPlanTypeStatusTypeId,\n    dateTimeCreated,\n    createdById\n)\nvalues\n(\n    NEWID(),\n    '@{pipeline().parameters.currentPortalId}',\n    'a5a1b20b-bbce-425e-b4ef-04e065cf3288', /*Disaster Recovery*/\n    'ab727771-44c6-4e3c-bcf7-6f7c37673aaa', /*Active*/\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)    \nend\n\nselect portalPlanTypeId from bcPortalPlanTypes\nwhere\nportalId = '@{pipeline().parameters.currentPortalId}'\nand portalPlanTypeStatusTypeId = 'ab727771-44c6-4e3c-bcf7-6f7c37673aaa' /*Active*/\nand planTypeId = 'a5a1b20b-bbce-425e-b4ef-04e065cf3288' /*Disaster Recovery*/",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string",
						"defaultValue": null
					}
				},
				"variables": {
					"portalPlanTypeId": {
						"type": "String"
					},
					"insertSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR/Portal Plan Technology Attachments"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Portal Entities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Site Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select \r\nnewSiteId\r\n, REPLACE(REPLACE(replace(name, '''',''''''), '\\r', ''), '\\n', '') name\r\n, IFNULL(latitude, 0) latitude\r\n, IFNULL(longitude, 0) longitude\r\n,  REPLACE(REPLACE(replace(description, '''',''''''), '\\r', ''), '\\n', '') description\r\n, newAddressId\r\n, replace(address, '''','''''') address\r\n, replace(address2, '''','''''') address2\r\n, replace(city, '''','''''') city\r\n, replace(state, '''','''''') state\r\n, zip\r\n, replace(siteCountryName, '''','''''') siteCountryName\r\n, generalEmail\r\n, newMainNumberId\r\n, PhoneTypeSubType\r\n, mainNumber\r\n, newFaxNumberId\r\n, mainFax\r\n\r\nfrom migration_site_data;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Site",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Site Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Site Data').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append Location statement",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "location_insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityEntities]\n           ([entityId]\n           ,[entityName]\n           ,[entityTypeId]\n           ,[entityStatusTypeId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[lat]\n           ,[lng]\n           ,[timeZoneId]\n           ,[description]\n           ,[tags])\n     VALUES\n           ('@{item().newSiteId}'\n           ,'@{item().name}'\n           ,'@{variables('entityTypeId_Location')}'\n           ,'@{variables('entityStatus_Active')}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,@{item().latitude}\n           ,@{item().longitude}\n           ,NULL\n           ,SUBSTRING('@{item().description}', 0, 1000)\n           ,NULL\n        )\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append Location Address statement",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Append Location statement",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "location_address_insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityAddresses]\n           ([entityAddressId]\n           ,[entityAddressName]\n           ,[entityId]\n           ,[address1]\n           ,[address2]\n           ,[city]\n           ,[state]\n           ,[zip]\n           ,[country]\n           ,[additionalInfo]\n           ,[primaryEMail]\n           ,[secondaryEMail]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[lat]\n           ,[lng]\n           ,[url])\n     VALUES\n           ( '@{item().newAddressId}' \n           , '@{item().name}'   \n           , '@{item().newSiteId}'\n           , '@{item().address}'\n           , '@{item().address2}'\n           , '@{item().city}'\n           , '@{item().state}'\n           , '@{item().zip}'\n           , '@{item().siteCountryName}'\n           , NULL\n           , '@{item().generalEmail}'\n           , NULL\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , cast('@{item().latitude}' as float)\n           , cast('@{item().longitude}' as float)\n           , NULL\n        )\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append Location Phone statement",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Append Location Address statement",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "location_phone_insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityAddressPhoneNumbers]\n           ([entityPhoneNumberId]\n           ,[entityAddressId]\n           ,[phoneNumberTypeId]\n           ,[phoneNumberSubTypeId]\n           ,[phoneNumber]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\n     VALUES\n           ( '@{item().newMainNumberId}'\n           , '@{item().newAddressId}'\n           , '@{variables('PhoneNumberType_Main')}'\n           , '@{item().PhoneTypeSubType}'\n           , '@{item().mainNumber}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n\t),\n           ( '@{item().newFaxNumberId}'\n           , '@{item().newAddressId}'\n           , '@{variables('PhoneNumberType_Fax')}'\n           , '@{item().PhoneTypeSubType}'\n           , '@{item().mainFax}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n\t)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append EntityHierarchy statement",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Append Location Phone statement",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "entity_hierarchy_insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityHierarchy]\n           ([parentEntityId]\n           ,[childEntityId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[description])\n     VALUES\n           ('@{pipeline().parameters.PortalEntityID}'\n           ,'@{item().newSiteId}'\n\t     ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup Departments",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select \r\nnewDepartmentId\r\n,  REPLACE(REPLACE(replace(name, '''',''''''), '\\r', ''), '\\n', '') name\r\n,  REPLACE(REPLACE(replace(description, '''',''''''), '\\r', ''), '\\n', '') description\r\n from migration_department;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Department",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Departments",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Departments').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Append Department statement",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "department_insert_statements",
										"value": {
											"value": "INSERT INTO [azstudioEntityEntities]\n([entityId]\n,[entityName]\n,[entityTypeId]\n,[entityStatusTypeId]\n,[dateTimeCreated]\n,[createdById]\n,[description])\nVALUES\n('@{item().newDepartmentId}'\n,'@{item().name}'\n,'@{variables('entityTypeId_Department')}'\n,'@{variables('entityStatus_Active')}'\n,CURRENT_TIMESTAMP\n,'@{pipeline().parameters.CreatedByGUID}'\n,SUBSTRING('@{item().description}', 0, 1000)\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append Department Child statement",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Append Department statement",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "department_hierarchy_insert_statements",
										"value": {
											"value": "INSERT INTO [azstudioEntityHierarchy]\n([parentEntityId]\n,[childEntityId]\n,[dateTimeCreated]\n,[createdById])\nVALUES\n('@{pipeline().parameters.PortalEntityID}'\n,'@{item().newDepartmentId}'\n,CURRENT_TIMESTAMP\n,'@{pipeline().parameters.CreatedByGUID}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup Groups",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select\nROW_NUMBER() over (order by id) row_num\n, newGroupId\n, REPLACE(REPLACE(replace(name, '''',''''''), '\\r', ''), '\\n', '') name\n, SUBSTRING(REPLACE(REPLACE(replace(description, '''',''''''), '\\r', ''), '\\n', ''), 1, 99) description\n from migration_groups",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Group",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Groups",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Groups').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append group statement",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "group_insert_statements",
										"value": {
											"value": "INSERT INTO [azstudioEntityEntities]\n([entityId]\n,[entityName]\n,[entityTypeId]\n,[entityStatusTypeId]\n,[dateTimeCreated]\n,[createdById]\n,[description])\nVALUES\n('@{item().newGroupId}'\n,'@{item().name}'\n,'@{variables('entityTypeId_Group')}'\n,'@{variables('entityStatus_Active')}'\n,CURRENT_TIMESTAMP\n,'@{pipeline().parameters.CreatedByGUID}'\n,SUBSTRING('@{item().description}', 0, 1000)\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append group portal hierarchy statement",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Append group statement",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "group_hierarchy_insert_statements",
										"value": {
											"value": "INSERT INTO [azstudioEntityHierarchy]\n([parentEntityId]\n,[childEntityId]\n,[dateTimeCreated]\n,[createdById]\n,[description])\n VALUES\n ('@{pipeline().parameters.PortalEntityID}'\n,'@{item().newGroupId}'\n,CURRENT_TIMESTAMP\n,'@{pipeline().parameters.CreatedByGUID}'\n,'@{item().description}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Batch is ready",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Append group portal hierarchy statement",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(length(variables('group_insert_statements')), 50)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Reset Group Hierarchy Insert",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Insert groups entity hierarchy",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "group_hierarchy_insert_statements",
													"value": {
														"value": "@json('[]')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Insert groups entity hierarchy",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "Reset Group Insert",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabase_Preparis_dev",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "@join(variables('group_hierarchy_insert_statements'), ';')",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											},
											{
												"name": "Reset Group Insert",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Insert groups batch",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "group_insert_statements",
													"value": {
														"value": "@json('[]')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Insert groups batch",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabase_Preparis_dev",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "@join(variables('group_insert_statements'), ';')",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Group Batch Is not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Group",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('group_insert_statements')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert Group Data",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('group_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Bulk Insert Group Entity Hierarchy Data",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Bulk Insert Group Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('group_hierarchy_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup Departments gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach Department",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup Departments').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert Department Data",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('department_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Bulk Insert Department Entity Hierarchy Data",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Bulk Insert Department Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('department_hierarchy_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup Site Data gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach Site",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup Site Data').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert Site Data",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('location_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Bulk Insert location_address_insert_statements",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Bulk Insert Site Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('location_address_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Bulk Insert location_phone_insert_statements",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Bulk Insert location_address_insert_statements",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('location_phone_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Bulk Insert entity_hierarchy_insert_statements",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Bulk Insert location_phone_insert_statements",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('entity_hierarchy_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					}
				},
				"variables": {
					"entityTypeId_Location": {
						"type": "String",
						"defaultValue": "2067409a-be15-492c-8954-9d76e8d8a140"
					},
					"entityStatus_Active": {
						"type": "String",
						"defaultValue": "4fdcaecc-b770-4202-a697-d52460223fe5"
					},
					"entityTypeId_Department": {
						"type": "String",
						"defaultValue": "dfee690c-4176-48b0-852f-8a6860459345"
					},
					"entityTypeId_Group": {
						"type": "String",
						"defaultValue": "c0df4767-bf7d-4df5-94bc-f2bf2e355e8a"
					},
					"PhoneNumberType_Fax": {
						"type": "String",
						"defaultValue": "2342506D-1F9A-4E52-8B4F-D692F3D1B3D6"
					},
					"PhoneNumberType_Main": {
						"type": "String",
						"defaultValue": "42281AF0-1F22-4AC8-B366-412E182DE359"
					},
					"location_insert_statements": {
						"type": "Array"
					},
					"department_insert_statements": {
						"type": "Array"
					},
					"group_insert_statements": {
						"type": "Array"
					},
					"location_address_insert_statements": {
						"type": "Array"
					},
					"location_phone_insert_statements": {
						"type": "Array"
					},
					"entity_hierarchy_insert_statements": {
						"type": "Array"
					},
					"group_hierarchy_insert_statements": {
						"type": "Array"
					},
					"department_hierarchy_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Portal"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T12:44:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create PortalFunctionalAreas And Processes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create bcSite",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set variable bcSite GUID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "INSERT INTO [dbo].[bcSite]\n           ([siteId]\n           ,[siteName]\n           ,[portalId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[siteStatusTypeId]\n           ,[documentFolderId])\n     VALUES\n    (\n        '@{variables('bcSite GUID')}'\n        , '@{pipeline().parameters.CompanyName}'\n        , '@{pipeline().parameters.PortalEntityID}'\n        , CURRENT_TIMESTAMP\n        , '@{pipeline().globalParameters.preparisCreatedById}'\n        , CURRENT_TIMESTAMP\n        , '@{pipeline().globalParameters.preparisCreatedById}' \n        , '6D39FF0B-AFAC-45E8-BCB0-15673D70CE56'\n        , NULL\n    )",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Set variable bcSite GUID",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "bcSite GUID",
							"value": {
								"value": "@{guid()}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup PortalFunctionalArea Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Create bcSite",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select \r\nportalFunctionalAreaId\r\n, replace(portalFunctionalAreaName, '''','''''') portalFunctionalAreaName\r\n, leaderUserId\r\n, replace(portalFunctionalAreaDescription, '''','''''') portalFunctionalAreaDescription\r\n, bcPortalFunctionalAreaToDepartmentId\r\n, newDepartmentId\r\nfrom migration_PortalFunctionalArea_data;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Functional Area",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup PortalFunctionalArea Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup PortalFunctionalArea Data').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create bcPortalFunctionalArea",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[bcPortalFunctionalArea]\n    ([portalFunctionalAreaId]\n    ,[portalId]\n    ,[portalFunctionalAreaName]\n    ,[functionalAreaId]\n    ,[dateTimeCreated]\n    ,[createdById]\n    ,[dateTimeLastModified]\n    ,[lastModifiedById]\n    ,[leaderUserId]\n    ,[portalFunctionalAreaStatusTypeId]\n    ,[siteId]\n    ,[documentFolderId]\n    ,[isHidden]\n    ,[portalFunctionalAreaDescription])\nSELECT\n        '@{item().portalFunctionalAreaId}' \n        ,'@{pipeline().parameters.PortalEntityID}'\n        , '@{item().portalFunctionalAreaName}'\n        , NULL\n        , CURRENT_TIMESTAMP\n        , '@{pipeline().globalParameters.preparisCreatedById}'\n        , CURRENT_TIMESTAMP\n        , '@{pipeline().globalParameters.preparisCreatedById}'\n        , NULL\n        , '5DCED3D8-305D-4D12-8558-BC4FADBFE3DE'\n        , '@{variables('bcSite GUID')}'\n        , NULL\n        , 0\n        , '@{item().portalFunctionalAreaDescription}'\n    ",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create bcPortalFunctionalAreaToDepartment",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Create bcPortalFunctionalArea",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[bcPortalFunctionalAreaToDepartment]\n           ([bcPortalFunctionalAreaToDepartmentId]\n           ,[portalFunctionalAreaId]\n           ,[departmentId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\n     VALUES\n           ('@{item().bcPortalFunctionalAreaToDepartmentId}'\n           ,'@{item().portalFunctionalAreaId}'\n           ,'@{item().newDepartmentId}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().globalParameters.preparisCreatedById}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().globalParameters.preparisCreatedById}'\n        )",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Lookup PortalProcessData",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach Functional Area",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select \nportalProcessId\n, portalFunctionalAreaId\n, substring(replace(portalProcessName, '''',''''''), 1, 200) portalProcessName\n, replace(portalProcessDescription, '''','''''') portalProcessDescription  \nfrom migration_PortalProcess_data;\n\n",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Portal Process",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup PortalProcessData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup PortalProcessData').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create bcPortalProcess",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[bcPortalProcess]\n           ([portalProcessId]\n           ,[portalFunctionalAreaId]\n           ,[processId]\n           ,[portalProcessName]\n           ,[rtoImpactTimespanId]\n           ,[portalProcessStatusTypeId]\n           ,[responsibleUserId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[documentFolderId]\n           ,[isHidden]\n           ,[mtdImpactTimespanId]\n           ,[portalProcessDescription])\nVALUES (\n        '@{item().portalProcessId}' \n        , '@{item().portalFunctionalAreaId}'\n        , NULL\n        , '@{item().portalProcessName}'\n        , NULL\n        , 'BCA9E36E-B82A-48D4-9DEF-B51A0114233E'\n        , NULL\n        , CURRENT_TIMESTAMP\n        , '@{pipeline().globalParameters.preparisCreatedById}'\n        , CURRENT_TIMESTAMP\n        , '@{pipeline().globalParameters.preparisCreatedById}'\n        , NULL\n        , 0\n        , NULL\n        , '@{item().portalProcessDescription}'\n    )",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Hide Default Functional Areas",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach Portal Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "insert into bcPortalFunctionalArea\n(portalFunctionalAreaId\n, portalFunctionalAreaName\n, portalId\n, functionalAreaId\n, dateTimeCreated\n, createdById\n, portalFunctionalAreaStatusTypeId\n, siteId\n, isHidden)\nselect newid()\n, fa.functionalAreaName\n, s.portalId\n, fa.functionalAreaId\n, GETUTCDATE()\n, '7b5ea827-bcd7-4a8a-8807-fc7e94a93455'\n, '5dced3d8-305d-4d12-8558-bc4fadbfe3de'\n, s.siteId\n, 1\nfrom bcSite s\n join bcPortalIndustry pi on pi.portalId = s.portalId\n join bcFunctionalArea fa on fa.industryId = pi.industryId\nwhere s.portalId = '@{pipeline().parameters.PortalEntityID}'\n and s.siteStatusTypeId = '6d39ff0b-afac-45e8-bcb0-15673d70ce56' \n and fa.functionalAreaStatusTypeId = 'aae1dff4-d206-4e72-ad0c-c64a30910d29'",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "create bcPortalPlanTypes",
						"description": "e need to create a new entry in the the bcPortalPlanTypes table for the portal you created and for the Business Continuity plan type.",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "INSERT INTO [dbo].[bcPortalPlanTypes]\n           ([portalPlanTypeId]\n           ,[portalId]\n           ,[planTypeId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[portalPlanTypeStatusTypeId])\n     VALUES\n           (NEWID()\n           ,'@{pipeline().parameters.PortalEntityID}'\n           ,'b1bac3a9-992b-4bfe-adff-72bd9bfe6db6'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().globalParameters.preparisCreatedById}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().globalParameters.preparisCreatedById}'\n           ,'ab727771-44c6-4e3c-bcf7-6f7c37673aaa')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Set portalPlanTypeId on PortalFunctionalAreas",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Hide Default Functional Areas",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "create bcPortalPlanTypes",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update bcPortalFunctionalArea\nset portalPlanTypeId = \n(select top 1 portalPlanTypeId\n from bcPortalPlanTypes\n where portalId = '@{pipeline().parameters.PortalEntityID}')\nwhere portalId = '@{pipeline().parameters.PortalEntityID}'\nand portalFunctionalAreaStatusTypeId = '5dced3d8-305d-4d12-8558-bc4fadbfe3de' /*Active*/\nand portalPlanTypeId is null",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CompanyName": {
						"type": "string"
					},
					"PortalEntityID": {
						"type": "string"
					}
				},
				"variables": {
					"bcSite GUID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BC"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Portal_only')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreateNewPortal",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Create new EntityID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[az_ppentityCustom_CreateNewPortal]",
							"storedProcedureParameters": {
								"ParentEntityId": {
									"value": "b9a3eed5-80b2-4c11-b317-1b2ab2c006aa",
									"type": "Guid"
								},
								"CompanyName": {
									"value": {
										"value": "@pipeline().parameters.CompanyName",
										"type": "Expression"
									},
									"type": "String"
								},
								"VerticalID": {
									"value": "3089683e-a1c9-4c91-9b87-1e3888a9cfcf",
									"type": "Guid"
								},
								"PortalID": {
									"value": {
										"value": "@variables('PortalEntityID')",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Create new EntityID",
						"description": "Create the new EntityID and put into a variable that can be re-used without doing a lookup. ",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PortalEntityID",
							"value": {
								"value": "@{guid()}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Default Location ID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Default Location GUID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "LocationEntityId",
							"value": {
								"value": "@activity('Get Default Location GUID').output.firstRow.entityId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Default Location GUID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CreateNewPortal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select e.entityId\nfrom azstudioEntityEntities e \nJOIN azstudioEntityEntityTypes et on e.entityTypeId = et.entityTypeId\nJOIN azstudioEntityStatusTypes st on e.entityStatusTypeId = st.entityStatusTypeId\nwhere entityName =  '@{pipeline().parameters.CompanyName} - default location'\nand et.entityTypeName = 'Location'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CompanyName": {
						"type": "string",
						"defaultValue": "adftest6"
					}
				},
				"variables": {
					"PortalEntityID": {
						"type": "String"
					},
					"LocationEntityId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Backup"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-09T11:38:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Preparis Users_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Recovery Planner Users",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach Entity RoleBundle",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select * from migration_user_data;\n",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable RecoveryPlannerUsers",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Recovery Planner Users",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RecoveryPlannerUsers",
							"value": {
								"value": "@activity('Get Recovery Planner Users').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach Recovery Planner User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set variable RecoveryPlannerUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('RecoveryPlannerUsers')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "create new SecurityUser",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioSecurityUsers]\n           ([userId]\n           ,[userName]\n           ,[passwordHash]\n           ,[userStateId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[passwordResetRequired]\n           ,[lat]\n           ,[lng]\n           ,[consecutiveFailedLoginAttempts]\n           ,[dateTimePasswordLockout]\n           ,[externalSystemId]\n           ,[timeZoneId]\n           ,[seed]\n           ,[isFullyMigrated]\n           ,[isSelfRegistered]\n           ,[dateTimePasswordLastModified])\nSELECT '@{item().newUserId}' as newUserId\n, '@{item().username}' as username\n, '@{item().password}' as password\n, case \n    when '@{item().role}' = 'LISTED' or '@{item().username}' = '' then '@{variables('userStateId_Active')}' \n    when '@{item().status}' = 'INACTIVE' then '@{variables('userStateId_inActive')}'\n    else '@{variables('userStateId_Pending')}' \n    end as userStateId\n, CURRENT_TIMESTAMP as dateTimeCreated\n, '@{pipeline().parameters.CreatedByGUID}' as createdById\n, CURRENT_TIMESTAMP as dateTimeLastModified\n, '@{pipeline().parameters.CreatedByGUID}' as lastModifiedById\n, 1 as passwordResetRequired\n, NULL as lat\n, NULL as lng\n, 0 as consecutiveFailedLoginAttempts\n, CURRENT_TIMESTAMP as dateTimePasswordLockout\n, '@{item().externalId}' as externalSystemId\n, NULL as timeZoneId\n, NULL as seed\n, NULL as isFullyMigrated\n, 0 as isSelfRegistered\n, CURRENT_TIMESTAMP as dateTimePasswordLastModified",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create EntityUser",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "create new SecurityUser",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().entityUserItemId_portal}'\n           ,'@{pipeline().parameters.PortalEntityID}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,0\n           ,NULL)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create UserProfile",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Create EntityUser",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[ppuserUserProfile]\n           ([userProfileId]\n           ,[userId]\n           ,[firstName]\n           ,[lastName]\n           ,[pin]\n           ,[title]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[floors]\n           ,[rolesChanged]\n           ,[userStringLanguageId])\n     VALUES\n           ('@{item().userProfileId}'\n           ,'@{item().newUserId}'\n           ,'@{item().firstName}'\n           ,'@{item().lastName}'\n           ,'@{item().pin}'\n           ,'@{item().title}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL\n           ,NULL)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create RoleBundleUser",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Create UserProfile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioSecurityRoleBundleUsers]\n           ([userId]\n           ,[roleBundleId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\nSELECT \n\t'@{item().newUserId}' as userId\n    , case '@{item().role}' \n\t\twhen 'LISTED' then '@{variables('roleBundleId_MessageOnly')}'\n\t\telse '@{variables('roleBundleId_Employee')}'\n\t  end as roleBundleId\n    ,CURRENT_TIMESTAMP as dateTimeCreated\n    ,'@{pipeline().parameters.CreatedByGUID}'as createdById\n    ,CURRENT_TIMESTAMP as dateTimeLastModified\n    ,'@{pipeline().parameters.CreatedByGUID}' as lastModifiedById",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Lookup RoleBundleIds",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT e.entityId, e.entityName\n, rb.roleBundleId\n, rb.roleBundleName\nfrom  azstudioEntityEntities e\nJOIN azstudioEntityEntityTypes et on e.entityTypeId = et.entityTypeId\nJOIN azstudioEntityStatusTypes st on e.entityStatusTypeId = st.entityStatusTypeId\nJOIN azstudioSecurityRoleBundles rb on e.entityId = rb.entityId \nwhere e.entityId = '@{pipeline().parameters.PortalEntityID}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Entity RoleBundle",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup RoleBundleIds",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup RoleBundleIds').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().roleBundleName",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Employee",
												"activities": [
													{
														"name": "Set variable roleBundleId_employee",
														"type": "SetVariable",
														"dependsOn": [],
														"policy": {
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"variableName": "roleBundleId_Employee",
															"value": {
																"value": "@item().roleBundleId",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"value": "Message Only",
												"activities": [
													{
														"name": "Set variable roleBundleId_MessageOnly",
														"type": "SetVariable",
														"dependsOn": [],
														"policy": {
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"variableName": "roleBundleId_MessageOnly",
															"value": {
																"value": "@item().roleBundleId",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					}
				},
				"variables": {
					"userStateId_Active": {
						"type": "String",
						"defaultValue": "c1ff019b-b3f6-411c-b04e-59294e9090fe"
					},
					"userStateId_Pending": {
						"type": "String",
						"defaultValue": "b5d6bc28-5e6d-4bd1-b028-f7e9a6c6b7a1"
					},
					"RecoveryPlannerUsers": {
						"type": "Array"
					},
					"SelectString": {
						"type": "String"
					},
					"userStateId_inActive": {
						"type": "String",
						"defaultValue": "ffb8849c-4dc6-4c66-9d00-f93ac2ef260b"
					},
					"roleBundleId_Employee": {
						"type": "String"
					},
					"roleBundleId_MessageOnly": {
						"type": "String"
					},
					"entityStatus_Pending": {
						"type": "String",
						"defaultValue": "45df2299-cc49-4d91-9a68-a391e009dbf3"
					}
				},
				"folder": {
					"name": "Backup"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-15T15:58:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Technologies Attachments List')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create technology attachments data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "documentId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "fileName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "folderId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_itdr_technology_attachments;\r\ncreate table migration_itdr_technology_attachments\r\nas (\r\n\r\n    select\r\n    ROW_NUMBER() OVER (order by rp_technology_name) row_num,\r\n    uuid() newPortalPlanTechnologyAttachmentsId,\r\n    newPortalPlanTechnologyId,\r\n    rp_technology_name,\r\n    resource_id,\r\n    file_id,\r\n    df.newItemId,\r\n    df.name fileName,\r\n    dfr.path\r\n    from T_FILE_RESOURCE fr\r\n    join migration_itdr_technologies t on t.rp_technology_id = fr.resource_id\r\n    join migration_doc_files df on df.id = fr.file_id\r\n    join migration_doc_folders dfr on df.parent_id = dfr.id\r\n);\r\n\r\nselect count(*) num_rec from migration_itdr_technology_attachments;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy data to file",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create technology attachments data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select \r\nrp_technology_name 'Technology Name',\r\nCONCAT(path, '\\\\', fileName) 'File Name'\r\n from migration_itdr_technology_attachments\r\n order by row_num",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedTextPreparis",
								"type": "DatasetReference",
								"parameters": {
									"baseUrl": {
										"value": "@pipeline().globalParameters.PreparisStorageAccountBaseUrl",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileName')",
										"type": "Expression"
									},
									"documentIdGuid": {
										"value": "@variables('documentId')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "documentId",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "documentId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Script Merge into ppdocsDocuments",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "IF NOT EXISTS(SELECT 1 FROM ppdocsDocuments WHERE documentId = '@{variables('documentId')}') \nBEGIN\n  INSERT INTO ppdocsDocuments\n  (documentId\n  ,documentName\n  ,documentFileName\n  ,documentStateId\n  ,folderId\n  ,owningAccountId\n  ,sizeInBytes\n  ,dateTimeCreated\n  ,createdById)\n  VALUES\n  ('@{variables('documentId')}'\n  ,'@{variables('fileName')}'\n  ,'@{variables('fileName')}'\n  ,'a615996c-640f-47d1-948a-4a3cb1bc7766'\n  ,'@{variables('folderId')}'\n  ,'@{pipeline().globalParameters.preparisCreatedById}'\n  ,@{activity('Copy data to file').output.dataWritten}\n  ,CURRENT_TIMESTAMP\n  ,'@{pipeline().globalParameters.preparisCreatedById}');\nEND\nELSE\nBEGIN\n  UPDATE ppdocsDocuments\n  SET documentName = '@{variables('fileName')}',\n      documentFileName = '@{variables('fileName')}',\n        description = NULL,\n        documentStateId = 'a615996c-640f-47d1-948a-4a3cb1bc7766',\n        folderId = '@{variables('folderId')}',\n        owningAccountId = '@{pipeline().globalParameters.preparisCreatedById}',\n        sizeInBytes = @{activity('Copy data to file').output.dataWritten},\n        versionInfo = NULL,\n        tagsJson = NULL,\n        metadataJson = NULL,\n        lastModifiedById = '@{pipeline().globalParameters.preparisCreatedById}',\n        dateTimeLastModified = CURRENT_TIMESTAMP\n  WHERE documentId = '@{variables('documentId')}'\nEND",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "fileName",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": "TechnologiesAttachments.csv"
						}
					},
					{
						"name": "Folder",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select\ndf.folderId\n from ppdocsDocumentFolders df\n join ppdocsDocumentFolders df1 on df.parentFolderId = df1.folderId and df1.folderName = 'entityRoot'\n join ppdocsEntityFolders ef on df1.folderId = ef.folderId\n where df.folderName = 'RecoveryPlanner Files'\n and entityId = '@{pipeline().parameters.currentPortalId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "folderId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "folderId",
							"value": {
								"value": "@activity('Folder').output.firstRow.folderId",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"documentId": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"folderId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ITDR/Portal Plan Technology Attachments"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Addresses')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup UserAddresses",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nnewAddressId\n, newUserId\n, replace(line1, '''','''''') line1\n, replace(line2, '''','''''') line2\n, replace(city, '''','''''') city\n, replace(state, '''','''''') state\n, zip\n, CountryTypeId\n, latitude\n, longitude\n, userAddressTypeId\nfrom migration_userAddresses\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach UserAddress",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup UserAddresses",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup UserAddresses').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create UserAddresses",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[ppuserUserAddresses]\n           ([userAddressId]\n           ,[userId]\n           ,[userAddressTypeId]\n           ,[address1]\n           ,[address2]\n           ,[city]\n           ,[state]\n           ,[zip]\n           ,[countryTypeId]\n           ,[department]\n           ,[floor]\n           ,[additionalLocationInfo]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[lat]\n           ,[lng])\n     VALUES\n           ('@{item().newAddressId}'\n           ,'@{item().newUserId}'\n           ,'@{item().UserAddressTypeId}'\n           ,'@{item().line1}'\n           ,'@{item().line2}'\n           ,'@{item().city}'\n           ,'@{item().state}'\n           ,'@{item().zip}'\n           ,'@{item().CountryTypeId}'\n           ,NULL\n           ,NULL\n           ,NULL\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,'@{item().latitude}'\n           ,'@{item().longitude}'\n\t)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[ppuserUserAddresses]\n           ([userAddressId]\n           ,[userId]\n           ,[userAddressTypeId]\n           ,[address1]\n           ,[address2]\n           ,[city]\n           ,[state]\n           ,[zip]\n           ,[countryTypeId]\n           ,[department]\n           ,[floor]\n           ,[additionalLocationInfo]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[lat]\n           ,[lng])\n     VALUES\n           ('@{item().newAddressId}'\n           ,'@{item().newUserId}'\n           ,'@{item().UserAddressTypeId}'\n           ,'@{item().line1}'\n           ,'@{item().line2}'\n           ,'@{item().city}'\n           ,'@{item().state}'\n           ,'@{item().zip}'\n           ,'@{item().CountryTypeId}'\n           ,NULL\n           ,NULL\n           ,NULL\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,'@{item().latitude}'\n           ,'@{item().longitude}'\n\t)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach UserAddress",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup UserAddresses').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Emails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup User Emails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nnewEmailId\n, newUserId\n, emailAddressTypeId\n, replace(email, '''','''''') email\nfrom migration_userEmails\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach User Email",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup User Emails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup User Emails').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[ppuserEMailAddresses]\n           ([userEMailId]\n           ,[userId]\n           ,[emailTypeId]\n           ,[emailAddress]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[optOutEmail])\n     VALUES\n           ('@{item().newEmailId}'\n           ,'@{item().newUserId}'\n           ,'@{item().emailAddressTypeId}'\n           ,'@{item().email}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           ,0)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Create User Email",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[ppuserEMailAddresses]\n           ([userEMailId]\n           ,[userId]\n           ,[emailTypeId]\n           ,[emailAddress]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[optOutEmail])\n     VALUES\n           ('@{item().newEmailId}'\n           ,'@{item().newUserId}'\n           ,'@{item().emailAddressTypeId}'\n           ,'@{item().email}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           ,0)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach User Email",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup User Emails').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Locations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup User Sites",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nnewEntityUserItemId\n, newSiteId\n, newUserId\n, isPrimaryRelationship\n, isManager\nfrom migration_user_site_data\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach User Site",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup User Sites",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup User Sites').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[isPrimaryRelationship])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().newSiteId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().globalParameters.preparisCreatedById}'\n           ,'@{item().isPrimaryRelationship}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach User Site",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup User Sites').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:20:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Phone Numbers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup UserPhone Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \r\nnewPhoneId\r\n, newUserId\r\n, phoneNumberTypeId\r\n, phoneNumberSubTypeId\r\n, phoneNumber\r\n, extension\r\nfrom migration_userPhones\r\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach UserPhone",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup UserPhone Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup UserPhone Data').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable Insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[ppuserPhoneNumbers]\n           ([userPhoneId]\n           ,[userId]\n           ,[phoneNumberTypeId]\n           ,[phoneNumberSubTypeId]\n           ,[phoneNumber]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[extension]\n           ,[optOutSms]\n           ,[optOutVoice]\n           ,[isSMSVerified])\n     VALUES\n           ('@{item().newPhoneId}'\n           ,'@{item().newUserId}'\n           ,'@{item().phoneNumberTypeId}'\n           ,'@{item().phoneNumberSubTypeId}'\n           ,'@{item().phoneNumber}'\n           , CURRENT_TIMESTAMP\n           ,'@{pipeline().globalParameters.preparisCreatedById}'\n           ,'@{item().extension}'\n           ,0\n           ,0\n           ,NULL\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach UserPhone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup UserPhone Data').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"iteration_start": {
						"type": "string"
					},
					"iteration_stop": {
						"type": "string"
					}
				},
				"variables": {
					"UserPhoneNumberType_Office": {
						"type": "String",
						"defaultValue": "20509910-5326-4057-b21f-5c694b314692"
					},
					"UserPhoneNumberType_Personal": {
						"type": "String",
						"defaultValue": "5eec12d5-595f-4123-a613-c63e701ae993"
					},
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Profiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup User Profiles",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nuserProfileId\n, newUserId\n, replace(firstName, '''','''''') firstName\n, replace(lastName, '''','''''') lastName\n, pin\n, replace(title, '''','''''') title\nfrom migration_user_profile\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach User Email",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup User Profiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup User Profiles').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[ppuserUserProfile]\n           ([userProfileId]\n           ,[userId]\n           ,[firstName]\n           ,[lastName]\n           ,[pin]\n           ,[title]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[floors]\n           ,[rolesChanged]\n           ,[userStringLanguageId])\n     VALUES\n           ('@{item().userProfileId}'\n           ,'@{item().newUserId}'\n           ,'@{item().firstName}'\n           ,'@{item().lastName}'\n           ,'@{item().pin}'\n           ,'@{item().title}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL\n           ,NULL)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Create UserProfile",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[ppuserUserProfile]\n           ([userProfileId]\n           ,[userId]\n           ,[firstName]\n           ,[lastName]\n           ,[pin]\n           ,[title]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[floors]\n           ,[rolesChanged]\n           ,[userStringLanguageId])\n     VALUES\n           ('@{item().userProfileId}'\n           ,'@{item().newUserId}'\n           ,'@{item().firstName}'\n           ,'@{item().lastName}'\n           ,'@{item().pin}'\n           ,'@{item().title}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL\n           ,NULL)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach User Email",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup User Profiles').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Role Bundle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup UserRole",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \r\nnewUserId\r\n, role\r\nfrom migration_user_roleBundle\r\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}\r\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach UserRole",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup UserRole",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup UserRole').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create UserRoleBundle",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioSecurityRoleBundleUsers]\n           ([userId]\n           ,[roleBundleId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\nSELECT \n\t'@{item().newUserId}' as userId\n    , case '@{item().role}' \n\t\twhen 'LISTED' then '@{variables('roleBundleId_MessageOnly')}'\n    when 'ADMIN' then '@{variables('roleBundleId_ProgramManager')}'\n\t\telse '@{variables('roleBundleId_Employee')}'\n\t  end as roleBundleId\n    ,CURRENT_TIMESTAMP as dateTimeCreated\n    ,'@{pipeline().parameters.CreatedByGUID}'as createdById\n    ,CURRENT_TIMESTAMP as dateTimeLastModified\n    ,'@{pipeline().parameters.CreatedByGUID}' as lastModifiedById",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioSecurityRoleBundleUsers]\n           ([userId]\n           ,[roleBundleId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\nSELECT \n\t'@{item().newUserId}' as userId\n    , case '@{item().role}' \n\t\twhen 'LISTED' then '@{pipeline().parameters.roleBundleId_MessageOnly}'\n    when 'ADMIN' then '@{pipeline().parameters.roleBundleId_ProgramManager}'\n\t\telse '@{pipeline().parameters.roleBundleId_Employee}'\n\t  end as roleBundleId\n    ,CURRENT_TIMESTAMP as dateTimeCreated\n    ,'@{pipeline().parameters.CreatedByGUID}'as createdById\n    ,CURRENT_TIMESTAMP as dateTimeLastModified\n    ,'@{pipeline().parameters.CreatedByGUID}' as lastModifiedById",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach UserRole",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup UserRole').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					},
					"roleBundleId_MessageOnly": {
						"type": "string"
					},
					"roleBundleId_Employee": {
						"type": "string"
					},
					"roleBundleId_ProgramManager": {
						"type": "string"
					}
				},
				"variables": {
					"UserPhoneNumberType_Office": {
						"type": "String",
						"defaultValue": "20509910-5326-4057-b21f-5c694b314692"
					},
					"UserPhoneNumberType_Personal": {
						"type": "String",
						"defaultValue": "5eec12d5-595f-4123-a613-c63e701ae993"
					},
					"BusinessContinuityManagerRoleId": {
						"type": "String",
						"defaultValue": "a90d9a09-75cd-44d0-8ece-a04d873520ad"
					},
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Users Without Sites')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Users Without Sites",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select * \nfrom migration_users_without_site\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach UserAddress",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Users Without Sites",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Users Without Sites').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().defaultLocationId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,'@{item().isPrimaryRelationship}'\n           ,'@{item().isManager}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Bulk Insert",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach UserAddress",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@join(variables('insert_statements'),';')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:45:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Users')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Recovery Planner Users",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \n newUserId\n, replace(username, '''','''''') username\n, password\n, userStateId\n, entityUserItemId\n, employeeID\nfrom migration_user_data\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Recovery Planner User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Recovery Planner Users",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Recovery Planner Users').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Append variable security_user_insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "security_user_insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioSecurityUsers]\n           ([userId]\n           ,[userName]\n           ,[passwordHash]\n           ,[userStateId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[passwordResetRequired]\n           ,[lat]\n           ,[lng]\n           ,[consecutiveFailedLoginAttempts]\n           ,[dateTimePasswordLockout]\n           ,[externalSystemId]\n           ,[timeZoneId]\n           ,[seed]\n           ,[isFullyMigrated]\n           ,[isSelfRegistered]\n           ,[dateTimePasswordLastModified])\nVALUES (\n\t'@{item().newUserId}' \n\t, '@{item().username}'\n\t, ''\n\t, '@{item().userStateId}'\n\t, CURRENT_TIMESTAMP\n\t, '@{pipeline().parameters.CreatedByGUID}'\n\t, CURRENT_TIMESTAMP\n\t, '@{pipeline().parameters.CreatedByGUID}'\n\t, 1\n\t, NULL\n\t, NULL\n\t, 0 \n\t, NULL\n\t, '@{item().employeeID}' \n\t, NULL\n\t, '@{item().username}'\n\t, NULL\n\t, 0\n\t, CURRENT_TIMESTAMP\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append variable entity_user_insert_statements_copy1",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "entity_user_insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().entityUserItemId}'\n           ,'@{pipeline().parameters.PortalEntityID}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,0\n           ,NULL)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach Recovery Planner User",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Get Recovery Planner Users').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert Security Users",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('security_user_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Bulk Insert Entity Users",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Bulk Insert Security Users",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('entity_user_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"security_user_insert_statements": {
						"type": "Array"
					},
					"entity_user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Doc Create Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Iteration Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select\n newItemId\n, replace(name, '''','''''') name\n, newParentItemId\n, id\n from @{pipeline().parameters.file_table_name}\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop};",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Iteration Data').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "Copy File from RP to Blob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "Rpxsession-Id: @{pipeline().parameters.rpSessionToken}  \nRpxclient-Id: @{pipeline().globalParameters.rpClientId}  \nContent-Type: application/json  ",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Binary_RecoveryPlannerFile",
											"type": "DatasetReference",
											"parameters": {
												"BaseURL": {
													"value": "@pipeline().globalParameters.rpBaseURL",
													"type": "Expression"
												},
												"RelativeUrl": {
													"value": "@if(equals(pipeline().parameters.file_table_name, 'migration_doc_files'),\n concat('files/',item().id, '/download-file'),\n concat('image/',item().id, '/download'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Binary_PreparisDocument",
											"type": "DatasetReference",
											"parameters": {
												"documentIdGuid": {
													"value": "@item().newItemId",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"baseUrl": {
													"value": "@pipeline().globalParameters.PreparisStorageAccountBaseUrl",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Script Merge into ppdocsDocuments",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy File from RP to Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "IF NOT EXISTS(SELECT 1 FROM ppdocsDocuments WHERE documentId = '@{item().newItemId}') \nBEGIN\n  INSERT INTO ppdocsDocuments\n  (documentId\n  ,documentName\n  ,documentFileName\n  ,documentStateId\n  ,folderId\n  ,owningAccountId\n  ,sizeInBytes\n  ,dateTimeCreated\n  ,createdById)\n  VALUES\n  ('@{item().newItemId}'\n  ,'@{item().name}'\n  ,'@{item().name}'\n  ,'a615996c-640f-47d1-948a-4a3cb1bc7766'\n  ,'@{item().newParentItemId}'\n  ,'@{pipeline().globalParameters.preparisCreatedById}'\n  ,@{activity('Copy File from RP to Blob').output.dataWritten}\n  ,CURRENT_TIMESTAMP\n  ,'@{pipeline().globalParameters.preparisCreatedById}');\nEND\nELSE\nBEGIN\n  UPDATE ppdocsDocuments\n  SET documentName = '@{item().name}',\n      documentFileName = '@{item().name}',\n        description = NULL,\n        documentStateId = 'a615996c-640f-47d1-948a-4a3cb1bc7766',\n        folderId = '@{item().newParentItemId}',\n        owningAccountId = '@{pipeline().globalParameters.preparisCreatedById}',\n        sizeInBytes = @{activity('Copy File from RP to Blob').output.dataWritten},\n        versionInfo = NULL,\n        tagsJson = NULL,\n        metadataJson = NULL,\n        lastModifiedById = '@{pipeline().globalParameters.preparisCreatedById}',\n        dateTimeLastModified = CURRENT_TIMESTAMP\n  WHERE documentId = '@{item().newItemId}'\nEND",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					},
					"file_table_name": {
						"type": "string"
					},
					"rpSessionToken": {
						"type": "string"
					}
				},
				"variables": {
					"userLocationsStatements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Files And Images"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Doc Create Folders')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Folders",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Preparis Root Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select\nnewItemId,\nname,\ncase when newParentItemId is null then '@{variables('preparisRootFolderId')}' else newParentItemId end newParentItemId\nfrom @{pipeline().parameters.folderTableName}\norder by row_num",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get Preparis Root Folder",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Preparis Root Folder",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisBaseURL": {
									"value": "@pipeline().globalParameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().globalParameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								},
								"preparisSessionToken": {
									"value": "@pipeline().parameters.preparisSessionToken",
									"type": "Expression"
								},
								"preparisCurrentPortalId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"UserRootPortal": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Preparis Root Folder",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Preparis Root Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisRootFolderId",
							"value": {
								"value": "@activity('Get Preparis Root Folder').output.pipelineReturnValue.rootFolderId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Folder",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Folders').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CreateFolder",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {
											"Content-Type": "application/json",
											"token": {
												"value": "@pipeline().parameters.preparisSessionToken",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat(pipeline().globalParameters.preparisBaseURL,'API/CreateFolder')",
											"type": "Expression"
										},
										"body": {
											"value": "{\n  \"applicationId\": \"15871a25-1ab0-4c98-9a29-0f2e076c9adc\",\n  \"versionId\": \"39fd8b5d-5151-46d7-aca1-6c9f8f4cd153\",\n  \"clientTransactionKey\": \"00000\",\n  \"deviceIdAsBase64\": \"@{pipeline().globalParameters.preparisDeviceIdAsBase64}\",\n  \"token\": \"@{pipeline().parameters.preparisSessionToken}\",\n  \"entityId\": \"@{pipeline().parameters.currentPortalId}\",\n  \"rootEntityId\": \"@{pipeline().parameters.currentPortalId}\",\n  \"portalId\": \"@{pipeline().parameters.currentPortalId}\",\n  \"createdById\": \"20247852-4d72-437a-bad5-3948cc551feb\",\n  \"lastModifiedById\": \"20247852-4d72-437a-bad5-3948cc551feb\",\n  \"folderId\": \"@{item().newItemId}\",\n  \"folderNameAsBase64\": \"@{base64(item().name)}\", \n  \"parentFolderId\": \"@{item().newParentItemId}\"\n}",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					},
					"folderTableName": {
						"type": "string"
					},
					"preparisSessionToken": {
						"type": "string"
					}
				},
				"variables": {
					"preparisRootFolderId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Files And Images"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get Preparis Portal ID')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Active PortalId",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select e.entityId\nfrom azstudioEntityEntities e \nJOIN azstudioEntityEntityTypes et on e.entityTypeId = et.entityTypeId\nJOIN azstudioEntityStatusTypes st on e.entityStatusTypeId = st.entityStatusTypeId\nwhere entityName =  '@{pipeline().parameters.companyName}'\nand et.entityTypeName = 'Portal'\nand st.entityStatusTypeName = 'Active'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set variable portalEntityId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Active PortalId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "portalEntityId",
									"value": {
										"type": "Expression",
										"content": "@activity('Get Active PortalId').output.firstRow.entityId"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"companyName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "common"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-20T14:08:54Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get RP CompanyName')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Company Name",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "SELECT \ncase when fullName is NULL or fullName ='' \n    then REPLACE(TRIM(dbname), '''', '') \n    else REPLACE(TRIM(fullName), '''', '') end as CompanyName\nFROM T_CLIENT_NAME\nwhere dbname = '@{pipeline().globalParameters.rp_db_name}'\nand datacenter = '@{pipeline().globalParameters.rp_datacenter}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": "Common",
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Set variable CompanyName ReturnValue",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup Company Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "CompanyName",
									"value": {
										"type": "Expression",
										"content": "@activity('Lookup Company Name').output.firstRow.CompanyName"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "common"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T19:01:40Z"
			},
			"dependsOn": []
		}
	]
}