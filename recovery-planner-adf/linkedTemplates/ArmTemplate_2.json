{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "recovery-planner-adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Create User Emails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup User Emails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nnewEmailId\n, newUserId\n, emailAddressTypeId\n, replace(email, '''','''''') email\nfrom migration_userEmails\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach User Email",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup User Emails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup User Emails').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[ppuserEMailAddresses]\n           ([userEMailId]\n           ,[userId]\n           ,[emailTypeId]\n           ,[emailAddress]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[optOutEmail])\n     VALUES\n           ('@{item().newEmailId}'\n           ,'@{item().newUserId}'\n           ,'@{item().emailAddressTypeId}'\n           ,'@{item().email}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           ,0)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Create User Email",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[ppuserEMailAddresses]\n           ([userEMailId]\n           ,[userId]\n           ,[emailTypeId]\n           ,[emailAddress]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[optOutEmail])\n     VALUES\n           ('@{item().newEmailId}'\n           ,'@{item().newUserId}'\n           ,'@{item().emailAddressTypeId}'\n           ,'@{item().email}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           ,0)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach User Email",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup User Emails').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Locations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup User Sites",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nnewEntityUserItemId\n, newSiteId\n, newUserId\n, isPrimaryRelationship\n, isManager\nfrom migration_user_site_data\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach User Site",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup User Sites",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup User Sites').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().newSiteId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,'@{item().isPrimaryRelationship}'\n           ,NULL)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Create UserLocations",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().newSiteId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,'@{item().isPrimaryRelationship}'\n           ,NULL)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach User Site",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup User Sites').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:20:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Phone Numbers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup UserPhone Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \r\nnewPhoneId\r\n, newUserId\r\n, phoneNumberTypeId\r\n, phoneNumberSubTypeId\r\n, phoneNumber\r\n, extension\r\nfrom migration_userPhones\r\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach UserPhone",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup UserPhone Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup UserPhone Data').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable Insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[ppuserPhoneNumbers]\n           ([userPhoneId]\n           ,[userId]\n           ,[phoneNumberTypeId]\n           ,[phoneNumberSubTypeId]\n           ,[phoneNumber]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[extension]\n           ,[optOutSms]\n           ,[optOutVoice]\n           ,[isSMSVerified])\n     VALUES\n           ('@{item().newPhoneId}'\n           ,'@{item().newUserId}'\n           ,'@{item().phoneNumberTypeId}'\n           ,'@{item().phoneNumberSubTypeId}'\n           ,'@{item().phoneNumber}'\n           , CURRENT_TIMESTAMP\n           ,'@{pipeline().globalParameters.preparisCreatedById}'\n           ,'@{item().extension}'\n           ,0\n           ,0\n           ,NULL\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach UserPhone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup UserPhone Data').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"iteration_start": {
						"type": "string"
					},
					"iteration_stop": {
						"type": "string"
					}
				},
				"variables": {
					"UserPhoneNumberType_Office": {
						"type": "String",
						"defaultValue": "20509910-5326-4057-b21f-5c694b314692"
					},
					"UserPhoneNumberType_Personal": {
						"type": "String",
						"defaultValue": "5eec12d5-595f-4123-a613-c63e701ae993"
					},
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Profiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup User Profiles",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nuserProfileId\n, newUserId\n, replace(firstName, '''','''''') firstName\n, replace(lastName, '''','''''') lastName\n, pin\n, replace(title, '''','''''') title\nfrom migration_user_profile\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach User Email",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup User Profiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup User Profiles').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[ppuserUserProfile]\n           ([userProfileId]\n           ,[userId]\n           ,[firstName]\n           ,[lastName]\n           ,[pin]\n           ,[title]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[floors]\n           ,[rolesChanged]\n           ,[userStringLanguageId])\n     VALUES\n           ('@{item().userProfileId}'\n           ,'@{item().newUserId}'\n           ,'@{item().firstName}'\n           ,'@{item().lastName}'\n           ,'@{item().pin}'\n           ,'@{item().title}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL\n           ,NULL)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Create UserProfile",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[ppuserUserProfile]\n           ([userProfileId]\n           ,[userId]\n           ,[firstName]\n           ,[lastName]\n           ,[pin]\n           ,[title]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[floors]\n           ,[rolesChanged]\n           ,[userStringLanguageId])\n     VALUES\n           ('@{item().userProfileId}'\n           ,'@{item().newUserId}'\n           ,'@{item().firstName}'\n           ,'@{item().lastName}'\n           ,'@{item().pin}'\n           ,'@{item().title}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL\n           ,NULL)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach User Email",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup User Profiles').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Role Bundle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup UserRole",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \r\nnewUserId\r\n, role\r\nfrom migration_user_roleBundle\r\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}\r\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach UserRole",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup UserRole",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup UserRole').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create UserRoleBundle",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioSecurityRoleBundleUsers]\n           ([userId]\n           ,[roleBundleId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\nSELECT \n\t'@{item().newUserId}' as userId\n    , case '@{item().role}' \n\t\twhen 'LISTED' then '@{variables('roleBundleId_MessageOnly')}'\n    when 'ADMIN' then '@{variables('roleBundleId_ProgramManager')}'\n\t\telse '@{variables('roleBundleId_Employee')}'\n\t  end as roleBundleId\n    ,CURRENT_TIMESTAMP as dateTimeCreated\n    ,'@{pipeline().parameters.CreatedByGUID}'as createdById\n    ,CURRENT_TIMESTAMP as dateTimeLastModified\n    ,'@{pipeline().parameters.CreatedByGUID}' as lastModifiedById",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioSecurityRoleBundleUsers]\n           ([userId]\n           ,[roleBundleId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\nSELECT \n\t'@{item().newUserId}' as userId\n    , case '@{item().role}' \n\t\twhen 'LISTED' then '@{pipeline().parameters.roleBundleId_MessageOnly}'\n    when 'ADMIN' then '@{pipeline().parameters.roleBundleId_ProgramManager}'\n\t\telse '@{pipeline().parameters.roleBundleId_Employee}'\n\t  end as roleBundleId\n    ,CURRENT_TIMESTAMP as dateTimeCreated\n    ,'@{pipeline().parameters.CreatedByGUID}'as createdById\n    ,CURRENT_TIMESTAMP as dateTimeLastModified\n    ,'@{pipeline().parameters.CreatedByGUID}' as lastModifiedById",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach UserRole",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup UserRole').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					},
					"roleBundleId_MessageOnly": {
						"type": "string"
					},
					"roleBundleId_Employee": {
						"type": "string"
					},
					"roleBundleId_ProgramManager": {
						"type": "string"
					}
				},
				"variables": {
					"UserPhoneNumberType_Office": {
						"type": "String",
						"defaultValue": "20509910-5326-4057-b21f-5c694b314692"
					},
					"UserPhoneNumberType_Personal": {
						"type": "String",
						"defaultValue": "5eec12d5-595f-4123-a613-c63e701ae993"
					},
					"BusinessContinuityManagerRoleId": {
						"type": "String",
						"defaultValue": "a90d9a09-75cd-44d0-8ece-a04d873520ad"
					},
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Users Without Sites')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Users Without Sites",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select * \nfrom migration_users_without_site\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach UserAddress",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Users Without Sites",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Users Without Sites').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().defaultLocationId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,'@{item().isPrimaryRelationship}'\n           ,'@{item().isManager}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Create default Location for users without Site in RP",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().defaultLocationId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,'@{item().isPrimaryRelationship}'\n           ,'@{item().isManager}')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Bulk Insert",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach UserAddress",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@join(variables('insert_statements'),';')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:45:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Users')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Recovery Planner Users",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \n newUserId\n, replace(username, '''','''''') username\n, password\n, userStateId\n, entityUserItemId\n, employeeID\nfrom migration_user_data\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Recovery Planner User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Recovery Planner Users",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Recovery Planner Users').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Append variable security_user_insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "security_user_insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioSecurityUsers]\n           ([userId]\n           ,[userName]\n           ,[passwordHash]\n           ,[userStateId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[passwordResetRequired]\n           ,[lat]\n           ,[lng]\n           ,[consecutiveFailedLoginAttempts]\n           ,[dateTimePasswordLockout]\n           ,[externalSystemId]\n           ,[timeZoneId]\n           ,[seed]\n           ,[isFullyMigrated]\n           ,[isSelfRegistered]\n           ,[dateTimePasswordLastModified])\nVALUES (\n\t'@{item().newUserId}' \n\t, '@{item().username}'\n\t, ''\n\t, '@{item().userStateId}'\n\t, CURRENT_TIMESTAMP\n\t, '@{pipeline().parameters.CreatedByGUID}'\n\t, CURRENT_TIMESTAMP\n\t, '@{pipeline().parameters.CreatedByGUID}'\n\t, 1\n\t, NULL\n\t, NULL\n\t, 0 \n\t, NULL\n\t, '@{item().employeeID}' \n\t, NULL\n\t, '@{item().username}'\n\t, NULL\n\t, 0\n\t, CURRENT_TIMESTAMP\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append variable entity_user_insert_statements_copy1",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "entity_user_insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().entityUserItemId}'\n           ,'@{pipeline().parameters.PortalEntityID}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,0\n           ,NULL)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach Recovery Planner User",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Get Recovery Planner Users').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert Security Users",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('security_user_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Bulk Insert Entity Users",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Bulk Insert Security Users",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('entity_user_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"security_user_insert_statements": {
						"type": "Array"
					},
					"entity_user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get Preparis Portal ID')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Active PortalId",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select e.entityId\nfrom azstudioEntityEntities e \nJOIN azstudioEntityEntityTypes et on e.entityTypeId = et.entityTypeId\nJOIN azstudioEntityStatusTypes st on e.entityStatusTypeId = st.entityStatusTypeId\nwhere entityName =  '@{pipeline().parameters.companyName}'\nand et.entityTypeName = 'Portal'\nand st.entityStatusTypeName = 'Active'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set variable portalEntityId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Active PortalId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "portalEntityId",
									"value": {
										"type": "Expression",
										"content": "@activity('Get Active PortalId').output.firstRow.entityId"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"companyName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "common"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-20T14:08:54Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get RP CompanyName')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Company Name",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "SELECT \ncase when fullName is NULL or fullName ='' then TRIM(dbname) else TRIM(fullName) end as CompanyName\nFROM t_client_info\nwhere dbname = '@{pipeline().globalParameters.rp_db_name}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": "Common",
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Set variable CompanyName ReturnValue",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup Company Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "CompanyName",
									"value": {
										"type": "Expression",
										"content": "@activity('Lookup Company Name').output.firstRow.CompanyName"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Documents"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T19:01:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get RP Plan Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get PlanPrint OutputOptions",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Content-Type": "application/json",
								"Rpxsession-Id": {
									"value": "@pipeline().parameters.rpSessionToken",
									"type": "Expression"
								},
								"Rpxclient-Id": {
									"value": "@pipeline().parameters.rpClientId",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@{pipeline().parameters.rpBaseURL}plan-print/@{pipeline().parameters.planId}/output-options",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable printPreviewOutputOptions",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get PlanPrint OutputOptions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "printPreviewOutputOptions",
							"value": {
								"value": "@string(activity('Get PlanPrint OutputOptions').output)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get PlanComponents",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set variable printPreviewOutputOptions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Content-Type": "application/json",
								"Rpxsession-Id": {
									"value": "@pipeline().parameters.rpSessionToken",
									"type": "Expression"
								},
								"Rpxclient-Id": {
									"value": "@pipeline().parameters.rpClientId",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@{pipeline().parameters.rpBaseURL}plans/@{pipeline().parameters.planId}/plan-components?show-appendices=true",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach PlanComponent",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Transform Response",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Transform Response').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable nodeArray",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "nodeArray",
										"value": {
											"value": "@item().payload",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set PipelineReturnVariable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach PlanComponent",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Azure Function GeneratePlanPrintNodesDTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "postBody",
									"value": {
										"type": "Expression",
										"content": "{\n  \"planPrintNodesDTO\": @{json(activity('Azure Function GeneratePlanPrintNodesDTO').output.response)}, \n  \"printPreviewOutputOptions\":@{variables('printPreviewOutputOptions')}\n}"
									}
								}
							],
							"setSystemVariable": true
						}
					},
					{
						"name": "Create Response Table",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Get PlanComponents",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "drop table if exists migration_plan_components;\n\ncreate table migration_plan_components (\n    plan_id int UNSIGNED NOT NULL,\n    plan_component json NOT NULL\n);\n\ninsert into migration_plan_components\nselect @{pipeline().parameters.planId}\n, '@{activity('Get PlanComponents').output}';\n\n\nselect 'DONE' as table_created;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Transform Response",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Create Response Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "DROP FUNCTION IF EXISTS PlanChildJSON;\r\n\r\nCREATE FUNCTION PlanChildJSON\r\n(id INT, type VARCHAR(50), children JSON)\r\nRETURNS JSON \r\nBEGIN\r\n    DECLARE node JSON;\r\n    SET node = (select JSON_OBJECT('node', JSON_OBJECT('id', id), 'type', UPPER(type), 'children', children, 'selected', 'true'));\r\n    RETURN node;\r\nEND;\r\n\r\nSET SESSION group_concat_max_len = 1000000;\r\n\r\ndrop table if exists migration_plan_child_hierarchy;\r\n\r\ncreate table migration_plan_child_hierarchy as (\r\n    with RECURSIVE child_hierarchy as (\r\n        select \r\n        root.*\r\n        from migration_plan_components,\r\n        JSON_TABLE(plan_component , '$.children[*]' COLUMNS(\r\n            id int PATH '$.id',\r\n            type varchar(50) PATH '$.type',\r\n            children json PATH '$.children',\r\n            parent_id int PATH '$.parent.id')\r\n        ) root\r\n        where root.type != 'root_appendix'\r\n\r\n        UNION\r\n\r\n        select child.*\r\n        from child_hierarchy ch \r\n        join JSON_TABLE(children , '$[*]' COLUMNS(\r\n            id int PATH '$.id',\r\n            type varchar(50) PATH '$.type',\r\n            children json PATH '$.children',\r\n            parent_id int PATH '$.parent.id')\r\n        ) as child on child.parent_id = ch.id\r\n\r\n    )\r\n\r\n    select * from child_hierarchy\r\n);\r\n\r\n\r\nwith recursive child_hierarchy_info as (\r\n\r\n    select id, type, children, parent_id\r\n    , 2 as level \r\n    , concat(cast(parent_id as char(1000)),'.', cast(id as char(1000))) as hierarchy_string \r\n    , json_length(children)\r\n    , case when json_length(children) = 0 then PlanChildJSON(id, type, children) end as child\r\n    from migration_plan_child_hierarchy\r\n    where parent_id = (select plan_id from migration_plan_components)\r\n\r\n    union all\r\n\r\n    select pch.id, pch.type, pch.children, pch.parent_id \r\n    , rch.level + 1 as level\r\n    , concat(hierarchy_string, '.', cast(pch.id as char(10)))  as hierarchy_string \r\n    , json_length(pch.children)\r\n    , case when json_length(pch.children) = 0 then PlanChildJSON(pch.id, pch.type, pch.children) end as child\r\n    from child_hierarchy_info rch\r\n    join migration_plan_child_hierarchy pch on pch.parent_id = rch.id\r\n)\r\n, leaf_nodes as (\r\n    select * from child_hierarchy_info where child is not null order by level, parent_id\r\n)\r\n\r\n, parent_nodes as (\r\n    select * from child_hierarchy_info where child is null order by level, parent_id\r\n)\r\n\r\n\r\n, parent_node_with_child as (\r\n    select p.id, p.parent_id, p.type, l.child\r\n    from parent_nodes p\r\n    left join leaf_nodes l on p.id = l.parent_id\r\n)\r\n\r\n, child_nodes_with_children as (\r\n    select c.id child_id, PlanChildJSON(c.id, c.type, concat('[',group_concat(c.child), ']')) children \r\n    from parent_node_with_child p\r\n    join parent_node_with_child c on p.id = c.parent_id\r\n    where p.child is null\r\n    group by c.id, c.type\r\n)\r\n\r\n, painful_nodes_with_children as(\r\n    select distinct p.id, PlanChildJSON(p.id, p.type, concat('[', cnwc.children , ']')) children \r\n    from parent_node_with_child p\r\n    join parent_node_with_child c on p.id = c.parent_id\r\n    join child_nodes_with_children cnwc on cnwc.child_id = c.id\r\n)\r\n, parent_nodes_with_children as(\r\n    select pnwc.id, PlanChildJSON(pnwc.id, pnwc.type, concat('[',group_concat(pnwc.child), ']')) children \r\n    from parent_node_with_child pnwc\r\n    left join child_nodes_with_children cnwc on pnwc.id = cnwc.child_id\r\n    where pnwc.child is not null\r\n    and cnwc.child_id is null\r\n    group by pnwc.id, pnwc.type\r\n) \r\n, all_nodes_with_children as (\r\n    select * from painful_nodes_with_children\r\n    union\r\n    select * from parent_nodes_with_children\r\n)\r\n, root_nodes_without_children as (\r\n    select id, child \r\n    from leaf_nodes \r\n    where parent_id = (select plan_id from migration_plan_components)\r\n)\r\n\r\n select child as payload from root_nodes_without_children\r\n union\r\n select children as payload from all_nodes_with_children",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Azure Function GeneratePlanPrintNodesDTO",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Get PlanComponents",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GeneratePlanPrintNodesDTO",
							"body": {
								"value": "@activity('Get PlanComponents').output",
								"type": "Expression"
							},
							"headers": {},
							"method": "POST"
						},
						"linkedServiceName": {
							"referenceName": "AzureFunction_GeneratePlanPrintNodesDTO",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rpSessionToken": {
						"type": "string"
					},
					"rpClientId": {
						"type": "string"
					},
					"planId": {
						"type": "string"
					},
					"rpBaseURL": {
						"type": "string"
					},
					"rp_server_name": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					}
				},
				"variables": {
					"printPreviewOutputOptions": {
						"type": "String"
					},
					"nodeArray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Plans"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T18:46:20Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get Recovery Planner User data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Recovery Planner Users",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "CREATE TEMPORARY TABLE IF NOT EXISTS user_data AS (\r\nSELECT \r\n    (SELECT uuid()) as newUserId\r\n    , (SELECT uuid()) as entityUserItemId_portal\r\n    , (SELECT uuid()) as entityUserItemId_location\r\n    , (SELECT uuid()) as userProfileId\r\n    , u.id as userId\r\n    , c.name as contactName\r\n    , IFNULL(ci.email,c.name) as username\r\n    , c.firstName\r\n    , c.middleInitials\r\n    , c.lastName\r\n    , case u.role when 0 then 'SYSTEM' when 1 then 'PARTNER' when 2 THEN 'ADMIN' when 3 then 'MANAGER' when 4 then 'USER' when 5 then 'LISTED' end AS role\r\n    , case u.status when 0 then 'ACTIVE' when 1 then 'INACTIVE' when 2 then 'LOCKED' when 3 then 'TERMINATED' end AS status\r\n    , u.currentLoginAttempts\r\n    , IFNULL(u.password,'') as password\r\n    , u.passwordExpired\r\n    , u.passwordLastUpdated\r\n    , u.twoFactorAuth\r\n    , u.twoFactorAuthSecret\r\n    , u.creationdate\r\n    , u.timezone\r\n    , c.externalID\r\n    \r\n    , case \r\n        when u.timezone = 'UTC' then '8fa8449a-4be5-4b8c-9bcd-c7f378a9f438'\r\n        when u.timezone = 'JST' then '8702ab86-8acc-468d-a735-f5ab8c8de4d5'\r\n        when u.timezone in ('CST', 'America/Chicago') then '19a4144b-76bd-42fd-baa8-bb528a814884'\r\n        when u.timezone in ('EST', 'America/New_York') then 'c16ab931-6dfa-40b0-ac2a-e404e725c8b9'\r\n        else concat('TimeZone', u.timezone, ' Not Yet Mapped')\r\n        END  as timeZoneId\r\n        \r\n    , ci.pin\r\n    , u.title\r\n\r\n    , case u.LANGUAGE when 0 then  'BROWSER_LOCALE'\r\n        when 1 then 'ENGLISH'\r\n        when 2 then 'PORTUGUESE_BRAZIL'\r\n        when 3 then 'SPANISH_DOMINICAN_REP'\r\n        when 4 then 'SPANISH_MEXICAN'\r\n        when 5 then 'FRENCH'\r\n        when 6 then 'RUSSIAN'\r\n       end\r\n       as Language_String\r\n\r\nFROM T_CONTACT c\r\nLEFT JOIN T_USER u ON c.id = u.id\r\nleft JOIN T_CONTACT_INFO ci ON c.id = ci.owner_id and ci.primaryEmail = 1\r\n);\r\n\r\nCREATE TEMPORARY TABLE IF NOT EXISTS user_site_data AS (\r\n    select ud.newUserId, ud.contactName, ud.username, ud.userId, s.*\r\n    from User_data ud\r\n    JOIN T_USER_SITE us ON ud.userId = us.user_id\r\n    JOIN T_SITE s on us.site_id = s.id\r\n);\r\n\r\nCREATE TEMPORARY TABLE IF NOT EXISTS user_site_json_data AS(\r\nselect newUserId\r\n, JSON_ARRAYAGG(JSON_OBJECT(\r\n    'newEnitiyId_Location', (SELECT uuid())\r\n    , 'siteName', usd.name\r\n    , 'siteAddress', usd.address\r\n    , 'siteAddress2', usd.address2\r\n    , 'siteCity', usd.city\r\n    , 'siteState', usd.state\r\n    , 'siteZip', usd.zip\r\n    , 'siteDescription', usd.description\r\n    , 'siteGeneralEmail', usd.generalEmail\r\n    , 'siteLatitude', usd.latitude\r\n    , 'siteLongitude', usd.longitude\r\n    , 'siteFax', usd.mainFax\r\n    , 'sitePhoneNumber', usd.mainNumber\r\n    , 'primarySite', usd.primarySite\r\n    , 'siteRegion', usd.region\r\n    , 'siteCountry', usd.country_id\r\n    )) as user_site_json\r\nfrom user_site_data usd\r\ngroup by newUserId\r\n);\r\n\r\nselect ud.*, jd.user_site_json\r\nfrom user_data ud\r\njoin user_site_json_data jd on ud.newUserId = jd.newUserID\r\n",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable RecoveryPlannerUsers",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Recovery Planner Users",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RecoveryPlannerUsers",
							"value": {
								"value": "@activity('Get Recovery Planner Users').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"RecoveryPlannerUsers": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Backup"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-15T15:58:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookup Iteration Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup iteration Data Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "with recursive iteration_data as (\n    select 1 iteration_start\n    , case when max(row_num) > 5000 then 5000 else max(row_num) end as iteration_stop\n    , 1 iteration \n    , max(row_num) max_row_num\n    from @{pipeline().parameters.tableName}\n    union all\n    select id.iteration_start + 5000\n    , case when id.max_row_num > id.iteration_start + (5000 * (id.iteration + 1)) then id.iteration_start -1 + (5000 * (id.iteration + 1)) else id.max_row_num end as iteration_stop\n    , id.iteration + 1\n    , id.max_row_num\n    from iteration_data id\n    inner join @{pipeline().parameters.tableName} ds on ds.row_num = id.iteration_start\n    \n)\n\nselect * from iteration_data where iteration_start <= max_row_num;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set Pipeline result set",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup iteration Data Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "iteration_data_array",
									"value": {
										"type": "Expression",
										"content": "@activity('Lookup iteration Data Details').output.value"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tableName": {
						"type": "string",
						"defaultValue": "migration_user_data"
					}
				},
				"folder": {
					"name": "common"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T11:56:04Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookup results tester')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup RP Events",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select documentId from ppdocsDocuments \nwhere documentName = 'Test RPX dne'\nand folderId = '65a2a94a-8d9f-462c-8f0f-e4b97709b67a'\nand documentStateId = 'a615996c-640f-47d1-948a-4a3cb1bc7766'\nand owningAccountId = 'd73532f5-55d9-4bea-99d9-389c25ac725a'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rp_db_name": {
						"type": "string",
						"defaultValue": "afsvision"
					},
					"rp_server_name": {
						"type": "string",
						"defaultValue": "recovery-planner-mysql-server.mysql.database.azure.com"
					}
				},
				"folder": {
					"name": "Testers and Misc"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-13T10:02:51Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Strategies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process Strategies",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select\nportalProcessStrategyId\n, portalProcessId\n, strategyTypeId\n, locationId\n, case when locationId is null then null else uuid() end portalProcessLocationId\nfrom migration_portalProcess_strategy\nwhere row_num between @{pipeline().parameters.iterationStart}\nand @{pipeline().parameters.iterationStop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Strategy",
						"description": "If strategy is 'Temporary workspace' we need to insert location. \nbcPortalProcessStrategy has field portalProcessLocationId.\nTable bcPortalProcessLocation is linking locationId to portalProcessLocationId.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Process Strategies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Process Strategies').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Temporary workspace",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().strategyTypeId, '704acb8f-ed9b-4f11-ab37-0f0139895d5b')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Insert Process WFA Strategy Script",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "insertProcessWFAStrategyScript",
													"value": {
														"value": "insert into bcPortalProcessStrategy\n(\n    portalProcessStrategyId\n    , portalProcessId\n    , strategyTypeId\n    , portalProcessStrategyStatusTypeId\n    , dateTimeCreated\n    , createdById\n)\nvalues\n(\n    '@{item().portalProcessStrategyId}'\n    , '@{item().portalProcessId}'\n    , '@{item().strategyTypeId}'\n    , 'c29b7d09-fd49-440a-b540-c213302ac0e6' /*Active*/\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}'\n)",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Insert Process Strategy Temp Workspace Script",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "insertProcessStrategyLocationScript",
													"value": {
														"value": "insert into bcPortalProcessLocation\n(\nportalProcessLocationId\n, portalProcessId\n, locationId\n, portalProcessLocationStatusTypeId\n, dateTimeCreated\n, createdById\n)\nvalues\n(\n'@{item().portalProcessLocationId}'\n, '@{item().portalProcessId}'\n, '@{item().locationId}'\n, 'c60d99bf-eb57-4880-8a73-9e879ecb5fdc' /*Active*/\n, CURRENT_TIMESTAMP\n, '@{pipeline().globalParameters.preparisCreatedById}'\n)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Insert Process Strategy Script",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "insertProcessTWStrategyScript",
													"value": {
														"value": "insert into bcPortalProcessStrategy\n(\n    portalProcessStrategyId\n    , portalProcessId\n    , strategyTypeId\n    , portalProcessStrategyStatusTypeId\n    , portalProcessLocationId\n    , dateTimeCreated\n    , createdById\n)\nvalues\n(\n    '@{item().portalProcessStrategyId}'\n    , '@{item().portalProcessId}'\n    , '@{item().strategyTypeId}'\n    , 'c29b7d09-fd49-440a-b540-c213302ac0e6' /*Active*/\n    , '@{item().portalProcessLocationId}'\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}'\n)",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Set Test script variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Process Strategy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testScript",
							"value": {
								"value": "@join(variables('insertProcessStrategyLocationScript'), ';')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Strategy Locations",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Process Strategy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insertProcessStrategyLocationScript')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Insert into bcPortalProcessLocation",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insertProcessStrategyLocationScript'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If TW",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Strategy Locations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insertProcessTWStrategyScript')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute Insert TW strategy locations",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insertProcessTWStrategyScript'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If WFA",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If TW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insertProcessWFAStrategyScript')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute Insert WFA strategy locations",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insertProcessWFAStrategyScript'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iterationStart": {
						"type": "int"
					},
					"iterationStop": {
						"type": "int"
					},
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"insertProcessTWStrategyScript": {
						"type": "Array"
					},
					"testScript": {
						"type": "String"
					},
					"insertProcessStrategyLocationScript": {
						"type": "Array"
					},
					"insertProcessWFAStrategyScript": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Strategy Employees')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process Strategy Employees",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "Select \nportalProcessStrategyEmployeeId\n, portalProcessStrategyId\n, userId\nfrom migration_Strategy_Employee\nwhere row_num between\n@{pipeline().parameters.iterationStart}\nand @{pipeline().parameters.iterationStop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Strategy Employee",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Process Strategy Employees",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Process Strategy Employees').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Insert Process Strategy Employee Script",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertProcessStrategyEmployee",
										"value": {
											"value": "insert into bcPortalProcessStrategyEmployee\n (\n    portalProcessStrategyEmployeeId\n    , portalProcessStrategyId\n    , userId\n    , processStrategyResourceStatusTypeId\n    , dateTimeCreated\n    , createdById\n )\n VALUES\n (\n    '@{item().portalProcessStrategyEmployeeId}'\n    , '@{item().portalProcessStrategyId}'\n    , '@{item().userId}'\n    , 'dfa05d5e-7ec3-4d2e-8170-bbad882951c5' /*Active*/\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}'\n )",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Insert list is not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Process Strategy Employee",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insertProcessStrategyEmployee')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insertProcessStrategyEmployee'), ',')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Set testInsertStatement",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Process Strategy Employee",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testInsertStatement",
							"value": {
								"value": "@join(variables('insertProcessStrategyEmployee'), ';')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iterationStart": {
						"type": "int"
					},
					"iterationStop": {
						"type": "int"
					}
				},
				"variables": {
					"insertProcessStrategyEmployee": {
						"type": "Array"
					},
					"testInsertStatement": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Strategy Technologies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process Strategy Technologies",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "Select \nportalProcessStrategyTechnologyId\n, portalProcessStrategyId\n, technologyId\n from migration_Strategy_Technology\nwhere row_num between \n@{pipeline().parameters.iterationStart}\n and @{pipeline().parameters.iterationStop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Strategy Technology",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Process Strategy Technologies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Process Strategy Technologies').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Insert Process Strategy Thechnology Script",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertProcessStrategyTechnology",
										"value": {
											"value": "insert into bcPortalProcessStrategyTechnology\n(\n    portalProcessStrategyTechnologyId\n    , portalProcessStrategyId\n    , technologyId\n    , processStrategyResourceStatusTypeId\n    , dateTimeCreated\n    , createdById\n)\nvalues\n(\n    '@{item().portalProcessStrategyTechnologyId}'\n    , '@{item().portalProcessStrategyId}'\n    , '@{item().technologyId}'\n    , 'dfa05d5e-7ec3-4d2e-8170-bbad882951c5' /*Active*/\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "testInsertStatement",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Process Strategy Technology",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testInsertStatement",
							"value": {
								"value": "@join(variables('insertProcessStrategyTechnology'), ',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Insert List not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Process Strategy Technology",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insertProcessStrategyTechnology')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insertProcessStrategyTechnology'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iterationStart": {
						"type": "int"
					},
					"iterationStop": {
						"type": "int"
					}
				},
				"variables": {
					"insertProcessStrategyTechnology": {
						"type": "Array"
					},
					"testInsertStatement": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Strategy Vendors')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process Strategy Vendors",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select\nportalProcessStrategyVendorId\n, portalProcessStrategyId\n, vendorId\nfrom migration_Strategy_Vendor\nwhere row_num between\n@{pipeline().parameters.iterationStart}\nand @{pipeline().parameters.iterationStop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Strategy Vendor",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Process Strategy Vendors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Process Strategy Vendors').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Insert Process Strategy Vendor Script",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertProcessStrategyVendorScript",
										"value": {
											"value": "insert into bcPortalProcessStrategyVendor\n(\n    portalProcessStrategyVendorId\n    , portalProcessStrategyId\n    , vendorId\n    , processStrategyResourceStatusTypeId\n    , dateTimeCreated\n    , createdById\n)\nvalues\n(\n    '@{item().portalProcessStrategyVendorId}'\n    , '@{item().portalProcessStrategyId}'\n    , '@{item().vendorId}'\n    , 'dfa05d5e-7ec3-4d2e-8170-bbad882951c5'\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "testInsertStatements",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Process Strategy Vendor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testInsertStatements",
							"value": {
								"value": "@join(variables('insertProcessStrategyVendorScript'), ';')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Insert is not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Process Strategy Vendor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insertProcessStrategyVendorScript')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insertProcessStrategyVendorScript'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iterationStart": {
						"type": "int"
					},
					"iterationStop": {
						"type": "int"
					}
				},
				"variables": {
					"insertProcessStrategyVendorScript": {
						"type": "Array"
					},
					"testInsertStatements": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Technologies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup migration_technology_data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \ntechnologyId\n, replace(name, '''','''''') as name\n, cast(rpoTime as unsigned) rpoTime\n, cast(rpoTimeInSeconds as unsigned) as rpoTimeInSeconds\n, preparisTimeDurationUnitId \nfrom migration_technology_data\nwhere row_num between @{pipeline().parameters.iterationStart} and @{pipeline().parameters.iterationStop}\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Migration Technology Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup migration_technology_data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup migration_technology_data').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable technology_insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "technology_insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[bcTechnology]\n           ([technologyId]\n           ,[technologyName]\n           ,[portalId]\n           ,[technologyStatusTypeId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[modifiedById]\n           ,[rpoTime]\n           ,[rpoTimeInSeconds]\n           ,[rpoTimeDurationUnitId])\nSELECT \n    '@{item().technologyId}'\n    , '@{item().name}'\n    , '@{pipeline().parameters.portalEntityId}'\n    , '9255219C-A219-4F5B-9AB2-130289FDBB92'\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}'\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}'\n    , case when '@{item().rpoTime}' = '' then NULL else '@{item().rpoTime}' end\n    , case when '@{item().rpoTimeInSeconds}' = '' then NULL else '@{item().rpoTimeInSeconds}' end\n    , case when '@{item().preparisTimeDurationUnitId}' = '' then NULL else '@{item().preparisTimeDurationUnitId}' end",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach Migration Technology Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup migration_technology_data').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('technology_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "testInsertStatements",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach Migration Technology Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testInsertStatements",
							"value": {
								"value": "@join(variables('technology_insert_statements'), ';')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"portalEntityId": {
						"type": "string"
					},
					"iterationStart": {
						"type": "int"
					},
					"iterationStop": {
						"type": "int"
					}
				},
				"variables": {
					"technology_insert_statements": {
						"type": "Array"
					},
					"testInsertStatements": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Vendors and Technologies"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:18:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Vendors')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build vendor migration tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "/* vendor and address */\r\ndrop table if exists migration_vendor_data;\r\n\r\ncreate table migration_vendor_data as (\r\n    with distinct_vendor_contract_data as (\r\n        select distinct v.id vendorId\r\n        , ROW_NUMBER() OVER (PARTITION by v.id ORDER BY cast(vc.expirationDate as datetime) desc) row_num\r\n        , v.name as vendorName\r\n        , 'D355632B-46AB-4376-9591-318F44A505C1' as vendorStatusTypeId\r\n        , v.description as comments\r\n        , case when vc.expirationDate is null then NULL\r\n            else cast(vc.expirationDate as datetime) end as contractEndDate \r\n        , v.address\r\n        , v.address2\r\n        , v.city\r\n        , v.state\r\n        , v.zip\r\n        , v.mainNumber as phone\r\n        , v.url\r\n        , v.country_id\r\n        , c.name as rpCountryName\r\n        , pc.CountryTypeName \r\n        , pc.CountryTypeId \r\n        , 1 as isPrimary\r\n        from T_VENDOR v\r\n        /*join t_vendor_contact vc on v.id = vc.vendor_id*/\r\n        join t_country c on v.country_id = c.id\r\n        left join migration_preparis_userCountry pc on pc.CountryTypeName = c.name\r\n        left join t_contract vc on v.id = vc.vendor_id\r\n        order by v.id\r\n    )\r\n    select *, (select uuid()) as newVendorId, (select uuid()) as newVendorAddressId\r\n    from distinct_vendor_contract_data\r\n    where row_num = 1\r\n);\r\n\r\n\r\n/*vendor contact */\r\ndrop table if exists migration_vendor_contact;\r\n\r\ncreate table migration_vendor_contact as (\r\n\r\n    with all_vendor_contacts as (\r\n        select \r\n        c.id contactId\r\n        , mvd.vendorId\r\n        , mvd.newVendorId\r\n        , (select uuid()) as newVendorContactId \r\n        , concat(c.firstname, ' ', c.lastname) as name \r\n        , (select min(cast(AES_DECRYPT(numberString, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255))) from t_contact_info where owner_id = c.id and  contact_info_type = 'PHONE') as phone\r\n        , (select min(email) from t_contact_info where owner_id = c.id and  contact_info_type = 'EMAIL') as email\r\n        from migration_vendor_data mvd\r\n        join t_vendor_contact vc on mvd.vendorId = vc.vendor_id\r\n        join t_contact c on vc.id = c.id\r\n        order by c.name\r\n    )\r\n    , vendor_primary_contact as (\r\n        select min(contactId) contactId, vendorId \r\n            from all_vendor_contacts\r\n        group by vendorId\r\n    )\r\n    select avc.* \r\n    , case when vpc.contactId is null then 0\r\n        else 1 \r\n        end as isPrimary\r\n    from all_vendor_contacts avc\r\n    left join vendor_primary_contact vpc on avc.contactId = vpc.contactId\r\n\r\n);\r\n\r\n\r\nselect 'tables created' as 'Lookup hack';",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup migration_vendor_data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup migration_vendor_data').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Preparis Vendor",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[bcVendor]\n           ([vendorId]\n           ,[vendorName]\n           ,[portalId]\n           ,[vendorStatusTypeId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[contactName]\n           ,[contactPhone]\n           ,[comments]\n           ,[contractStartDate]\n           ,[contractEndDate]\n           ,[documentFolderId])\nSELECT\n      '@{item().newVendorId}' \n      ,'@{item().vendorName}'\n      ,'@{pipeline().parameters.portalEntityId}'\n      ,'@{item().vendorStatusTypeId}'\n      ,CURRENT_TIMESTAMP\n      ,'@{pipeline().globalParameters.preparisCreatedById}'\n      ,CURRENT_TIMESTAMP\n      ,'@{pipeline().globalParameters.preparisCreatedById}'\n      ,NULL\n      ,NULL\n      ,case \n            when '@{item().comments}' = '' then null\n            else '@{item().comments}' \n            end\n      ,NULL\n      ,case \n            when '@{item().contractEndDate}' = '' then null\n            else '@{item().contractEndDate}' \n            end\n      ,NULL\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create Vendor Addresses",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Create Preparis Vendor",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[bcVendorAddress]\n           ([vendorAddressId]\n           ,[vendorId]\n           ,[address1]\n           ,[address2]\n           ,[city]\n           ,[state]\n           ,[zip]\n           ,[phone]\n           ,[url]\n           ,[countryTypeId]\n           ,[isPrimary]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\nSELECT \n      '@{item().newVendorAddressId}'\n      ,'@{item().newVendorId}'\n      ,'@{item().address}'\n      ,case \n            when '@{item().address2}' = '' then null\n            else '@{item().address2}' \n            end\n      ,'@{item().city}'\n      ,'@{item().state}'\n      ,'@{item().zip}'\n      ,case \n            when '@{item().phone}' = '' then null\n            else '@{item().phone}' \n            end\n      ,case \n            when '@{item().url}' = '' then null\n            else '@{item().url}' \n            end\n      ,case \n            when LEN('@{item().CountryTypeId}') <> 36 then '2d76605b-86b5-40ff-9a71-c4893e5916fb'\n            else '@{item().CountryTypeId}'\n            end\n      ,1\n      ,CURRENT_TIMESTAMP\n      ,'@{pipeline().globalParameters.preparisCreatedById}'\n      ,CURRENT_TIMESTAMP\n      ,'@{pipeline().globalParameters.preparisCreatedById}'\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Lookup migration_vendor_data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Build vendor migration tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select newVendorId\r\n, replace(vendorName, '''','''''') vendorName\r\n, vendorStatusTypeId\r\n, replace(comments, '''','''''') comments\r\n, contractEndDate  \r\n, newVendorAddressId\r\n, replace(address, '''','''''') address\r\n, replace(address2, '''','''''') address2\r\n, replace(city, '''','''''') city\r\n, state\r\n, zip\r\n, phone\r\n, url\r\n, CountryTypeId\r\n, isPrimary\r\nfrom migration_vendor_data;\r\n",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Lookup Vendor Contacts",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select \r\nnewVendorId\r\n, newVendorContactId\r\n, replace(name, '''','''''') name \r\n, phone\r\n, replace(email, '''','''''') email\r\n, isPrimary\r\nfrom migration_vendor_contact;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Vendor Contact",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Vendor Contacts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Vendor Contacts').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Vendor Contact",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[bcVendorContact]\n           ([vendorContactId]\n           ,[vendorId]\n           ,[name]\n           ,[email]\n           ,[phone]\n           ,[title]\n           ,[isPrimary]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\nSELECT\n      '@{item().newVendorContactId}'\n      ,'@{item().newVendorId}'\n      ,'@{item().name}'\n      ,case \n            when '@{item().email}' = '' then null\n            else '@{item().email}' \n            end      \n      ,case \n            when '@{item().phone}' = '' then null\n            else '@{item().phone}' \n            end  \n      ,NULL\n      , @{item().isPrimary}\n      , CURRENT_TIMESTAMP\n      , '@{pipeline().globalParameters.preparisCreatedById}'\n      , CURRENT_TIMESTAMP\n      , '@{pipeline().globalParameters.preparisCreatedById}'\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rp_server_name": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"portalEntityId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Vendors and Technologies"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T10:38:02Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Process Dependencies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dependencies",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select portalProcessDependencyId,\nportalProcessId,\ndependentPortalProcessId\n from migration_portalProcess_dependency\nwhere row_num between @{pipeline().parameters.iterationStart}\nand @{pipeline().parameters.iterationStop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Dependency",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Dependencies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Dependencies').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertProcessDependencyScript",
										"value": {
											"value": "insert into bcPortalProcessDependency\n(portalProcessDependencyId,\nportalProcessId,\ndependentPortalProcessId,\nportalProcessDependencyStatusTypeId,\ndateTimeCreated,\ncreatedById)\nvalues\n(\n'@{item().portalProcessDependencyId}',\n'@{item().portalProcessId}',\n'@{item().dependentPortalProcessId}',\n'c60d99bf-eb57-4880-8a73-9e879ecb5fdc',\nCURRENT_TIMESTAMP,\n'@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Insert Process Dependencies",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Dependency",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@join(variables('insertProcessDependencyScript'), ';')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iterationStart": {
						"type": "int"
					},
					"iterationStop": {
						"type": "int"
					}
				},
				"variables": {
					"insertProcessDependencyScript": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "BC"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}