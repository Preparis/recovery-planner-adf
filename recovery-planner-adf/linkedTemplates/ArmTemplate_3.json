{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "recovery-planner-adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Process MTD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Is MTD Enabled",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "SELECT\ncase when enabled = 1 then 'True' else 'False' end isEnabled\nFROM T_FUNCTION_FIELD_ORDER WHERE field = 4;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Insert Entity Setting MTD",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Is MTD Enabled",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "insert into azstudioEntitySettings\n(\n    settingId,\n    settingTypeId,\n    entityId,\n    userStringTypeId,\n    settingValue,\n    dateTimeCreated,\n    createdById\n)\nVALUES\n(\n    NEWID(),\n    '1ce7f8d7-da70-41e3-8107-d9926dc61bb8',\n    '@{pipeline().parameters.currentPortalId}',\n    '00000000-0000-0000-0000-000000000000',\n    '@{activity('Is MTD Enabled').output.firstRow.isEnabled}',\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "isMTDEnabled True",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is MTD Enabled",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Is MTD Enabled').output.firstRow.isEnabled",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Update Processes MTD",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "/*\n-- test code\nselect\npp.portalProcessName,\npp.rtoImpactTimespanId,\nts.timespanInSeconds,\nts.timespanName,\nts.rn,\nts1.timespanName,\nts1.rn,\nISNULL(ts1.timespanName, ts.timespanName) mtdName,\nISNULL(ts1.impactTimespanId, ts.impactTimespanId) mtdId\n*/\n\nupdate pp\nset pp.mtdImpactTimespanId = ISNULL(ts1.impactTimespanId, ts.impactTimespanId)\n from bcPortalProcess pp\njoin bcPortalFunctionalArea pfa on pfa.portalFunctionalAreaId = pp.portalFunctionalAreaId\njoin (\n    select \nROW_NUMBER() OVER (ORDER by timespanInSeconds desc) rn,\n* from bcImpactTimespan\nwhere portalId = '@{pipeline().parameters.currentPortalId}') ts on ts.impactTimespanId = pp.rtoImpactTimespanId\nleft join (\n    select \nROW_NUMBER() OVER (ORDER by timespanInSeconds desc) rn,\n* from bcImpactTimespan\nwhere portalId = '@{pipeline().parameters.currentPortalId}') ts1 on ts.rn = (ts1.rn + 1)\nwhere pfa.portalId = '@{pipeline().parameters.currentPortalId}'",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"test": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BC/RTO MTD"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Processes RTOs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Old API RP Session Token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Build RTO Migration tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": {
								"value": "@{pipeline().globalParameters.rpOldAPIBaseUrl}token",
								"type": "Expression"
							},
							"body": {
								"value": "{\n    \"rpClientId\": \"@{pipeline().globalParameters.rpClientId}\",\n    \"clientId\": \"@{pipeline().globalParameters.rpOldAPIClientId}\",\n    \"clientSecret\": \"@{pipeline().globalParameters.rpOldAPIClientSecret}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable rpJWT",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Old API RP Session Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "rpJWT",
							"value": {
								"value": "@activity('Get Old API RP Session Token').output.accessToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Processes without RTO",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set variable rpJWT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": " select FUNCTION_ID from migration_portalProcess_RTO\r\n where rto_id is null;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process No RTO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Processes without RTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Processes without RTO').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get RP Process",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"Authorization": {
												"value": "@concat('Bearer ', variables('rpJWT'))",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@{pipeline().globalParameters.rpOldAPIBaseUrl}v1/functions/@{item().FUNCTION_ID}?size=1802&page=0",
											"type": "Expression"
										}
									}
								},
								{
									"name": "RTO set",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get RP Process",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(length(activity('Get RP Process').output.rto), 0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Update Process RTO",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureMySqlSource",
														"query": {
															"value": "with tempRTO as (\nselect id, seconds, description, newImpactTimespanId\n from migration_rto_intervals\nwhere description = '@{activity('Get RP Process').output.rto}'\nLIMIT 1)\n\nupdate migration_portalProcess_RTO\nset rto_id = (select id from tempRTO),\nrto_seconds = (select seconds from tempRTO),\nrto_description = (select description from tempRTO),\nnewImpactTimespanId = (select newImpactTimespanId from tempRTO)\nwhere FUNCTION_ID = @{activity('Get RP Process').output.id};\n\nselect 'DONE' as 'Lookup Activity Hack';",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"dataset": {
														"referenceName": "RecoveryPlanner",
														"type": "DatasetReference",
														"parameters": {
															"db_name": {
																"value": "@pipeline().globalParameters.rp_db_name",
																"type": "Expression"
															},
															"server_name": {
																"value": "@pipeline().globalParameters.rp_server_name",
																"type": "Expression"
															}
														}
													},
													"firstRowOnly": false
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Build RTO Migration tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "DROP TABLE IF EXISTS migration_portalProcess_RTO;\r\n\r\nCREATE TABLE migration_portalProcess_RTO AS\r\n(select * from\r\n(select \r\nROW_NUMBER() OVER(PARTITION BY pp.portalProcessId ORDER BY rto.seconds) rn,\r\npp.FUNCTION_ID,\r\npp.portalProcessId,\r\nrto.id rto_id,\r\nrto.seconds rto_seconds,\r\nrto.description rto_description,\r\nrto.newImpactTimespanId\r\n from\r\n migration_portalProcess_data pp\r\nleft join T_BIA_MATRIX_FUNCTION_ENTRY functStrategy on pp.FUNCTION_ID = functStrategy.FUNCTION_ID\r\nleft join migration_rto_intervals rto on rto.id = functStrategy.rto_id\r\n)\r\n minRTOs\r\nwhere rn = 1);\r\n\r\nselect 'DONE' as 'Lookup Activity Hack';",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Processes RTO",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Process No RTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select portalProcessId,\r\nnewImpactTimespanId\r\n from migration_portalProcess_RTO where rto_id is not null",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process RTO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Processes RTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Processes RTO').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append Update Process script",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "updateProcessRTOSQL",
										"value": {
											"value": "update bcPortalProcess\nset rtoImpactTimespanId = '@{item().newImpactTimespanId}'\nwhere portalProcessId = '@{item().portalProcessId}'",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set Test script variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Process RTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testUpdateScript",
							"value": {
								"value": "@join(variables('updateProcessRTOSQL'), ';')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Process RTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('updateProcessRTOSQL')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Update Portal Process RTO",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('updateProcessRTOSQL'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"rpJWT": {
						"type": "String"
					},
					"processesFromRP": {
						"type": "Array"
					},
					"updateProcessRTOSQL": {
						"type": "Array"
					},
					"currentPortalId": {
						"type": "String"
					},
					"testUpdateScript": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BC/RTO MTD"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RTO Intervals')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RTO intervals",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Build Migration Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select * from migration_rto_intervals",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RTO Interval",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "RTO intervals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('RTO intervals').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append Insert interval script",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertRTOIntervalsSQL",
										"value": {
											"value": "insert into bcImpactTimespan\n(impactTimespanId,\ntimespanName,\nimpactTimespanStatusTypeId,\nportalId,\ntimespanInSeconds,\ntimespanDuration,\ntimespanDurationUnitId,\ndateTimeCreated,\ncreatedById)\nVALUES\n(\n    '@{item().newImpactTimespanId}',\n    '@{item().description}',\n    'e37def28-175b-4543-89b4-af86220f1bba',\n    '@{pipeline().parameters.currentPortalId}',\n    @{item().seconds},\n    @{item().timespanDuration},\n    '@{item().timespanDurationUnitId}',\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)\n\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append Insert interval Translations script",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertRTOIntervalTranslationsSQL",
										"value": {
											"value": "insert into bcImpactTimespanTranslation\n(impactTimespanTranslationId,\nimpactTimespanId,\ntimespanName,\nlanguageCode,\ndateTimeCreated,\ncreatedById)\nvalues\n(\n    NEWID(),\n    '@{item().newImpactTimespanId}',\n    '@{item().description}',\n    'en',\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Build Migration Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "-- Seconds In Day = 86400\r\n\r\nDROP TABLE IF EXISTS migration_rto_intervals;\r\n\r\nCREATE TABLE migration_rto_intervals AS (\r\n\r\nwith temp as\r\n(select \r\nid,\r\nuuid() newImpactTimespanId,\r\nsubstring(description, 1, 20) description,\r\n(FRAME_END_HOURS * 3600) +\r\n(FRAME_END_DAYS * 86400) +\r\n(FRAME_END_WEEKS * 86400 * 7) +\r\n(FRAME_END_MONTHS * 86400 * 30) seconds\r\n from t_recovery_time_objective)\r\n\r\nselect t.*,\r\ncase when unit = 'days' then seconds DIV (3600 * 24) else\r\n    case when unit = 'hours' then seconds DIV 3600 else 100 end end timespanDuration,\r\ncase when unit = 'days' then '0cab3e34-0f19-4cc6-b580-cc8dc70af2d5' else\r\n    case when unit = 'hours' then '41bb6fc1-df74-42b5-8f41-e55e5a4570ed' else '9372a9f2-4391-4a8b-80ec-9c6150a48f23' end end timespanDurationUnitId\r\n from\r\n(select id, newImpactTimespanId, description, seconds,\r\nIF ((seconds / 86400) != CONVERT(seconds / 86400, UNSIGNED), 'hours', 'days') unit\r\n from temp\r\n UNION\r\n select\r\n -1,\r\n uuid() newImpactTimespanId,\r\n substring((select CONCAT(temp.description, ' +')\r\n from temp\r\n where seconds = (select max(seconds) from temp)), 1, 20) description,\r\n  3153600000 seconds,\r\n  'years' unit) t\r\n);\r\n\r\nselect 'DONE' as 'Lookup Activity Hack';",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Insert RTO intervals",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "RTO Interval",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@join(variables('insertRTOIntervalsSQL'),';')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Exclude System RTO intervals",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Insert RTO intervals Translations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "insert into bcExcludedSystemImpactTimeSpans\n(\n    excludedSystemImpactTimeSpanId,\n    portalId,\n    impactTimespanId,\n    dateTimeCreated,\n    createdById\n)\nselect \nNEWID(),\n'@{pipeline().parameters.currentPortalId}',\nimpactTimespanId,\nCURRENT_TIMESTAMP,\n'@{pipeline().globalParameters.preparisCreatedById}'\nfrom\nbcImpactTimespan\nwhere portalId is null",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Insert RTO intervals Translations",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Insert RTO intervals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@join(variables('insertRTOIntervalTranslationsSQL'),';')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"insertRTOIntervalsSQL": {
						"type": "Array"
					},
					"insertRTOIntervalTranslationsSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "BC/RTO MTD"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test Create Recovery Planner Sites')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Recovery Planner Sites",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"json_data": {
									"value": "@variables('test_array')",
									"type": "Expression"
								},
								"PortalEntityID": "987654321"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select user_site_json from user_site_migration_data;\n",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "test_array",
							"value": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"test_array": {
						"type": "Array",
						"defaultValue": [
							{
								"siteFax": "ronTest",
								"siteZip": null,
								"siteCity": "TBD",
								"siteName": "Test Alt Site",
								"newUserId": "83e9a761-c4fa-11ee-b23f-6045bd7c0953",
								"siteState": null,
								"siteRegion": null,
								"primarySite": 1,
								"siteAddress": "TBD",
								"siteCountry": 2,
								"siteAddress2": null,
								"siteLatitude": "",
								"siteLongitude": "",
								"siteDescription": null,
								"sitePhoneNumber": "",
								"siteGeneralEmail": null,
								"newSiteLocationId": "83ef4ff2-c4fa-11ee-b23f-6045bd7c0953"
							},
							{
								"siteFax": "",
								"siteZip": "06611",
								"siteCity": "Trumbull",
								"siteName": "Main Site (1)",
								"newUserId": "83e9a761-c4fa-11ee-b23f-6045bd7c0953",
								"siteState": "CT",
								"siteRegion": null,
								"primarySite": 1,
								"siteAddress": "101 Merritt Blvd.",
								"siteCountry": 2,
								"siteAddress2": null,
								"siteLatitude": "41.23933",
								"siteLongitude": "-73.14601",
								"siteDescription": null,
								"sitePhoneNumber": "+1 (203) 455-9990",
								"siteGeneralEmail": null,
								"newSiteLocationId": "83ef5074-c4fa-11ee-b23f-6045bd7c0953"
							}
						]
					}
				},
				"folder": {
					"name": "Backup"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-15T15:58:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Update Impact Categories')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RP Impact Categories",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select uuid() overrideSystemImpactCategoryId,\n replace(t.name, '''','''''') name,\n replace(t.description, '''','''''') description,\n numericValue\n   from t_detailed_outage_impact_type t\n   order by numericValue\n   limit 9;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RP Impact Category",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "RP Impact Categories",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('RP Impact Categories').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Update Impact Categories",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "insert into bcOverrideSystemImpactCategories\n(overrideSystemImpactCategoryId,\nportalId,\nimpactCategoryId,\ncategoryName,\ncategoryColor,\ncategoryDescription,\ndateTimeCreated,\ncreatedById)\nVALUES\n(\n    '@{item().overrideSystemImpactCategoryId}',\n    '@{pipeline().parameters.currentPortalId}',\n    (select impactCategoryId from bcImpactCategory where sequenceNbr = @{item().numericValue}),\n    '@{item().name}',\n    (select categoryColor from bcImpactCategory where sequenceNbr = @{item().numericValue}),\n    '@{item().description}',\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n);\n\ninsert into bcImpactCategoryTranslation\n(\n    impactCategoryTranslationId,\n    impactCategoryId,\n    categoryName,\n    categoryDescription,\n    languageCode,\n    overrideSystemImpactCategoryId,\n    dateTimeCreated,\n    createdById\n)\nvalues\n(\n    NEWID(),\n    (select impactCategoryId from bcImpactCategory where sequenceNbr = @{item().numericValue}),\n    '@{item().name}',\n    '@{item().description}',\n    'en',\n    '@{item().overrideSystemImpactCategoryId}',\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Exclude System Impacts",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "RP Impact Category",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "insert into bcExcludedSystemImpactCategories\n(excludedSystemImpactCatogoryId,\nportalId,\nimpactCategoryId,\ndateTimeCreated,\ncreatedById)\nSELECT\nNEWID(),\n'@{pipeline().parameters.currentPortalId}',\nic.impactCategoryId,\nCURRENT_TIMESTAMP,\n'@{pipeline().globalParameters.preparisCreatedById}'\nFROM \nbcImpactCategory ic\nleft join (\n   SELECT impactCategoryId\n   from bcOverrideSystemImpactCategories\n   where portalId = '@{pipeline().parameters.currentPortalId}}') osic on osic.impactCategoryId = ic.impactCategoryId\nwhere osic.impactCategoryId is null",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BC/RTO MTD"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/backup Create Preparis Users_BeforeTrim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Recovery Planner Users",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "SELECT \n    (SELECT uuid()) as newUserId\n    , (SELECT uuid()) as entityUserItemId_portal\n    , (SELECT uuid()) as entityUserItemId_location\n    , IFNULL(c.name,'') as username\n    , c.firstName\n    , c.middleInitials\n    , c.lastName\n    , case u.role when 0 then 'SYSTEM' when 1 then 'PARTNER' when 2 THEN 'ADMIN' when 3 then 'MANAGER' when 4 then 'USER' when 5 then 'LISTED' end AS role\n    , case u.status when 0 then 'ACTIVE' when 1 then 'INACTIVE' when 2 then 'LOCKED' when 3 then 'TERMINATED' end AS status\n    , ct.name\n    , ci.email\n    , ci.primaryEmail\n    , cast(AES_DECRYPT(ci.line1, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) line1\n    , cast(AES_DECRYPT(ci.line2, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) line2\n    , cast(AES_DECRYPT(ci.city, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) city\n    , cast(AES_DECRYPT(ci.state, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) state\n    , cast(AES_DECRYPT(ci.zip, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) zip\n    , cast(AES_DECRYPT(ci.numberString, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) numberString\n    , cic.name as contactInfoCountry\n    , ct.NAME as contactTypeName\n    , s.name as siteName\n    , sc.name as siteCountryName\n    , us.floor\n    , us.room\n    , us.seat\n    , u.currentLoginAttempts\n    , IFNULL(u.password,'') as password\n    , u.passwordExpired\n    , u.passwordLastUpdated\n    , u.twoFactorAuth\n    , u.twoFactorAuthSecret\n    , u.creationdate\n    , cast(s.latitude as float) as latitude\n    , cast(s.longitude as float) as longitude\n    , u.timezone\n    , c.externalID\n    , case u.timezone \n        when 'UTC' then '8fa8449a-4be5-4b8c-9bcd-c7f378a9f438'\n        when 'JST' then '8702ab86-8acc-468d-a735-f5ab8c8de4d5'\n        when 'CST' OR 'America/Chicago' then '19a4144b-76bd-42fd-baa8-bb528a814884'\n        when 'EST' OR 'America/New_York' then 'c16ab931-6dfa-40b0-ac2a-e404e725c8b9'\n        else concat('TimeZone', u.timezone, ' Not Yet Mapped')\n        END  as timeZoneId\nFROM T_CONTACT c\nLEFT JOIN T_USER u ON c.id = u.id\nJOIN T_CONTACT_INFO ci ON c.id = ci.owner_id\nJOIN T_CONTACT_TYPE ct ON ci.contact_type_id = ct.id\nJOIN T_CONTACT_METHOD cm on ct.contact_method_id = cm.id\nJOIN T_USER_SITE us ON u.id = us.user_id\nJOIN T_SITE s on us.site_id = s.id\nLEFT JOIN T_COUNTRY sc on s.country_id = sc.id \nLEFT JOIN T_COUNTRY cic on ci.country_id = cic.id \n",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable RecoveryPlannerUsers",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Recovery Planner Users",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RecoveryPlannerUsers",
							"value": {
								"value": "@activity('Get Recovery Planner Users').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set variable RecoveryPlannerUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('RecoveryPlannerUsers')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "create new SecurityUser",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioSecurityUsers]\n           ([userId]\n           ,[userName]\n           ,[passwordHash]\n           ,[userStateId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[passwordResetRequired]\n           ,[lat]\n           ,[lng]\n           ,[consecutiveFailedLoginAttempts]\n           ,[dateTimePasswordLockout]\n           ,[externalSystemId]\n           ,[timeZoneId]\n           ,[seed]\n           ,[isFullyMigrated]\n           ,[isSelfRegistered]\n           ,[dateTimePasswordLastModified])\nSELECT '@{item().newUserId}' as newUserId\n, '@{item().username}' as username\n, '@{item().password}' as password\n, case when '@{item().role}' = 'LISTED' then '@{variables('userStateId_Active')}' else '@{variables('userStateId_Pending')}' end as userStateId\n, CURRENT_TIMESTAMP as dateTimeCreated\n, '@{variables('CreatedByGUID')}' as createdById\n, CURRENT_TIMESTAMP as dateTimeLastModified\n, '@{variables('CreatedByGUID')}' as lastModifiedById\n, 1 as passwordResetRequired\n, @{item().latitude} as lat\n, @{item().longitude} as lng\n, 0 as consecutiveFailedLoginAttempts\n, CURRENT_TIMESTAMP as dateTimePasswordLockout\n, '@{item().externalId}' as externalSystemId\n, '@{item().timeZoneId}' as timeZoneId\n, '' as seed\n, 0 as isFullyMigrated\n, 0 as isSelfRegistered\n, CURRENT_TIMESTAMP as dateTimePasswordLastModified",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create EntityUsers entries",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "create new SecurityUser",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().entityUserItemId_portal}'\n           ,'@{pipeline().parameters.PortalEntityID}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{variables('CreatedByGUID')}'\n           ,CURRENT_TIMESTAMP\n           ,'@{variables('CreatedByGUID')}'\n           ,0\n           ,NULL),\n            ('@{item().entityUserItemId_location}'\n           ,'@{pipeline().parameters.LocationEntityId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{variables('CreatedByGUID')}'\n           ,CURRENT_TIMESTAMP\n           ,'@{variables('CreatedByGUID')}'\n           ,0\n           ,NULL)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string",
						"defaultValue": "7cbeaaf5-0b30-4809-91d5-f0e00446544d"
					},
					"LocationEntityId": {
						"type": "string",
						"defaultValue": "19ed2bc4-b9e7-4a56-ad3e-981b1010254e"
					}
				},
				"variables": {
					"userStateId_Active": {
						"type": "String",
						"defaultValue": "c1ff019b-b3f6-411c-b04e-59294e9090fe"
					},
					"userStateId_Pending": {
						"type": "String",
						"defaultValue": "b5d6bc28-5e6d-4bd1-b028-f7e9a6c6b7a1"
					},
					"RecoveryPlannerUsers": {
						"type": "Array"
					},
					"SelectString": {
						"type": "String"
					},
					"CreatedByGUID": {
						"type": "String",
						"defaultValue": "7b5ea827-bcd7-4a8a-8807-fc7e94a93455"
					}
				},
				"folder": {
					"name": "Backup"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-15T15:58:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/debug azstudioSecurityUsers_sequential')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Recovery Planner Users",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "SELECT \n    (SELECT uuid()) as newUserId\n    , concat(\"'\",IFNULL(c.name,''),\"'\") as username\n    , c.firstName\n    , c.middleInitials\n    , c.lastName\n    , case u.role when 0 then 'SYSTEM' when 1 then 'PARTNER' when 2 THEN 'ADMIN' when 3 then 'MANAGER' when 4 then 'USER' when 5 then 'LISTED' end AS role\n    , case u.status when 0 then 'ACTIVE' when 1 then 'INACTIVE' when 2 then 'LOCKED' when 3 then 'TERMINATED' end AS status\n    , ct.name\n    , ci.email\n    , ci.primaryEmail\n    , cast(AES_DECRYPT(ci.line1, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) line1\n    , cast(AES_DECRYPT(ci.line2, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) line2\n    , cast(AES_DECRYPT(ci.city, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) city\n    , cast(AES_DECRYPT(ci.state, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) state\n    , cast(AES_DECRYPT(ci.zip, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) zip\n    , cast(AES_DECRYPT(ci.numberString, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) numberString\n    , cic.name as contactInfoCountry\n    , ct.NAME as contactTypeName\n    , s.name as siteName\n    , sc.name as siteCountryName\n    , us.floor\n    , us.room\n    , us.seat\n    , u.currentLoginAttempts\n    , concat(\"'\",IFNULL(u.password,''),\"'\") as password\n    , u.passwordExpired\n    , u.passwordLastUpdated\n    , u.twoFactorAuth\n    , u.twoFactorAuthSecret\n    , u.creationdate\n    , cast(s.latitude as float) as latitude\n    , cast(s.longitude as float) as longitude\n    , u.timezone\n    , c.externalID\n    , case u.timezone \n        when 'UTC' then '8fa8449a-4be5-4b8c-9bcd-c7f378a9f438'\n        when 'JST' then '8702ab86-8acc-468d-a735-f5ab8c8de4d5'\n        when 'CST' OR 'America/Chicago' then '19a4144b-76bd-42fd-baa8-bb528a814884'\n        when 'EST' OR 'America/New_York' then 'c16ab931-6dfa-40b0-ac2a-e404e725c8b9'\n        else concat('TimeZone', u.timezone, ' Not Yet Mapped')\n        END  as timeZoneId\nFROM T_CONTACT c\nLEFT JOIN T_USER u ON c.id = u.id\nJOIN T_CONTACT_INFO ci ON c.id = ci.owner_id\nJOIN T_CONTACT_TYPE ct ON ci.contact_type_id = ct.id\nJOIN T_CONTACT_METHOD cm on ct.contact_method_id = cm.id\nJOIN T_USER_SITE us ON u.id = us.user_id\nJOIN T_SITE s on us.site_id = s.id\nLEFT JOIN T_COUNTRY sc on s.country_id = sc.id \nLEFT JOIN T_COUNTRY cic on ci.country_id = cic.id ",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable RecoveryPlannerUsers",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Recovery Planner Users",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RecoveryPlannerUsers",
							"value": {
								"value": "@activity('Get Recovery Planner Users').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set variable RecoveryPlannerUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('RecoveryPlannerUsers')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "create new SecurityUser",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioSecurityUsers]\n           ([userId]\n           ,[userName]\n           ,[passwordHash]\n           ,[userStateId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[passwordResetRequired]\n           ,[lat]\n           ,[lng]\n           ,[consecutiveFailedLoginAttempts]\n           ,[dateTimePasswordLockout]\n           ,[externalSystemId]\n           ,[timeZoneId]\n           ,[seed]\n           ,[isFullyMigrated]\n           ,[isSelfRegistered]\n           ,[dateTimePasswordLastModified])\n@{variables('SelectString')}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SelectString",
										"value": {
											"value": "SELECT '@{item().newUserId}' as newUserId\n, case when @{item().username} = 'NULL' then NULL else @{item().username} end as username\n, case when @{item().password} = 'NULL' then NULL else @{item().password} end as password\n, case when '@{item().role}' = 'LISTED' then '@{variables('userStateId_Active')}' else '@{variables('userStateId_Pending')}' end as userStateId\n, CURRENT_TIMESTAMP as dateTimeCreated\n, '@{variables('CreatedByGUID')}' as createdById\n, CURRENT_TIMESTAMP as dateTimeLastModified\n, '@{variables('CreatedByGUID')}' as lastModifiedById\n, 1 as passwordResetRequired\n, @{item().latitude} as lat\n, @{item().longitude} as lng\n, 0 as consecutiveFailedLoginAttempts\n, CURRENT_TIMESTAMP as dateTimePasswordLockout\n, '@{item().externalId}' as externalSystemId\n, '@{item().timeZoneId}' as timeZoneId\n, '' as seed\n, 0 as isFullyMigrated\n, 0 as isSelfRegistered\n, CURRENT_TIMESTAMP as dateTimePasswordLastModified",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string",
						"defaultValue": "7cbeaaf5-0b30-4809-91d5-f0e00446544d"
					},
					"LocationEntityId": {
						"type": "string",
						"defaultValue": "19ed2bc4-b9e7-4a56-ad3e-981b1010254e"
					}
				},
				"variables": {
					"userStateId_Active": {
						"type": "String",
						"defaultValue": "c1ff019b-b3f6-411c-b04e-59294e9090fe"
					},
					"userStateId_Pending": {
						"type": "String",
						"defaultValue": "b5d6bc28-5e6d-4bd1-b028-f7e9a6c6b7a1"
					},
					"RecoveryPlannerUsers": {
						"type": "Array"
					},
					"SelectString": {
						"type": "String"
					},
					"CreatedByGUID": {
						"type": "String",
						"defaultValue": "7b5ea827-bcd7-4a8a-8807-fc7e94a93455"
					}
				},
				"folder": {
					"name": "Backup"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-15T15:58:32Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/null tester')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup null value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select null as test_value;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": "marshall",
									"server_name": "recovery-planner-mysql-server.mysql.database.azure.com"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable anything",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup null value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "anything",
							"value": {
								"value": "@activity('Lookup null value').output.value[0].test_value",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"anything": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Testers and Misc"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-21T10:38:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CompanyNameTester')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Get RP CompanyName",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP CompanyName",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"rp_server_name": "recovery-planner-mysql-server.mysql.database.azure.com",
								"rp_db_name": "mercbank"
							}
						}
					},
					{
						"name": "Set variable CompanyName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get RP CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CompanyName",
							"value": {
								"value": "@activity('Execute Pipeline Get RP CompanyName').output.pipelineReturnValue.CompanyName",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"CompanyName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Testers and Misc"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-13T10:01:42Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields Options Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Iteration Data CF Options",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_custom_fields_options"
							}
						}
					},
					{
						"name": "ForEach Custom Field Option in Batch",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Iteration Data CF Options",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Iteration Data CF Options').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Create Custom Field Options",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Custom Fields Options",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"rpCustomFieldType": {
												"value": "@pipeline().parameters.rpCustomFieldType",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"portalId": {
						"type": "string"
					},
					"rpCustomFieldType": {
						"type": "int"
					}
				},
				"variables": {
					"rp_area_type": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Migration Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "/*\nDROP TABLE IF EXISTS migration_custom_fields_data_types_mapping;\nDROP TABLE IF EXISTS migration_custom_fields;\nDROP TABLE IF EXISTS migration_custom_fields_options;\nDROP TABLE IF EXISTS migration_custom_fields_types_mapping;\n*/\n\n/* the migration_custom_fields_data_types_mapping table can be created once\nand populated once\n*/\n\nCREATE TABLE IF NOT EXISTS migration_custom_fields_data_types_mapping\n(\n    rp_type INT,\n    rp_descr char(50),\n    preparis_type CHAR(38),\n    preparis_descr char(50)\n);\n\ninsert into migration_custom_fields_data_types_mapping\n(rp_type, rp_descr, preparis_type, preparis_descr)\nselect a.rp_type, a.rp_descr, a.preparis_type, a.preparis_descr\nfrom\n(select t.* from\n(values\nrow(10, 'DATE', '1eccbe40-1b3b-461b-95df-35f1fe6a8af2', 'DateTime'),\nrow(2, 'ShortText', '0f6f2372-1e4c-4d67-ad13-615a0540488c', 'ShortText'),\nrow(3, 'RADIO', 'aad6f035-05f9-42d3-b6ea-682371340875', 'SelectOne'),\nrow(0, 'PICKLIST', 'aad6f035-05f9-42d3-b6ea-682371340875', 'SelectOne'),\nrow(5, 'MULTISELECT', '76c83029-8439-42ad-90e6-7f0ff54b732c', 'SelectMany'),\nrow(1, 'CHECKBOX', 'd8bd3d80-d25d-4056-8754-a740f2396792', 'TrueFalse'),\nrow(4, 'TEXTBOX', 'b9847d16-19b5-4ed4-a4e3-d7f07533ab5a', 'LongText'),\nrow(9, 'NUMERIC', '5f31785c-4d3c-4d68-a834-da37c2bc0a76', 'Numeric')) t (rp_type, rp_descr, preparis_type, preparis_descr)) a\nleft join migration_custom_fields_data_types_mapping b on b.rp_type = a.rp_type\nwhere b.rp_type is null;\n\n/*custom field type mapping*/\nCREATE TABLE IF NOT EXISTS migration_custom_fields_types_mapping\n(\n    rp_area_type INT,\n    rp_descr char(50),\n    preparis_type CHAR(38),\n    preparis_descr char(50)\n);\n\ninsert into migration_custom_fields_types_mapping\n(rp_area_type, rp_descr, preparis_type, preparis_descr)\nselect a.rp_area_type, a.rp_descr, a.preparis_type, a.preparis_descr\nfrom\n(select t.* from\n(values\nrow(5, 'user', '0741ab49-72f7-4555-b93c-b462cbd96007', 'user')) t (rp_area_type, rp_descr, preparis_type, preparis_descr)) a\nleft join migration_custom_fields_types_mapping b on b.rp_area_type = a.rp_area_type\nwhere b.rp_area_type is null;\n\n/* Process custom fields */\n\nCREATE TABLE IF NOT EXISTS migration_custom_fields\n(\n    row_num INT,\n    id INT,\n    areaType INT,\n    name char(255),\n    isRequired TINYINT(1),\n    customFieldDataTypeId CHAR(38),\n    customFieldTypeId CHAR(38),\n    displaySequence SMALLINT,\n    newCustomFieldId CHAR(38)\n);\n\ndelete from migration_custom_fields\nwhere areaType = @{pipeline().parameters.rpCustomFieldType};\n\ninsert into migration_custom_fields\n(row_num, id, areaType, name, isRequired, customFieldDataTypeId, customFieldTypeId, displaySequence, newCustomFieldId)\nselect\nROW_NUMBER() OVER (ORDER BY cf.id) row_num,\ncf.id,\ncf.areaType,\ncf.name,\ncf.required isRequired,\ncfdtm.preparis_type customFieldDataTypeId,\ncftm.preparis_type customFieldTypeId,\ncf.possition displaySequence,\nuuid()\nfrom t_custom_field cf\njoin migration_custom_fields_data_types_mapping cfdtm on cf.type = cfdtm.rp_type\njoin migration_custom_fields_types_mapping cftm on cf.areaType = cftm.rp_area_type\nwhere areaType = @{pipeline().parameters.rpCustomFieldType};\n\n/* process custom fields options */\n\nCREATE TABLE IF NOT EXISTS migration_custom_fields_options\n(\n    row_num INT,\n    id INT,\n    field_id INT,\n    areaType INT,\n    name char(255),\n    displaySequence SMALLINT,\n    isDefault TINYINT(1),\n    customFieldOptionStatusTypeId CHAR(38),\n    newCustomFieldId CHAR(38),\n    newCustomFieldOptionId CHAR(38)\n);\n\ndelete from migration_custom_fields_options\nwhere areaType = @{pipeline().parameters.rpCustomFieldType};\n\ninsert into migration_custom_fields_options\nselect\nROW_NUMBER() OVER (ORDER BY cfch.id) row_num,\ncfch.id,\ncfch.field_id,\nmcf.areaType,\ncfch.name optionName,\ncfch.possition displaySequence,\n0 isDefault,\n'b5da6970-6125-4904-b87f-c39187d4fd8a' customFieldOptionStatusTypeId /*Active*/,\nmcf.newCustomFieldId,\nuuid() newCustomFieldOptionId\n from migration_custom_fields mcf\njoin t_custom_field_choice cfch on mcf.id = cfch.field_id\nwhere mcf.areaType = @{pipeline().parameters.rpCustomFieldType};\n\n\nselect count(*) cfCount from migration_custom_fields;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Lookup Iteration Data CF",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build Migration Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_custom_fields"
							}
						}
					},
					{
						"name": "ForEach Custom Field in batch",
						"description": "For Each Recovery Planner User Custom Field Batch",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Iteration Data CF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Iteration Data CF').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Create Custom Fields",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Custom Fields",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"portalId": {
												"value": "@pipeline().parameters.currentPortalId",
												"type": "Expression"
											},
											"rpCustomFieldType": {
												"value": "@pipeline().parameters.rpCustomFieldType",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					},
					"rpCustomFieldType": {
						"type": "int"
					}
				},
				"variables": {
					"iteration_start": {
						"type": "Integer",
						"defaultValue": 0
					},
					"iteration_stop": {
						"type": "Integer",
						"defaultValue": 0
					},
					"insert_custom_fields_statements": {
						"type": "Array"
					},
					"rp_area_type": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields User Values Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LUP Iteration Data CFV",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LUP Migration Tables Custom Fields Values",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_custom_fields_values"
							}
						}
					},
					{
						"name": "FE Iteration in CFV",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LUP Iteration Data CFV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LUP Iteration Data CFV').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "EP Create Custom Fields User Values",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Custom Fields User Values",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"currentPortalId": {
												"value": "@pipeline().parameters.currentPortalId",
												"type": "Expression"
											},
											"rpCustomFieldType": {
												"value": "@variables('rpCustomFieldType')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "LUP Migration Tables Custom Fields Values",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "/*\nDROP TABLE IF EXISTS migration_custom_fields_values;\n*/\n\nCREATE TABLE IF NOT EXISTS migration_custom_fields_values\n(\n    row_num INT,\n    newCustomFieldValueId CHAR(38),\n    user_id INT,\n    field_Id INT,\n    areaType INT,\n    fieldValue text(4000),\n    newUserId CHAR(38),\n    newCustomFieldId CHAR(38)\n);\n\ndelete from migration_custom_fields_values\nwhere areaType = @{variables('rpCustomFieldType')};\n\ninsert into migration_custom_fields_values\n(row_num,\nnewCustomFieldValueId,\nuser_id,\nfield_Id,\nareaType,\nfieldValue,\nnewUserId,\nnewCustomFieldId)\nselect\n    ROW_NUMBER() OVER (ORDER BY cv.id) row_num,\n    uuid() newCustomFieldValueId,\n    cv.user_id,\n    cv.field_id,\n    mcf.areaType,\n    case when mcf.customFieldDataTypeId = '0f6f2372-1e4c-4d67-ad13-615a0540488c'/*ShortText*/ then CONVERT(cv.text, char(4000)) else\n    case when mcf.customFieldDataTypeId = 'd8bd3d80-d25d-4056-8754-a740f2396792'/*TrueFalse*/ then convert((cv.checked = 1), char(4000)) else\n        case when mcf.customFieldDataTypeId = 'b9847d16-19b5-4ed4-a4e3-d7f07533ab5a'/*LongText*/ then convert(cv.textArea, char(4000)) else\n            case when mcf.customFieldDataTypeId = '1eccbe40-1b3b-461b-95df-35f1fe6a8af2'/*DateTime*/ then convert(cv.date, char(4000)) \n                end end end end userValue,\n    ud.newUserId,\n    mcf.newCustomFieldId\n    from t_custom_value cv\n    join migration_all_user_data ud on ud.userId = cv.user_id\n    join migration_custom_fields mcf on mcf.id = cv.field_id\n    where mcf.areaType = @{variables('rpCustomFieldType')};\n\nselect 'DONE' as 'Lookup Activity Hack';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"rp_area_type": {
						"type": "Integer"
					},
					"rpCustomFieldType": {
						"type": "Integer",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Department Users Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_department_users",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach Department User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Department User",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Department Users",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:34:52Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Group Users Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_group_users",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach Group User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Group User",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Group Users",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T15:09:24Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Portal configuration post migration')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create SecurityEntityModules",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "INSERT INTO [dbo].[azstudioSecurityEntityModules]\n           ([moduleId]\n           ,[entityId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\n     VALUES\n        (\n            '@{variables('Agility Risk GUID')}'\n            , '@{pipeline().parameters.PortalEntityID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n        )\n    ,   (\n            '@{variables('Agility Exercise Manager GUID')}'\n            , '@{pipeline().parameters.PortalEntityID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n        )\n    ,   (\n            '@{variables('Agility Planner GUID')}'\n            , '@{pipeline().parameters.PortalEntityID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n        )\n    ,   (\n            '@{variables('Incident Manager GUID')}'\n            , '@{pipeline().parameters.PortalEntityID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n        )",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Create Portal Industry Entry",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "INSERT INTO [dbo].[bcPortalIndustry]\n           ([portalId]\n           ,[industryId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\n     VALUES\n        (\n            '@{pipeline().parameters.PortalEntityID}'\n            , '@{variables('bcIndustry Generic GUID')}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n        )",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Lookup Site Type",
						"description": "This is actually Locations types. ",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select * from migration_site_type",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.mysql_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.mysql_db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Site Type",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Site Type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Site Type').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Site Type",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioEntitySettings]\n           ([settingId]\n           ,[settingTypeId]\n           ,[entityId]\n           ,[userStringTypeId]\n           ,[settingValue]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\n     VALUES\n           ('@{item().newSettingId}'\n           ,'6dc816ea-8c2b-4438-b6a6-718cb6a4d824'\n           ,'@{item().newSiteId}'\n           ,'00000000-0000-0000-0000-000000000000'\n           ,'@{item().azstudioSettings_value}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n\t)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Create PortalFunctionalAreas And Processes",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create PortalFunctionalAreas And Processes",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"CompanyName": {
									"value": "@pipeline().parameters.CompanyName",
									"type": "Expression"
								},
								"PortalEntityID": {
									"value": "@pipeline().parameters.PortalEntityID",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"CompanyName": {
						"type": "string"
					},
					"mysql_db_name": {
						"type": "string"
					},
					"mysql_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"Agility Risk GUID": {
						"type": "String",
						"defaultValue": "33999ddb-70b9-47dd-9ba8-664144fd50cc"
					},
					"Agility Exercise Manager GUID": {
						"type": "String",
						"defaultValue": "aed76c86-8fa2-48e0-b6cd-abc8ffa1f50a"
					},
					"Agility Planner GUID": {
						"type": "String",
						"defaultValue": "5b4646af-d662-42af-9cde-e3f7e2c3ecb5"
					},
					"Incident Manager GUID": {
						"type": "String",
						"defaultValue": "6a55f235-61b7-40e5-bfe8-f6821309abab"
					},
					"bcIndustry Generic GUID": {
						"type": "String",
						"defaultValue": "56397415-6ac4-4c21-9101-e95158e9aac5"
					},
					"bcSite GUID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Portal"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T19:01:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Preparis Plan Document')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Get RP Plan Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP Plan Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"rpSessionToken": {
									"value": "@pipeline().parameters.rpSessionToken",
									"type": "Expression"
								},
								"rpClientId": {
									"value": "@pipeline().parameters.rpClientId",
									"type": "Expression"
								},
								"planId": {
									"value": "@pipeline().parameters.plan_id",
									"type": "Expression"
								},
								"rpBaseURL": {
									"value": "@pipeline().parameters.rpBaseURL",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_server_name",
									"type": "Expression"
								},
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable postBody",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get RP Plan Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "postBody",
							"value": {
								"value": "@activity('Execute Pipeline Get RP Plan Data').output.pipelineReturnValue.postBody",
								"type": "Expression"
							}
						}
					},
					{
						"name": "POST PlanPrint Tester",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Set variable postBody",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json",
								"Rpxsession-Id": {
									"value": "@pipeline().parameters.rpSessionToken",
									"type": "Expression"
								},
								"Rpxclient-Id": {
									"value": "@pipeline().parameters.rpClientId",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@{pipeline().parameters.rpBaseURL}plan-print/@{pipeline().parameters.plan_id}?print-preview=false&output-format=MSWORD2007&bundled=true&draft=false",
								"type": "Expression"
							},
							"body": {
								"value": "@json(variables('postBody'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy Plan from RP to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "POST",
									"additionalHeaders": {
										"value": "Rpxsession-Id: @{pipeline().parameters.rpSessionToken}  \nRpxclient-Id: @{pipeline().parameters.rpClientId}  \nContent-Type: application/json  ",
										"type": "Expression"
									},
									"requestBody": {
										"value": "@variables('postBody')",
										"type": "Expression"
									},
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Binary_RecoveryPlannerPlan",
								"type": "DatasetReference",
								"parameters": {
									"BaseURL": {
										"value": "@pipeline().parameters.rpBaseURL",
										"type": "Expression"
									},
									"PlanID": {
										"value": "@{pipeline().parameters.plan_id}",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Binary_PreparisDocument",
								"type": "DatasetReference",
								"parameters": {
									"documentIdGuid": {
										"value": "@variables('thisDocumentId')",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat(pipeline().parameters.plan_name,'.zip')",
										"type": "Expression"
									},
									"baseUrl": {
										"value": "@pipeline().globalParameters.PreparisStorageAccountBaseUrl",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Lookup existing document",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "POST PlanPrint Tester",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select documentId from ppdocsDocuments \nwhere documentName = '@{pipeline().parameters.plan_name}'\nand folderId = '@{pipeline().parameters.preparisFolderGuid}'\nand documentStateId = 'a615996c-640f-47d1-948a-4a3cb1bc7766'\nand owningAccountId = '@{pipeline().parameters.preparisUserId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup existing document",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup existing document').output.count,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set variable thisDocumentId",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "thisDocumentId",
										"value": {
											"value": "@{guid()}",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set variable thisDocumentId existing",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "thisDocumentId",
										"value": {
											"value": "@activity('Lookup existing document').output.value[0].documentId",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Script create ppdocsDocumentHistory",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy Plan from RP to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "INSERT INTO ppdocsDocumentHistory\n    (documentHistoryId,documentId,archivedDocumentId,documentHistoryEventTypeId,additionalDetails,dateTimeCreated,createdById)\nVALUES(\n    '@{guid()}'\n    ,'@{variables('thisDocumentId')}'\n    ,'@{guid()}'\n    ,'46004597-7A44-434C-9792-5B763FDA45BD'\n    ,'Migration from Recovery Planner'\n    ,GETDATE()\n    ,'@{pipeline().parameters.preparisUserId}'\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Script Merge into ppdocsDocuments",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Script create ppdocsDocumentHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "IF NOT EXISTS(SELECT 1 FROM ppdocsDocuments WHERE documentId = '@{variables('thisDocumentId')}') \nBEGIN\n  INSERT INTO ppdocsDocuments\n  (documentId,documentName,documentFileName,description,documentStateId,folderId,owningAccountId,sizeInBytes,versionInfo,tagsJson,metadataJson,dateTimeCreated,createdById)\n  VALUES\n  ('@{variables('thisDocumentId')}'\n  ,'@{pipeline().parameters.plan_name}'\n  ,'@{pipeline().parameters.plan_name}.zip'\n  ,NULL\n  ,'a615996c-640f-47d1-948a-4a3cb1bc7766'\n  ,'@{pipeline().parameters.preparisFolderGuid}'\n  ,'@{pipeline().parameters.preparisUserId}'\n  ,@{activity('Copy Plan from RP to Blob').output.dataWritten}\n  ,null\n  ,NULL\n  ,NULL\n  ,CURRENT_TIMESTAMP\n  ,'@{pipeline().parameters.preparisUserId}');\nEND\nELSE\nBEGIN\n  UPDATE ppdocsDocuments\n  SET documentName = '@{pipeline().parameters.plan_name}',\n        documentFileName = '@{pipeline().parameters.plan_name}.zip',\n        description = NULL,\n        documentStateId = 'a615996c-640f-47d1-948a-4a3cb1bc7766',\n        folderId = '@{pipeline().parameters.preparisFolderGuid}',\n        owningAccountId = '@{pipeline().parameters.preparisUserId}',\n        sizeInBytes = @{activity('Copy Plan from RP to Blob').output.dataWritten},\n        versionInfo = NULL,\n        tagsJson = NULL,\n        metadataJson = NULL,\n        lastModifiedById = '@{pipeline().parameters.preparisUserId}',\n        dateTimeLastModified = CURRENT_TIMESTAMP\n  WHERE documentId = '@{variables('thisDocumentId')}'\nEND",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rpSessionToken": {
						"type": "string"
					},
					"rpClientId": {
						"type": "string"
					},
					"plan_id": {
						"type": "string"
					},
					"rpBaseURL": {
						"type": "string"
					},
					"rp_server_name": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"preparisBaseURL": {
						"type": "string"
					},
					"preparisDeviceIdAsBase64": {
						"type": "string"
					},
					"preparisSessionToken": {
						"type": "string"
					},
					"preparisCurrentPortalId": {
						"type": "string"
					},
					"plan_name": {
						"type": "string"
					},
					"preparisUserId": {
						"type": "string"
					},
					"preparisFolderGuid": {
						"type": "string"
					}
				},
				"variables": {
					"thisDocumentId": {
						"type": "String"
					},
					"postBody": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Plans"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-19T20:21:51Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Addresses Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_userAddresses",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach User Address",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Preparis UserAddresses",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create User Addresses",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:09:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Emails Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_userEmails",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach User Address",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Preparis User Emails",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create User Emails",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:14:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Locations Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_department_users",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach User Location",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create User Locations",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create User Locations",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:55:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Phone Numbers Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create Phone Numbers migration tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_userPhones"
							}
						}
					},
					{
						"name": "ForEach User Phone",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Create Preparis User Phone Number",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create User Phone Numbers",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Create Phone Numbers migration tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "/*  USER PHONE NUMBERS  */\r\ndrop table if exists migration_all_userPhones;\r\n\r\ncreate table migration_all_userPhones as (\r\n    select \r\n        (select uuid()) as newPhoneId\r\n        , mud.newUserId\r\n        , mud.userId rpUserId\r\n        , ci.id as rpPhoneId\r\n        , ct.name  \r\n        , cast(AES_DECRYPT(ci.numberString, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) phoneNumber\r\n        , cast(AES_DECRYPT(ci.internationalCode, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) internationalCode\r\n        , cast(AES_DECRYPT(ci.extension, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) extension\r\n        , mcm.recoveryPlannerCountryName\r\n        , mcm.CountryTypeName\r\n        , case when mcm.CountryTypeId is NULL or mcm.CountryTypeId = '' then '2D76605B-86B5-40FF-9A71-C4893E5916FB' \r\n            else mcm.CountryTypeId\r\n            end as CountryTypeId \r\n        , case \r\n            when cic.code  != 'US' then  '8337fbb1-9a43-45eb-aafa-19c877e762fc' \r\n            else 'ffabdff8-4b2c-4655-9edc-8195c303419d' \r\n            end as 'phoneNumberSubTypeId'\r\n        /*\r\n        Follow the Preparis Mapping else follow the following logic. \r\n        Phone data, map lowest internal ID data per distribution type that has data.\r\n        rp.user.phone(Personal Distribution) = p.user.phone(Additional Personal Phone)\r\n        rp.user.phone(Business Distribution) = p.user.phone(Office Phone)\r\n\r\n\tdistributionType\r\n\t\t0 = business\r\n\t\t1 = personal\r\n\r\n    emergency - emergency contact flag. we do not need emergency contacts\r\n\r\nphoneNumberTypeId\t                    phoneNumberTypeName\r\n9da9c256-8283-4a0a-bd3d-10df73e1f43b\tSecurity\r\n391dca7b-aac3-4875-94e2-2ef680c7f35f\tAdditional Personal\r\n20509910-5326-4057-b21f-5c694b314692\tOffice\r\n5322a58a-8683-449b-a562-b0577de3fa74\tEmergency\r\n5eec12d5-595f-4123-a613-c63e701ae993\tPersonal\r\n33f27328-8fee-4835-b020-cd6d48bb39cd\tMobile\r\n \r\n        */\r\n        , case \r\n            when ct.mappedName = 'preparisOfficePhone' then '20509910-5326-4057-b21f-5c694b314692'\r\n            when ct.mappedName = 'preparisPersonalPhone' then '5eec12d5-595f-4123-a613-c63e701ae993'\r\n            when ct.mappedName = 'preparisMobilePhone' then '33f27328-8fee-4835-b020-cd6d48bb39cd'\r\n            when ct.mappedName = 'preparisAdditionalMobilePhone' then '391dca7b-aac3-4875-94e2-2ef680c7f35f'\r\n            when cm.name = 'Cell Phone' and ct.distributionType = 0 then '33f27328-8fee-4835-b020-cd6d48bb39cd'\r\n            when cm.name = 'Cell Phone' and ct.distributionType = 1 then '5eec12d5-595f-4123-a613-c63e701ae993'\r\n            when cm.name = 'PHONE' and ct.distributionType = 0 then '20509910-5326-4057-b21f-5c694b314692'\r\n            when cm.name = 'PHONE' and ct.distributionType = 1 then '391dca7b-aac3-4875-94e2-2ef680c7f35f'\r\n            end as 'phoneNumberTypeId'\r\n        , ct.mappedName\r\n        , ct.distributionType\r\n    from migration_user_data mud\r\n    LEFT JOIN T_CONTACT_INFO ci ON mud.userId = ci.owner_id\r\n    JOIN T_CONTACT_TYPE ct ON ci.contact_type_id = ct.id\r\n    JOIN T_CONTACT_METHOD cm on ct.contact_method_id = cm.id\r\n    LEFT JOIN T_COUNTRY cic on ci.country_id = cic.id\r\n    LEFT JOIN migration_country_mapping mcm on mcm.recoveryPlannerCountryName = cic.name\r\n    where cm.name in ('PHONE', 'Cell Phone') \r\n    and ci.emergency = 0\r\n);\r\n\r\ndrop table if exists migration_configuredUserPhones;\r\n\r\ncreate table migration_configuredUserPhones AS\r\n(select * from\r\n(select\r\n    ROW_NUMBER() OVER (PARTITION BY newUserId, phoneNumberTypeId order by rpPhoneId) row_num_internal\r\n    , rpPhoneId\r\n    , newPhoneId\r\n    , newUserId\r\n    , rpUserId\r\n    , name\r\n    , REPLACE(REPLACE(REPLACE(REPLACE(phoneNumber, ' ', ''), '(', ''), ')', ''), '-', '') phoneNumber\r\n    , internationalCode\r\n    , extension\r\n    , recoveryPlannerCountryName\r\n    , CountryTypeName\r\n    , CountryTypeId\r\n    , phoneNumberSubTypeId\r\n    , phoneNumberTypeId\r\nfrom migration_all_userPhones) t\r\nwhere row_num_internal = 1);\r\n\t\r\n\r\n/* 2/20/24...  When you do phone numbers for a user, create four types, regardless as to whether they have numbers for them (Mobile, Personal, Additional Personal, and Office). If there is not a number for that type, set the phonenumber to ''.*/\r\ndrop table if exists migration_UserPhones;\r\n\r\ncreate table migration_UserPhones as (\r\n        \r\n    with userConfiguredPhoneNumbers as (\r\n        select newUserId\r\n        , rpUserId\r\n        , phoneNumberTypeId\r\n        , case\r\n            when phoneNumberTypeId = '20509910-5326-4057-b21f-5c694b314692' then 'preparisOfficePhone'\r\n            when phoneNumberTypeId = '5eec12d5-595f-4123-a613-c63e701ae993' then 'preparisPersonalPhone' \r\n            when phoneNumberTypeId = '33f27328-8fee-4835-b020-cd6d48bb39cd' then 'preparisMobilePhone'\r\n            when phoneNumberTypeId = '391dca7b-aac3-4875-94e2-2ef680c7f35f' then 'preparisAdditionalMobilePhone'\r\n            END as phonenumberTypeName\r\n        , phoneNumber\r\n        , phoneNumberSubTypeId\r\n        , extension\r\n        from migration_configuredUserPhones\r\n    )\r\n    , userOfficePhoneNumbers as (\r\n        select * from userConfiguredPhoneNumbers where phonenumberTypeName = 'preparisOfficePhone'\r\n    )\r\n    , newUserOfficePhoneNumbers as (\r\n        select mud.newUserId\r\n        , mud.userId rpUserId\r\n        , '20509910-5326-4057-b21f-5c694b314692' phoneNumberTypeId\r\n        , 'preparisOfficePhone' phonenumberTypeName\r\n        , '' phoneNumber\r\n        , '8337fbb1-9a43-45eb-aafa-19c877e762fc' phoneNumberSubTypeId\r\n        , '' extension\r\n        from migration_user_data mud\r\n        left join userOfficePhoneNumbers upn on mud.newUserId = upn.newUserId\r\n        where upn.newuserid is NULL\r\n    )\r\n    , userPersonalPhoneNumbers as (\r\n        select * from userConfiguredPhoneNumbers where phonenumberTypeName = 'preparisPersonalPhone'\r\n    )\r\n    , newUserPersonalPhoneNumbers as (\r\n        select mud.newUserId\r\n        , mud.userId rpUserId\r\n        , '5eec12d5-595f-4123-a613-c63e701ae993' phoneNumberTypeId\r\n        , 'preparisPersonalPhone' phonenumberTypeName\r\n        , '' phoneNumber\r\n        , '8337fbb1-9a43-45eb-aafa-19c877e762fc' phoneNumberSubTypeId\r\n        , '' extension\r\n        from migration_user_data mud\r\n        left join userPersonalPhoneNumbers upn on mud.newUserId = upn.newUserId\r\n        where upn.newuserid is NULL\r\n    )\r\n    , userMobilePhoneNumbers as (\r\n        select * from userConfiguredPhoneNumbers where phonenumberTypeName = 'preparisMobilePhone'\r\n    )\r\n    , newUserMobilePhoneNumbers as (\r\n        select mud.newUserId\r\n        , mud.userId rpUserId\r\n        , '33f27328-8fee-4835-b020-cd6d48bb39cd' phoneNumberTypeId\r\n        , 'preparisMobilePhone' phonenumberTypeName\r\n        , '' phoneNumber\r\n        , '8337fbb1-9a43-45eb-aafa-19c877e762fc' phoneNumberSubTypeId\r\n        , '' extension\r\n        from migration_user_data mud\r\n        left join userMobilePhoneNumbers upn on mud.newUserId = upn.newUserId\r\n        where upn.newuserid is NULL\r\n    )\r\n    , userAdditionalMobilePhoneNumbers as (\r\n        select * from userConfiguredPhoneNumbers where phonenumberTypeName = 'preparisAdditionalMobilePhone'\r\n    )\r\n    , newUserAdditionalMobilePhoneNumbers as (\r\n        select mud.newUserId\r\n        , mud.userId rpUserId\r\n        , '391dca7b-aac3-4875-94e2-2ef680c7f35f' phoneNumberTypeId\r\n        , 'preparisAdditionalMobilePhone' phonenumberTypeName\r\n        , '' phoneNumber\r\n        , '8337fbb1-9a43-45eb-aafa-19c877e762fc' phoneNumberSubTypeId\r\n        , '' extension\r\n        from migration_user_data mud\r\n        left join userAdditionalMobilePhoneNumbers upn on mud.newUserId = upn.newUserId\r\n        where upn.newuserid is NULL\r\n    )\r\n    , combined_phone_data as (\r\n        select *,  (SELECT uuid()) as newPhoneId from userOfficePhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from newUserOfficePhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from userPersonalPhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from newUserPersonalPhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from userMobilePhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from newUserMobilePhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from userAdditionalMobilePhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from newUserAdditionalMobilePhoneNumbers\r\n    )\r\n    select \r\n    ROW_NUMBER() OVER (ORDER BY newPhoneId) row_num\r\n    , cpd.*\r\n    from combined_phone_data cpd\r\n);\r\n\r\nselect count(*) from migration_UserPhones;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:09:23Z"
			},
			"dependsOn": []
		}
	]
}