{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "recovery-planner-adf"
		},
		"StorageAccount_Preparis_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "@{linkedService().BaseUrl}"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/StorageAccount_Preparis')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"BaseUrl": {
						"type": "string",
						"defaultValue": "''"
					}
				},
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('StorageAccount_Preparis_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "Storage"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Portal Plan Foder-not used')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get or Create Preparis Folder",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get or Create Preparis Folder",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisBaseURL": {
									"value": "@pipeline().globalParameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().globalParameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								},
								"preparisSessionToken": {
									"value": "@pipeline().parameters.preparisTokenId",
									"type": "Expression"
								},
								"entityId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"rootEntityId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"folderId": {
									"value": "@pipeline().parameters.parentFolderId",
									"type": "Expression"
								},
								"portalId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"folderName": {
									"value": "@pipeline().parameters.folderName",
									"type": "Expression"
								},
								"parentFolderId": {
									"value": "@pipeline().parameters.parentFolderId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Update Portal Plan Doc Folder Id",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Get or Create Preparis Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update \nbcPortalPlanTypes\nset documentFolderId = '@{activity('Get or Create Preparis Folder').output.pipelineReturnValue.preparisFolderGuid}'\nwhere portalId = '@{pipeline().parameters.currentPortalId}'\nand planTypeId = '@{pipeline().parameters.planTypeId}'\nand documentFolderId is null",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "pipeline output folder id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Update Portal Plan Doc Folder Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "folderId",
									"value": {
										"type": "Expression",
										"content": "@activity('Get or Create Preparis Folder').output.pipelineReturnValue.preparisFolderGuid"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					},
					"planTypeId": {
						"type": "string"
					},
					"parentFolderId": {
						"type": "string"
					},
					"folderName": {
						"type": "string"
					},
					"preparisTokenId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ITDR/Portal Plan Technology Attachments"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Portal Plan Technology Folder - not used')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get or Create Preparis Folder",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get or Create Preparis Folder",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisBaseURL": {
									"value": "@pipeline().globalParameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().globalParameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								},
								"preparisSessionToken": {
									"value": "@pipeline().parameters.preparisSessionToken",
									"type": "Expression"
								},
								"entityId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"rootEntityId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"folderId": {
									"value": "@pipeline().parameters.parentFolderId",
									"type": "Expression"
								},
								"portalId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"folderName": {
									"value": "@pipeline().parameters.folderName",
									"type": "Expression"
								},
								"parentFolderId": {
									"value": "@pipeline().parameters.parentFolderId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Update Portal Plan Tech Doc Folder Id",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Get or Create Preparis Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update \nbcPortalPlanRechnology\nset documentFolderId = '@{activity('Get or Create Preparis Folder').output.pipelineReturnValue.preparisFolderGuid}'\nwhere portalPlanTechnologyId = '@{pipeline().parameters.portalPlanTechnologyId}'\nand documentFolderId is null",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "pipeline output folder id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Update Portal Plan Tech Doc Folder Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "folderId",
									"value": {
										"type": "Expression",
										"content": "@activity('Get or Create Preparis Folder').output.pipelineReturnValue.preparisFolderGuid"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"preparisSessionToken": {
						"type": "string"
					},
					"currentPortalId": {
						"type": "string"
					},
					"parentFolderId": {
						"type": "string"
					},
					"folderName": {
						"type": "string"
					},
					"portalPlanTechnologyId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ITDR/Portal Plan Technology Attachments"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Preparis Portal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreateNewPortal",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Script Update Portal to deleted if it already exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[az_ppentityCustom_CreateNewPortal]",
							"storedProcedureParameters": {
								"ParentEntityId": {
									"value": "b9a3eed5-80b2-4c11-b317-1b2ab2c006aa",
									"type": "Guid"
								},
								"CompanyName": {
									"value": {
										"value": "@pipeline().parameters.CompanyName",
										"type": "Expression"
									},
									"type": "String"
								},
								"VerticalID": {
									"value": "3089683e-a1c9-4c91-9b87-1e3888a9cfcf",
									"type": "Guid"
								},
								"PortalID": {
									"value": {
										"value": "@pipeline().parameters.PortalEntityID",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Script Update Portal to deleted if it already exists",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "with portal_exists as (\n\tSELECT e.entityId, e.entityName, e.entityTypeId, et.entityTypeName, e.entityStatusTypeId, st.entityStatusTypeName \n\tfrom  azstudioEntityEntities e\n\tJOIN azstudioEntityEntityTypes et on e.entityTypeId = et.entityTypeId\n\tJOIN azstudioEntityStatusTypes st on e.entityStatusTypeId = st.entityStatusTypeId\n\twhere e.entityName = '@{pipeline().parameters.CompanyName}'\n\tand et.entityTypeName = 'Portal'\n\tand e.entityStatusTypeId != '847EBBEF-B0C9-48A3-9891-212833DDFAC6'\n)\n\nupdate azstudioEntityEntities \nset entityStatusTypeId = '847EBBEF-B0C9-48A3-9891-212833DDFAC6'\nwhere entityId in (select entityId from portal_exists)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CompanyName": {
						"type": "string"
					},
					"PortalEntityID": {
						"type": "string"
					}
				},
				"variables": {
					"PortalEntityID": {
						"type": "String"
					},
					"CreatedByGUID": {
						"type": "String",
						"defaultValue": "7b5ea827-bcd7-4a8a-8807-fc7e94a93455"
					},
					"DefaultLocationId": {
						"type": "String",
						"defaultValue": "0b92f0ba-1a21-43cb-995e-e2843f53a557"
					}
				},
				"folder": {
					"name": "Portal"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T19:01:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Process Impact Categories-Timespans-Severity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Insert Data",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "portalId",
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.currentPortalId",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "Query",
									"text": {
										"value": "insert into bcProcessImpact\n(\n    processImpactId,\n    portalProcessId,\n    impactCategoryId,\n    impactSeverityId,\n    impactTimespanId,\n    dateTimeCreated,\n    createdById\n)\nselect\nNEWID() processImpactId,\nportalProcessId,\nimpactCategoryId,\nist.impactSeverityId,\nits.impactTimespanId,\nCURRENT_TIMESTAMP,\n'@{pipeline().globalParameters.preparisCreatedById}'\nfrom bcPortalProcess pp\njoin bcPortalFunctionalArea pfa on pp.portalFunctionalAreaId = pfa.portalFunctionalAreaId\njoin (select impactCategoryId from bcOverrideSystemImpactCategories where portalId = '@{pipeline().parameters.currentPortalId}') ic on 1=1\njoin (select impactTimespanId from bcImpactTimespan where portalId = '@{pipeline().parameters.currentPortalId}') its on 1 = 1\njoin (select impactSeverityId from bcImpactSeverity where sequenceNbr = 1) ist on 1=1\nwhere pfa.portalId = '@{pipeline().parameters.currentPortalId}'",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BC/RTO MTD"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RP Session Token Tester')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Get RP Session Token",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP Session Token",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Set variable rpSessionToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get RP Session Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "rpSessionToken",
							"value": {
								"value": "@activity('Execute Pipeline Get RP Session Token').output.pipelineReturnValue.rpSessionToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Old API RP Session Token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": {
								"value": "@{pipeline().globalParameters.rpOldAPIBaseUrl}token",
								"type": "Expression"
							},
							"body": {
								"value": "{\n    \"rpClientId\": \"@{pipeline().globalParameters.rpClientId}\",\n    \"clientId\": \"@{pipeline().globalParameters.rpOldAPIClientId}\",\n    \"clientSecret\": \"@{pipeline().globalParameters.rpOldAPIClientSecret}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable rpJWT",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Old API RP Session Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "rpJWT",
							"value": {
								"value": "@activity('Get Old API RP Session Token').output.accessToken",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rpClientId": {
						"type": "string",
						"defaultValue": "afsvision_preparis"
					}
				},
				"variables": {
					"rpSessionToken": {
						"type": "String"
					},
					"rpJWT": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Testers and Misc"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-14T10:53:56Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "test2.pdf",
						"folderPath": "pdf",
						"container": "test"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryPreparis')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServerPreparis",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_PreparisDocument')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "StorageAccount_Preparis",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseUrl": {
							"value": "@dataset().baseUrl",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"documentIdGuid": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"baseUrl": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().documentIdGuid",
							"type": "Expression"
						},
						"container": "documents"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/StorageAccount_Preparis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_RP_Incident')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer_RecoveryPlanner_Incidents",
					"type": "LinkedServiceReference",
					"parameters": {
						"rpBaseUrl": {
							"value": "@dataset().rpBaseUrl",
							"type": "Expression"
						},
						"rpEventId": {
							"value": "@dataset().eventId",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"eventId": {
						"type": "string"
					},
					"rpBaseUrl": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_RecoveryPlannerFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer_RecoveryPlanner_Files",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseURL": {
							"value": "@dataset().BaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"BaseURL": {
						"type": "string"
					},
					"RelativeUrl": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().RelativeUrl",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_RecoveryPlannerPlan')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer_RecoveryPlannerPlans",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseURL": {
							"value": "@dataset().BaseURL",
							"type": "Expression"
						},
						"PlanID": {
							"value": "@dataset().PlanID",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"BaseURL": {
						"type": "string"
					},
					"PlanID": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextPreparis')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "StorageAccount_Preparis",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseUrl": {
							"value": "@dataset().baseUrl",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"baseUrl": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"documentIdGuid": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().documentIdGuid",
							"type": "Expression"
						},
						"container": "documents"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/StorageAccount_Preparis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Preparis')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Preparis_dev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RecoveryPlanner')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureMySql_dynamic",
					"type": "LinkedServiceReference",
					"parameters": {
						"db_name": {
							"value": "@dataset().db_name",
							"type": "Expression"
						},
						"server_name": {
							"value": "@dataset().server_name",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"db_name": {
						"type": "string",
						"defaultValue": "marshall"
					},
					"server_name": {
						"type": "string",
						"defaultValue": "recovery-planner-mysql-server.mysql.database.azure.com"
					}
				},
				"annotations": [],
				"type": "AzureMySqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource_RP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService_RP",
					"type": "LinkedServiceReference",
					"parameters": {
						"incidentId": {
							"value": "@dataset().incidentId",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"rpSessionToken": {
						"type": "string"
					},
					"rpClentId": {
						"type": "string"
					},
					"incidentId": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields Options')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get CF Options for Iteration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select row_num\n, replace(optionName, '''','''''') optionName\n, displaySequence\n, newCustomFieldId customFieldId\n, newCustomFieldOptionId customFieldOptionId\n from migration_custom_fields_options\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Custom Field Option",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get CF Options for Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get CF Options for Iteration').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable custom fields",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_custom_field_option_statements",
										"value": {
											"value": "insert into ppPortalCustomFieldOption\n(customFieldOptionId\n, customFieldId\n, optionName\n, isDefault\n, displaySequence\n, customFieldOptionStatusTypeId\n, dateTimeCreated\n, createdById)\nVALUES\n(\n'@{item().customFieldOptionId}'\n, '@{item().customFieldId}'\n, '@{item().optionName}'\n, case when @{item().displaySequence} = 0 then 1 else 0 end\n, @{item().displaySequence}\n, 'b5da6970-6125-4904-b87f-c39187d4fd8a'\n, CURRENT_TIMESTAMP\n, '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach Custom Field Option",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insert_custom_field_option_statements')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Insert Custom Field Options Batch",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_custom_field_option_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"rp_area_type": {
						"type": "Integer"
					},
					"insert_custom_field_option_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields Strategy Values')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get CF Values for Iteration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select row_num\n, newCustomFieldValueId\n, fieldValue\n, newUserId\n, newCustomFieldId\n, userCustomFieldStatusTypeId\nfrom migration_strategy_custom_fields_values\nwhere row_num between @{pipeline().parameters.iteration_start} and\n@{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FE Custom Field Value",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get CF Values for Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get CF Values for Iteration').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable custom fields",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_custom_field_values_statements",
										"value": {
											"value": "INSERT INTO\nbcPortalProcessStrategyCustomFieldValue\n(portalProcessStrategyCustomFieldValueId\n, portalProcessStrategyId\n, customFieldId\n, fieldValue\n, dateTimeCreated\n, createdById)\nVALUES\n(\n'@{item().newPortalProcessStrategyCustomFieldValueId}'\n, '@{item().portalProcessStrategyId}'\n, '@{item().newCustomFieldId}'\n, '@{item().fieldValue}'\n, CURRENT_TIMESTAMP\n, '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Insert Custom Field Values Batch",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "FE Custom Field Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@join(variables('insert_custom_field_values_statements'),';')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					},
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"insert_custom_field_values_statements": {
						"type": "Array"
					},
					"rpCustomFieldType": {
						"type": "Integer",
						"defaultValue": 19
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields User Values')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get CF Values for Iteration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select row_num\n, newCustomFieldValueId\n, replace(fieldValue, '''','''''') fieldValue\n, newUserId\n, newCustomFieldId\nfrom migration_user_custom_fields_values\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FE Custom Field Value",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get CF Values for Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get CF Values for Iteration').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Append variable custom fields",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_custom_field_values_statements",
										"value": {
											"value": "INSERT INTO\nppUserCustomFieldValue\n(userCustomFieldValueId\n, userId\n, customFieldId\n, portalId\n, fieldValue\n, userCustomFieldStatusTypeId\n, dateTimeCreated\n, createdById)\nVALUES\n(\n'@{item().newCustomFieldValueId}'\n, '@{item().newUserId}'\n, '@{item().newCustomFieldId}'\n, '@{pipeline().parameters.currentPortalId}'\n, '@{item().fieldValue}'\n, '0dd44108-690c-45ee-ad20-d15a322334cf' /*Active*/\n, CURRENT_TIMESTAMP\n, '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FE Custom Field Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insert_custom_field_values_statements')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Insert Custom Field Values Batch",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_custom_field_values_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					},
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"insert_custom_field_values_statements": {
						"type": "Array"
					},
					"userLocationsStatements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Custom Fields",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select\nrow_num\n, newCustomFieldId customFieldId\n, replace(name , '''', '''''') fieldName\n, customFieldDataTypeId\n, customFieldTypeId\n, isRequired\n, displaySequence\n from migration_custom_fields\nwhere row_num between @{pipeline().parameters.iteration_start}\n and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Custom Field",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Custom Fields",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Custom Fields').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable custom fields",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_custom_fields_statements",
										"value": {
											"value": "INSERT INTO ppPortalCustomField\n(customFieldId\n, portalId\n, customFieldTypeId\n, fieldName\n, customFieldDataTypeId\n, isRequired\n, displaySequence\n, customFieldStatusTypeId\n, dateTimeCreated\n, createdById)\nVALUES\n(\n    '@{item().customFieldId}'\n    , '@{pipeline().parameters.portalId}'\n    , '@{item().customFieldTypeId}'\n    , '@{item().fieldName}'\n    , '@{item().customFieldDataTypeId}'\n    , '@{item().isRequired}'\n    , '@{item().displaySequence}'\n    , '@{variables('customFieldStatusTypeId')}'\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach Custom Field",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testInsertScript",
							"value": {
								"value": "@join(variables('insert_custom_fields_statements'),';')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "insert array is not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach Custom Field",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insert_custom_fields_statements')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Insert Custom Fields Batch",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_custom_fields_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					},
					"portalId": {
						"type": "string"
					}
				},
				"variables": {
					"insert_custom_fields_statements": {
						"type": "Array"
					},
					"TestOutputArray": {
						"type": "String"
					},
					"rp_area_type": {
						"type": "Integer"
					},
					"iteration_stop": {
						"type": "Integer"
					},
					"testInsertScript": {
						"type": "String"
					},
					"customFieldStatusTypeId": {
						"type": "String",
						"defaultValue": "f1d4f59a-64d9-43be-bebf-958ef924f2b0"
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]"
			]
		}
	]
}