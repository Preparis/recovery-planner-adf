{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "recovery-planner-adf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Create User Emails Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_userEmails",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach User Address",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Preparis User Emails",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create User Emails",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:14:49Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Locations Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_user_site_data"
							}
						}
					},
					{
						"name": "ForEach User Location",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Create User Locations",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create User Locations",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					},
					"userLocationsStatements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:55:03Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Phone Numbers Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create Phone Numbers migration tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_userPhones"
							}
						}
					},
					{
						"name": "ForEach User Phone",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Create Preparis User Phone Number",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create User Phone Numbers",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Create Phone Numbers migration tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "/*  USER PHONE NUMBERS  */\r\ndrop table if exists migration_all_userPhones;\r\n\r\ncreate table migration_all_userPhones as (\r\n    select \r\n        (select uuid()) as newPhoneId\r\n        , mud.newUserId\r\n        , mud.userId rpUserId\r\n        , ci.id as rpPhoneId\r\n        , ct.name  \r\n        , cast(AES_DECRYPT(ci.numberString, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) phoneNumber\r\n        , cast(AES_DECRYPT(ci.internationalCode, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) internationalCode\r\n        , cast(AES_DECRYPT(ci.extension, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) extension\r\n        , mcm.recoveryPlannerCountryName\r\n        , mcm.CountryTypeName\r\n        , case when mcm.CountryTypeId is NULL or mcm.CountryTypeId = '' then '2D76605B-86B5-40FF-9A71-C4893E5916FB' \r\n            else mcm.CountryTypeId\r\n            end as CountryTypeId \r\n        , case \r\n            when cic.code  != 'US' then  '8337fbb1-9a43-45eb-aafa-19c877e762fc' \r\n            else 'ffabdff8-4b2c-4655-9edc-8195c303419d' \r\n            end as 'phoneNumberSubTypeId'\r\n        /*\r\n        Follow the Preparis Mapping else follow the following logic. \r\n        Phone data, map lowest internal ID data per distribution type that has data.\r\n        rp.user.phone(Personal Distribution) = p.user.phone(Additional Personal Phone)\r\n        rp.user.phone(Business Distribution) = p.user.phone(Office Phone)\r\n\r\n\tdistributionType\r\n\t\t0 = business\r\n\t\t1 = personal\r\n\r\n    emergency - emergency contact flag. we do not need emergency contacts\r\n\r\nphoneNumberTypeId\t                    phoneNumberTypeName\r\n9da9c256-8283-4a0a-bd3d-10df73e1f43b\tSecurity\r\n391dca7b-aac3-4875-94e2-2ef680c7f35f\tAdditional Personal\r\n20509910-5326-4057-b21f-5c694b314692\tOffice\r\n5322a58a-8683-449b-a562-b0577de3fa74\tEmergency\r\n5eec12d5-595f-4123-a613-c63e701ae993\tPersonal\r\n33f27328-8fee-4835-b020-cd6d48bb39cd\tMobile\r\n \r\n        */\r\n        , case \r\n            when ct.mappedName = 'preparisOfficePhone' then '20509910-5326-4057-b21f-5c694b314692'\r\n            when ct.mappedName = 'preparisPersonalPhone' then '5eec12d5-595f-4123-a613-c63e701ae993'\r\n            when ct.mappedName = 'preparisMobilePhone' then '33f27328-8fee-4835-b020-cd6d48bb39cd'\r\n            when ct.mappedName = 'preparisAdditionalMobilePhone' then '391dca7b-aac3-4875-94e2-2ef680c7f35f'\r\n            when cm.name = 'Cell Phone' and ct.distributionType = 0 then '33f27328-8fee-4835-b020-cd6d48bb39cd'\r\n            when cm.name = 'Cell Phone' and ct.distributionType = 1 then '5eec12d5-595f-4123-a613-c63e701ae993'\r\n            when cm.name = 'PHONE' and ct.distributionType = 0 then '20509910-5326-4057-b21f-5c694b314692'\r\n            when cm.name = 'PHONE' and ct.distributionType = 1 then '391dca7b-aac3-4875-94e2-2ef680c7f35f'\r\n            end as 'phoneNumberTypeId'\r\n        , ct.mappedName\r\n        , ct.distributionType\r\n    from migration_user_data mud\r\n    LEFT JOIN T_CONTACT_INFO ci ON mud.userId = ci.owner_id\r\n    JOIN T_CONTACT_TYPE ct ON ci.contact_type_id = ct.id\r\n    JOIN T_CONTACT_METHOD cm on ct.contact_method_id = cm.id\r\n    LEFT JOIN T_COUNTRY cic on ci.country_id = cic.id\r\n    LEFT JOIN migration_country_mapping mcm on mcm.recoveryPlannerCountryName = cic.name\r\n    where cm.name in ('PHONE', 'Cell Phone') \r\n    and ci.emergency = 0\r\n);\r\n\r\ndrop table if exists migration_configuredUserPhones;\r\n\r\ncreate table migration_configuredUserPhones AS\r\n(select * from\r\n(select\r\n    ROW_NUMBER() OVER (PARTITION BY newUserId, phoneNumberTypeId order by rpPhoneId) row_num_internal\r\n    , rpPhoneId\r\n    , newPhoneId\r\n    , newUserId\r\n    , rpUserId\r\n    , name\r\n    , REPLACE(REPLACE(REPLACE(REPLACE(phoneNumber, ' ', ''), '(', ''), ')', ''), '-', '') phoneNumber\r\n    , internationalCode\r\n    , extension\r\n    , recoveryPlannerCountryName\r\n    , CountryTypeName\r\n    , CountryTypeId\r\n    , phoneNumberSubTypeId\r\n    , phoneNumberTypeId\r\nfrom migration_all_userPhones) t\r\nwhere row_num_internal = 1);\r\n\t\r\n\r\n/* 2/20/24...  When you do phone numbers for a user, create four types, regardless as to whether they have numbers for them (Mobile, Personal, Additional Personal, and Office). If there is not a number for that type, set the phonenumber to ''.*/\r\ndrop table if exists migration_UserPhones;\r\n\r\ncreate table migration_UserPhones as (\r\n        \r\n    with userConfiguredPhoneNumbers as (\r\n        select newUserId\r\n        , rpUserId\r\n        , phoneNumberTypeId\r\n        , case\r\n            when phoneNumberTypeId = '20509910-5326-4057-b21f-5c694b314692' then 'preparisOfficePhone'\r\n            when phoneNumberTypeId = '5eec12d5-595f-4123-a613-c63e701ae993' then 'preparisPersonalPhone' \r\n            when phoneNumberTypeId = '33f27328-8fee-4835-b020-cd6d48bb39cd' then 'preparisMobilePhone'\r\n            when phoneNumberTypeId = '391dca7b-aac3-4875-94e2-2ef680c7f35f' then 'preparisAdditionalMobilePhone'\r\n            END as phonenumberTypeName\r\n        , phoneNumber\r\n        , phoneNumberSubTypeId\r\n        , extension\r\n        from migration_configuredUserPhones\r\n    )\r\n    , userOfficePhoneNumbers as (\r\n        select * from userConfiguredPhoneNumbers where phonenumberTypeName = 'preparisOfficePhone'\r\n    )\r\n    , newUserOfficePhoneNumbers as (\r\n        select mud.newUserId\r\n        , mud.userId rpUserId\r\n        , '20509910-5326-4057-b21f-5c694b314692' phoneNumberTypeId\r\n        , 'preparisOfficePhone' phonenumberTypeName\r\n        , '' phoneNumber\r\n        , '8337fbb1-9a43-45eb-aafa-19c877e762fc' phoneNumberSubTypeId\r\n        , '' extension\r\n        from migration_user_data mud\r\n        left join userOfficePhoneNumbers upn on mud.newUserId = upn.newUserId\r\n        where upn.newuserid is NULL\r\n    )\r\n    , userPersonalPhoneNumbers as (\r\n        select * from userConfiguredPhoneNumbers where phonenumberTypeName = 'preparisPersonalPhone'\r\n    )\r\n    , newUserPersonalPhoneNumbers as (\r\n        select mud.newUserId\r\n        , mud.userId rpUserId\r\n        , '5eec12d5-595f-4123-a613-c63e701ae993' phoneNumberTypeId\r\n        , 'preparisPersonalPhone' phonenumberTypeName\r\n        , '' phoneNumber\r\n        , '8337fbb1-9a43-45eb-aafa-19c877e762fc' phoneNumberSubTypeId\r\n        , '' extension\r\n        from migration_user_data mud\r\n        left join userPersonalPhoneNumbers upn on mud.newUserId = upn.newUserId\r\n        where upn.newuserid is NULL\r\n    )\r\n    , userMobilePhoneNumbers as (\r\n        select * from userConfiguredPhoneNumbers where phonenumberTypeName = 'preparisMobilePhone'\r\n    )\r\n    , newUserMobilePhoneNumbers as (\r\n        select mud.newUserId\r\n        , mud.userId rpUserId\r\n        , '33f27328-8fee-4835-b020-cd6d48bb39cd' phoneNumberTypeId\r\n        , 'preparisMobilePhone' phonenumberTypeName\r\n        , '' phoneNumber\r\n        , '8337fbb1-9a43-45eb-aafa-19c877e762fc' phoneNumberSubTypeId\r\n        , '' extension\r\n        from migration_user_data mud\r\n        left join userMobilePhoneNumbers upn on mud.newUserId = upn.newUserId\r\n        where upn.newuserid is NULL\r\n    )\r\n    , userAdditionalMobilePhoneNumbers as (\r\n        select * from userConfiguredPhoneNumbers where phonenumberTypeName = 'preparisAdditionalMobilePhone'\r\n    )\r\n    , newUserAdditionalMobilePhoneNumbers as (\r\n        select mud.newUserId\r\n        , mud.userId rpUserId\r\n        , '391dca7b-aac3-4875-94e2-2ef680c7f35f' phoneNumberTypeId\r\n        , 'preparisAdditionalMobilePhone' phonenumberTypeName\r\n        , '' phoneNumber\r\n        , '8337fbb1-9a43-45eb-aafa-19c877e762fc' phoneNumberSubTypeId\r\n        , '' extension\r\n        from migration_user_data mud\r\n        left join userAdditionalMobilePhoneNumbers upn on mud.newUserId = upn.newUserId\r\n        where upn.newuserid is NULL\r\n    )\r\n    , combined_phone_data as (\r\n        select *,  (SELECT uuid()) as newPhoneId from userOfficePhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from newUserOfficePhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from userPersonalPhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from newUserPersonalPhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from userMobilePhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from newUserMobilePhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from userAdditionalMobilePhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from newUserAdditionalMobilePhoneNumbers\r\n    )\r\n    select \r\n    ROW_NUMBER() OVER (ORDER BY newPhoneId) row_num\r\n    , cpd.*\r\n    from combined_phone_data cpd\r\n);\r\n\r\nselect count(*) from migration_UserPhones;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:09:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Profiles Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_user_profile",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach User Address",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create User Profiles",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create User Profiles",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:23:05Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Role Bundle Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEach Entity RoleBundle",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_user_roleBundle",
								"rp_db_name": {
									"value": "@pipeline().parameters.db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Preparis Users",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create User Role Bundle",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"roleBundleId_MessageOnly": {
												"value": "@variables('roleBundleId_MessageOnly')",
												"type": "Expression"
											},
											"roleBundleId_Employee": {
												"value": "@variables('roleBundleId_Employee')",
												"type": "Expression"
											},
											"roleBundleId_ProgramManager": {
												"value": "@variables('roleBundleId_ProgramManager')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Create azstudioSecurityRoleBundleRoles entry",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach User",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "INSERT INTO [dbo].[azstudioSecurityRoleBundleRoles]\n           ([roleBundleId]\n           ,[roleId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\n     VALUES\n           ('@{variables('roleBundleId_ProgramManager')}'\n           ,'@{variables('BusinessContinuityManagerRoleId')}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           )",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Lookup RoleBundleIds",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT e.entityId, e.entityName\n, rb.roleBundleId\n, rb.roleBundleName\nfrom  azstudioEntityEntities e\nJOIN azstudioEntityEntityTypes et on e.entityTypeId = et.entityTypeId\nJOIN azstudioEntityStatusTypes st on e.entityStatusTypeId = st.entityStatusTypeId\nJOIN azstudioSecurityRoleBundles rb on e.entityId = rb.entityId \nwhere e.entityId = '@{pipeline().parameters.PortalEntityID}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Entity RoleBundle",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup RoleBundleIds",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup RoleBundleIds').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().roleBundleName",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Employee",
												"activities": [
													{
														"name": "Set variable roleBundleId_employee",
														"type": "SetVariable",
														"dependsOn": [],
														"policy": {
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"variableName": "roleBundleId_Employee",
															"value": {
																"value": "@item().roleBundleId",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"value": "Message Only",
												"activities": [
													{
														"name": "Set variable roleBundleId_MessageOnly",
														"type": "SetVariable",
														"dependsOn": [],
														"policy": {
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"variableName": "roleBundleId_MessageOnly",
															"value": {
																"value": "@item().roleBundleId",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"value": "Program Manager",
												"activities": [
													{
														"name": "Set variable roleBundleId_Manager",
														"type": "SetVariable",
														"dependsOn": [],
														"policy": {
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"variableName": "roleBundleId_ProgramManager",
															"value": {
																"value": "@item().roleBundleId",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					}
				},
				"variables": {
					"roleBundleId_Employee": {
						"type": "String"
					},
					"roleBundleId_MessageOnly": {
						"type": "String"
					},
					"roleBundleId_ProgramManager": {
						"type": "String"
					},
					"BusinessContinuityManagerRoleId": {
						"type": "String",
						"defaultValue": "a90d9a09-75cd-44d0-8ece-a04d873520ad"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T14:55:19Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Without Sites Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_users_without_site",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach User Without Sites",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Users Without Site",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Users Without Sites",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:45:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Users Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_user_data",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Preparis Users",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Users",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:09:24Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Doc Create Files Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": {
									"value": "@pipeline().parameters.file_table_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Doc Create Files",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Doc Create Files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"file_table_name": {
												"value": "@pipeline().parameters.file_table_name",
												"type": "Expression"
											},
											"rpSessionToken": {
												"value": "@pipeline().parameters.rpSessionToken",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"preparisSessionToken": {
						"type": "string"
					},
					"file_table_name": {
						"type": "string"
					},
					"rpSessionToken": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Files And Images"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get Document Migration Objects')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Get RP CompanyName",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP CompanyName",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_server_name",
									"type": "Expression"
								},
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable CompanyName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get RP CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CompanyName",
							"value": {
								"value": "@activity('Execute Pipeline Get RP CompanyName').output.pipelineReturnValue.CompanyName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable UserRootPortal",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable preparisUserId from pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "UserRootPortal",
							"value": {
								"value": "@activity('Execute Pipeline Get Preparis Session Token').output.pipelineReturnValue.currentPortalId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Get RP Session Token",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable currentPortalId from DB_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP Session Token",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"rpClientID": {
									"value": "@pipeline().parameters.rpClientId",
									"type": "Expression"
								},
								"rpUserName": {
									"value": "@pipeline().parameters.rpRestUserName",
									"type": "Expression"
								},
								"rpUserPassword": {
									"value": "@pipeline().parameters.rpRestUserPassword",
									"type": "Expression"
								},
								"rpBaseUrl": {
									"value": "@pipeline().parameters.rpBaseURL",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable rpSessionToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get RP Session Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "rpSessionToken",
							"value": {
								"value": "@activity('Execute Pipeline Get RP Session Token').output.pipelineReturnValue.rpSessionToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Get Preparis Session Token",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable currentPortalId from DB_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Preparis Session Token",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisBaseURL": {
									"value": "@pipeline().parameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().parameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable preparisSessionToken from pipeline",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get Preparis Session Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisSessionToken",
							"value": {
								"value": "@activity('Execute Pipeline Get Preparis Session Token').output.pipelineReturnValue.preparisSessionToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable preparisUserId from pipeline",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable preparisSessionToken from pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisUserId",
							"value": {
								"value": "@activity('Execute Pipeline Get Preparis Session Token').output.pipelineReturnValue.preparisUserId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Get Preparis PortalID",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Preparis Portal ID",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"companyName": {
									"value": "@variables('CompanyName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable currentPortalId from DB_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get Preparis PortalID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisCurrentPortalId",
							"value": {
								"value": "@activity('Execute Pipeline Get Preparis PortalID').output.pipelineReturnValue.portalEntityId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Get Preparis Root Folder",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable UserRootPortal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Preparis Root Folder",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisBaseURL": {
									"value": "@pipeline().parameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().parameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								},
								"preparisSessionToken": {
									"value": "@variables('preparisSessionToken')",
									"type": "Expression"
								},
								"preparisCurrentPortalId": {
									"value": "@variables('preparisCurrentPortalId')",
									"type": "Expression"
								},
								"UserRootPortal": {
									"value": "@variables('UserRootPortal')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable preparisRootFolderId_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get Preparis Root Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisRootFolderId",
							"value": {
								"value": "@activity('Execute Pipeline Get Preparis Root Folder').output.pipelineReturnValue.rootFolderId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Return Variables",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable preparisRootFolderId_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set variable rpSessionToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "preparisRootFolderId",
									"value": {
										"type": "Expression",
										"content": "@variables('preparisRootFolderId')"
									}
								},
								{
									"key": "preparisSessionToken",
									"value": {
										"type": "Expression",
										"content": "@variables('preparisSessionToken')"
									}
								},
								{
									"key": "preparisCurrentPortalId",
									"value": {
										"type": "Expression",
										"content": "@variables('preparisCurrentPortalId')"
									}
								},
								{
									"key": "preparisUserId",
									"value": {
										"type": "Expression",
										"content": "@variables('preparisUserId')"
									}
								},
								{
									"key": "rpSessionToken",
									"value": {
										"type": "Expression",
										"content": "@variables('rpSessionToken')"
									}
								},
								{
									"key": "rpClientId",
									"value": {
										"type": "Expression",
										"content": "@pipeline().parameters.rpClientId"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rp_db_name": {
						"type": "string"
					},
					"rp_server_name": {
						"type": "string"
					},
					"preparisBaseURL": {
						"type": "string"
					},
					"preparisDeviceIdAsBase64": {
						"type": "string"
					},
					"rpBaseURL": {
						"type": "string"
					},
					"rpRestUserName": {
						"type": "string"
					},
					"rpRestUserPassword": {
						"type": "string"
					},
					"rpClientId": {
						"type": "string"
					}
				},
				"variables": {
					"rpSessionToken": {
						"type": "String"
					},
					"preparisSessionToken": {
						"type": "String"
					},
					"preparisUserId": {
						"type": "String"
					},
					"preparisCurrentPortalId": {
						"type": "String"
					},
					"preparisRootFolderId": {
						"type": "String"
					},
					"CompanyName": {
						"type": "String"
					},
					"UserRootPortal": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Documents"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T16:44:14Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get Portal Id By DB Name')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Get RP CompanyName",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP CompanyName",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Set variable CompanyName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get RP CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CompanyName",
							"value": {
								"value": "@activity('Execute Pipeline Get RP CompanyName').output.pipelineReturnValue.CompanyName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Get Preparis PortalID",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Preparis Portal ID",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"companyName": {
									"value": "@variables('CompanyName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Pipeline Return value",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get Preparis PortalID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "currentPortalId",
									"value": {
										"type": "Expression",
										"content": "@activity('Execute Pipeline Get Preparis PortalID').output.pipelineReturnValue.portalEntityId"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"CompanyName": {
						"type": "String",
						"defaultValue": "''"
					}
				},
				"folder": {
					"name": "common"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR TaskSet Members Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Iterations for TaskSet Tasks",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_itdr_task_set_members"
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Iterations for TaskSet Tasks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Iterations for TaskSet Tasks').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Migrate ITDR TaskSet Members",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate ITDR TaskSet Members",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"membersSQL": {
						"type": "Array"
					},
					"teamsSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR TaskSet Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup iteration data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_itdr_task_sets"
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup iteration data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup iteration data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Migrate ITDR TaskSet",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate ITDR TaskSet",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"taskSetInsertSql": {
						"type": "Array"
					},
					"membersSQL": {
						"type": "Array"
					},
					"teamsSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR TaskSet Tasks Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Task Iterations",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_itdr_task_set_tasks"
							}
						}
					},
					{
						"name": "Task Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Task Iterations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Task Iterations').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Migrate ITDR TaskSet Tasks",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate ITDR TaskSet Tasks",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Update TaskSet Task Sort Order",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Task Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update task\nset task.sequenceNumber = sortOrder.row_num\nfrom bcPortalPlanTechnologyTask task\njoin \n(select \nROW_NUMBER() OVER(PARTITION BY portalPlanTechnologyTaskSetId order by sortHierKey) row_num,\nt.portalPlanTechnologyTaskId\n from\n(select\nCAST(CONCAT('/', TRIM(REPLACE(SUBSTRING(tt.portalPlanTechnologyTaskName, 0, PATINDEX('% - %', tt.portalPlanTechnologyTaskName)), '.', '/')), '/') as hierarchyid)sortHierKey,\ntt.portalPlanTechnologyTaskId,\ntt.portalPlanTechnologyTaskSetId\n from bcPortalPlanTechnologyTask tt\njoin bcPortalPlanTechnologyTaskSet ts on tt.portalPlanTechnologyTaskSetId = ts.portalPlanTechnologyTaskSetId\njoin bcPortalPlanTechnology ppt on ts.portalPlanTechnologyId = ppt.portalPlanTechnologyId\nwhere ppt.portalId = '@{pipeline().parameters.currentPortalId}') t) sortOrder on task.portalPlanTechnologyTaskId = sortOrder.portalPlanTechnologyTaskId",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"teamsSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR Technologies Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup iteration data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_itdr_technologies"
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup iteration data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup iteration data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Migrate ITDR Technology",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate ITDR Technologies",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"currentPortalId": {
												"value": "@pipeline().parameters.currentPortalId",
												"type": "Expression"
											},
											"iterationStart": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iterationStop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"portalPlanTypeId": {
												"value": "@pipeline().parameters.portalPlanTypeId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					},
					"portalPlanTypeId": {
						"type": "string"
					}
				},
				"variables": {
					"taskSetInsertSql": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR Technology Dependencies Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup iteration data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Technology Dependencies data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_itdr_dependencies"
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup iteration data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup iteration data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Migrate ITDR Technology Dependencies",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate ITDR Technology Dependencies",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Technology Dependencies data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_itdr_dependencies;\r\ncreate table migration_itdr_dependencies\r\nas (\r\nselect \r\nROW_NUMBER() OVER (ORDER BY rg.parent_id) row_num,\r\nuuid() newPortalPlanTechnologyDependencyId,\r\nrg.child_id rp_child_technology_id,\r\nrg.parent_id rp_parent_technology_id,\r\nt1.technologyId childTechnologyId,\r\nt2.newPortalPlanTechnologyId newParentPortalPlanTechnologyId\r\n from t_resource_graph rg\r\njoin migration_itdr_technologies t1 on rg.child_id = t1.rp_technology_id\r\njoin migration_itdr_technologies t2 on rg.parent_id = t2.rp_technology_id\r\n);\r\n\r\nselect count(*) from migration_itdr_dependencies;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR Vendors Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup iteration data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Technology Vendor data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_itdr_vendor"
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup iteration data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup iteration data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Migrate ITDR Vendors",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate ITDR Vendors",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Technology Vendor data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_itdr_vendor;\r\ncreate table migration_itdr_vendor\r\nas (\r\nselect\r\nROW_NUMBER() OVER (ORDER BY newPortalPlanTechnologyId) row_num,\r\nuuid() newPortalPlanTechnologyVendorId,\r\nvr.VENDOR_ID rp_vendor_id,\r\nvd.newVendorId,\r\nvd.vendorName,\r\nt.rp_technology_id,\r\nt.rp_technology_name,\r\nt.newPortalPlanTechnologyId\r\n from T_VENDOR_RESOURCE vr\r\njoin migration_vendor_data vd on vd.vendorId = vr.VENDOR_ID\r\njoin migration_itdr_technologies t on t.rp_technology_id = vr.resource_id\r\n);\r\n\r\nselect count(*) from migration_itdr_vendor;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Portal Plan Technologies Attachments Partitioned - not used')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Portal Plan Technology Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Iterations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Iterations').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Migrate Portal Plan Technologies Attachments",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate Portal Plan Technologies Attachments - not used",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "Iterations",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_itdr_attachments"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					},
					"portalPlanDocumentFolderId": {
						"type": "string"
					},
					"preparisSessionToken": {
						"type": "string"
					}
				},
				"variables": {
					"insertSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR/Portal Plan Technology Attachments"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Strategies Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Migration table for Process Strategies",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_portalProcess_strategy;\r\n\r\ncreate table migration_portalProcess_strategy AS\r\n(\r\nwith toDefault as\r\n(\r\n    select\r\n    f.id function_id\r\n    from T_FUNCTION f\r\n    left join T_BIA_MATRIX_FUNCTION_ENTRY mfe on f.Id = mfe.function_id\r\n    where mfe.FUNCTION_ID is null\r\n),\r\nfromMatrix as \r\n(\r\n    select\r\n    ROW_NUMBER() OVER (PARTITION by m.department_id, mfe.function_id order by mfe.siteType, CASE when (l.newSiteId is not null) then 0 else 1 end, rto.seconds ) row_num_internal\r\n    , m.id matrix_id\r\n    , m.name matrixName\r\n    , m.description\r\n    , mfe.siteType\r\n    , mfe.site_id\r\n    , mfe.function_id\r\n    , f.name functionName\r\n    , m.department_id\r\n    , m.lastUpdateDate matrixLastUpdateDate\r\n    , mfe.lastUpdateDate funcEntryLastUpdateDate\r\n    , mfe.rto_id\r\n    , case when l.newSiteId is null then '9c004e84-4eb4-44f1-a008-cd33f5211014' /*Work From Anywhere*/ else '704acb8f-ed9b-4f11-ab37-0f0139895d5b' /*Temporary Workspace*/ end strategyTypeId\r\n    , pp.portalProcessId\r\n    , pfa.portalFunctionalAreaId\r\n    , l.newSiteId locationId\r\n    , rto.seconds\r\n    from T_BIA_MATRIX m\r\n    join T_BIA_MATRIX_FUNCTION_ENTRY mfe on m.id = mfe.matrix_id\r\n    join t_function f on f.id = mfe.function_id\r\n    join migration_portalfunctionalArea_data pfa on pfa.department_id = m.department_id\r\n    join migration_portalProcess_data pp on pp.function_id = mfe.function_Id and pp.portalFunctionalAreaId = pfa.portalFunctionalAreaId\r\n    left join migration_site_data l on l.id = mfe.site_id\r\n    left join migration_rto_intervals rto on rto.id = mfe.rto_id\r\n),\r\nwithDefaults as\r\n(\r\n    select\r\n    1 row_num_internal\r\n    , 0 matrix_id\r\n    , 'Default' matrixName\r\n    , 'Default' description\r\n    , null siteType\r\n    , null site_id\r\n    , pp.function_id\r\n    , pp.portalProcessName\r\n    , null department_id\r\n    , null matrixLastUpdateDate\r\n    , null funcEntryLastUpdateDate\r\n    , null rto_id\r\n    , '9c004e84-4eb4-44f1-a008-cd33f5211014' /*Work From Anywhere*/ strategyTypeId\r\n    , pp.portalProcessId\r\n    , pp.portalFunctionalAreaId\r\n    , null locationId\r\n    , null seconds\r\n    from toDefault d\r\n    join migration_portalProcess_data pp on pp.function_id = d.function_id\r\n)\r\n\r\nselect ROW_NUMBER() over (order by portalProcessId) row_num\r\n, t.* from\r\n(   select\r\n    uuid() portalProcessStrategyId\r\n    , fm.* from fromMatrix fm\r\n    where row_num_internal = 1\r\n    union\r\n    select\r\n    uuid() portalProcessStrategyId\r\n    , wd.* from withDefaults wd) t\r\n);\r\n\r\nselect count(*) rowsCount from migration_portalProcess_strategy;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Stratagies Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Process Strategies",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate Strategies",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iterationStart": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iterationStop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"currentPortalId": {
												"value": "@pipeline().parameters.currentPortalId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build Migration table for Process Strategies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_portalProcess_strategy",
								"rp_db_name": {
									"value": "@pipeline().globalParameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().globalParameters.rp_server_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Update Strategy Impact Timespan Id",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Process Stratagies Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update pps\nset pps.impactTimespanId = pp.rtoImpactTimespanId\n from\nbcPortalProcessStrategy pps\njoin bcPortalProcess pp on pp.portalProcessId = pps.portalProcessId\njoin bcPortalFunctionalArea pfa on pfa.portalFunctionalAreaId = pp.portalFunctionalAreaId\nwhere pfa.portalId = '@{pipeline().parameters.currentPortalId}'\nand pp.rtoImpactTimespanId is not NULL",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Update Strategy locations",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Process Stratagies Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "insert into bcPortalProcessStrategyLocation\n(portalProcessStrategyLocationId\n, portalProcessStrategyId\n, strategyLocationTypeId\n, locationId\n, processStrategyResourceStatusTypeId\n, dateTimeCreated\n, createdById)\nselect\nnewid()\n, portalProcessStrategyId\n, '226d7117-02fb-409a-a4da-29cca8689300' /*Internal location*/\n, pl.locationId\n, 'dfa05d5e-7ec3-4d2e-8170-bbad882951c5' /*Active*/\n, CURRENT_TIMESTAMP\n, pl.createdById\n from\nbcPortalProcessStrategy pps\njoin bcPortalProcessLocation pl on pl.portalProcessLocationId = pps.portalProcessLocationId\njoin bcPortalProcess pp on pp.portalProcessId = pps.portalProcessId\njoin bcPortalFunctionalArea pfa on pfa.portalFunctionalAreaId = pp.portalFunctionalAreaId\nwhere pfa.portalId = '@{pipeline().parameters.currentPortalId}'",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Strategy Employees Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Migration table for Process Strategies Employees",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_Strategy_Employee;\r\n\r\ncreate table migration_Strategy_Employee AS\r\n(\r\n    with temp as \r\n    (\r\n        select distinct\r\nps.portalProcessStrategyId,\r\nps.matrixName,\r\nps.functionName,\r\nmfe.function_id,\r\npp.portalProcessId,\r\npp.portalProcessName,\r\nfd.department_id,\r\nd.portalFunctionalAreaId,\r\nd.portalFunctionalAreaName,\r\nmue.user_id,\r\nu.username,\r\nu.newUserId userId\r\n from T_BIA_MATRIX_USER_ENTRY mue\r\njoin T_BIA_MATRIX_FUNCTION_ENTRY mfe on mue.function_entry_id = mfe.id\r\njoin T_FUNCTION_DEPARTMENT fd on fd.FUNCTION_ID = mfe.function_id\r\njoin migration_portalfunctionalArea_data d on d.department_id = fd.department_id\r\njoin migration_portalProcess_data pp on pp.function_id = mfe.function_id and pp.portalFunctionalAreaId = d.portalFunctionalAreaId\r\njoin migration_all_user_data u on u.userId = mue.user_id\r\njoin migration_portalProcess_strategy ps on ps.portalProcessId = pp.portalProcessId\r\nwhere entry_type = 'FUNCTION'\r\n    )\r\n\r\n    select\r\n    ROW_NUMBER() over (order by portalProcessId) row_num\r\n    , uuid() portalProcessStrategyEmployeeId\r\n    , temp.* from temp\r\n);\r\n\r\nselect 'DONE' as 'Lookup Activity Hack';",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Stratagy Employees Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Process Strategies Employees",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate Strategy Employees",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iterationStart": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iterationStop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build Migration table for Process Strategies Employees",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_Strategy_Employee"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Strategy Technologies Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Migration table for Process Strategies Tech",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_Strategy_Technology;\r\n\r\ncreate table migration_Strategy_Technology AS\r\n(\r\nwith toDefault as\r\n(\r\n    select\r\n    f.id function_id\r\n    from T_FUNCTION f\r\n    left join T_BIA_MATRIX_FUNCTION_ENTRY mfe on f.Id = mfe.function_id\r\n    where mfe.FUNCTION_ID is null\r\n),\r\nfromMatrix as \r\n(\r\n    select distinct\r\nps.portalProcessStrategyId,\r\nps.matrixName,\r\nps.functionName,\r\nmfe.function_id,\r\npp.portalProcessId,\r\npp.portalProcessName,\r\nfd.department_id,\r\nd.portalFunctionalAreaId,\r\nd.portalFunctionalAreaName,\r\nmre.resource_id,\r\ntech.name rp_resource_name,\r\ntech.technologyId\r\n from T_BIA_MATRIX_RESOURCE_ENTRY mre\r\njoin T_BIA_MATRIX_FUNCTION_ENTRY mfe on mre.function_entry_id = mfe.id\r\njoin T_FUNCTION_DEPARTMENT fd on fd.FUNCTION_ID = mfe.function_id\r\njoin migration_portalfunctionalArea_data d on d.department_id = fd.department_id\r\njoin migration_portalProcess_data pp on pp.function_id = mfe.function_id and pp.portalFunctionalAreaId = d.portalFunctionalAreaId\r\njoin migration_technology_data tech on tech.rp_technology_id = mre.resource_id\r\njoin migration_portalProcess_strategy ps on ps.portalProcessId = pp.portalProcessId\r\nwhere entry_type = 'FUNCTION'\r\nand resource_id is not null\r\n),\r\nwithDefaults as\r\n(\r\n    select distinct\r\nps.portalProcessStrategyId,\r\nps.matrixName,\r\nps.functionName,\r\npp.function_id,\r\npp.portalProcessId,\r\npp.portalProcessName,\r\nnull department_id,\r\npp.portalFunctionalAreaId,\r\npp.portalFunctionalAreaName,\r\nrf.resource_id,\r\ntech.name rp_resource_name,\r\ntech.technologyId\r\n from toDefault d\r\njoin migration_portalProcess_data pp on pp.function_id = d.function_id\r\njoin t_resource_function rf on rf.function_id = pp.function_id\r\njoin migration_technology_data tech on tech.rp_technology_id = rf.resource_id\r\njoin migration_portalProcess_strategy ps on ps.portalProcessId = pp.portalProcessId\r\n)\r\n\r\nselect ROW_NUMBER() over (order by portalProcessId) row_num\r\n, t.* from\r\n(   select\r\n    uuid() portalProcessStrategyTechnologyId,\r\n    fm.* from fromMatrix fm\r\n    union\r\n    select\r\n    uuid() portalProcessStrategyTechnologyId,\r\n    wd.* from withDefaults wd) t\r\n);\r\n\r\nselect count(*) rowsCount from migration_Strategy_Technology;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Stratagy Tech Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Process Strategies Technology",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate Strategy Technologies",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iterationStart": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iterationStop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build Migration table for Process Strategies Tech",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_Strategy_Technology",
								"rp_db_name": {
									"value": "@pipeline().globalParameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().globalParameters.rp_server_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}