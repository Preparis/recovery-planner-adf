{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "recovery-planner-adf"
		},
		"AzureBlobStorage1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureBlobStorage1'"
		},
		"AzureFunction_GeneratePlanPrintNodesDTO_functionKey": {
			"type": "secureString",
			"metadata": "Secure string for 'functionKey' of 'AzureFunction_GeneratePlanPrintNodesDTO'"
		},
		"AzureMySql_dynamic_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureMySql_dynamic'"
		},
		"AzureSqlDatabase_Preparis_dev_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase_Preparis_dev'"
		},
		"AzureFunction_GeneratePlanPrintNodesDTO_properties_typeProperties_functionAppUrl": {
			"type": "string",
			"defaultValue": "https://recoveryplannerplanparser.azurewebsites.net"
		},
		"HttpServerPreparis_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://dev-main-core.preparisapp.com/API/CreateOrUpdateDocument"
		},
		"HttpServer_RecoveryPlannerPlans_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().BaseURL}plan-print/@{linkedService().PlanID}?print-preview=false&output-format=MSWORD2007&bundled=true&draft=false"
		},
		"HttpServer_RecoveryPlanner_Files_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().BaseURL}"
		},
		"HttpServer_RecoveryPlanner_Incidents_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "@{linkedService().rpBaseUrl}incidents/@{linkedService().rpEventId}/preview-save?notifications=true&notificationOption=BOTH&history=true&incidentLog=true&expenseLog=false&teamInfo=true"
		},
		"RestService_RP_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://rpx-services-stg-tmp.recoveryplanner.com/rpx-rest/incidents/@{linkedService().incidentId}/preview-save?notifications=true&notificationOption=BOTH&history=true&incidentLog=true&expenseLog=false&teamInfo=true"
		},
		"StorageAccount_Preparis_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "@{linkedService().BaseUrl}"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Base64 Encode Username and pwd')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable preparisUserPasswordEncoded",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Set variable preparisUserEncoded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisUserPasswordEncoded",
							"value": {
								"value": "@base64(variables('preparisUserPassword'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable preparisUserEncoded",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisUserEncoded",
							"value": {
								"value": "@base64(variables('preparisUser'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable newGuid",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Set variable preparisUserPasswordEncoded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "newGuid",
							"value": {
								"value": "@{guid()}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable folderNameEncoded",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Set variable newGuid",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisFolderNameEncoded",
							"value": {
								"value": "@base64(variables('folderName'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable pdfContentDecoded",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pdfContentDecoded",
							"value": {
								"value": "@decodeBase64(variables('pdfContentEncoded'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"preparisUser": {
						"type": "String",
						"defaultValue": "migration@dispostable.com"
					},
					"preparisUserEncoded": {
						"type": "String"
					},
					"preparisUserPassword": {
						"type": "String",
						"defaultValue": "Preparis123!"
					},
					"preparisUserPasswordEncoded": {
						"type": "String"
					},
					"newGuid": {
						"type": "String"
					},
					"folderName": {
						"type": "String",
						"defaultValue": "Incidents"
					},
					"folderNameEncoded": {
						"type": "String"
					},
					"pdfContentEncoded": {
						"type": "String",
						"defaultValue": "\\"
					},
					"pdfContentDecoded": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Testers and Misc"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-13T10:01:42Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CompanyNameTester')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Get RP CompanyName",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP CompanyName",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"rp_server_name": "recovery-planner-mysql-server.mysql.database.azure.com",
								"rp_db_name": "mercbank"
							}
						}
					},
					{
						"name": "Set variable CompanyName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get RP CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CompanyName",
							"value": {
								"value": "@activity('Execute Pipeline Get RP CompanyName').output.pipelineReturnValue.CompanyName",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"CompanyName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Testers and Misc"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-13T10:01:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Get RP CompanyName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields ITDR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Migrating ITDR",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().globalParameters.migrateITDR, 1)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Create Technology Type Custom Fields",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Technology Type Custom Fields Partitioned",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"currentPortalId": {
												"value": "@pipeline().parameters.currentPortalId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"insertSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Technology Type Custom Fields Partitioned')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields Options Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Iteration Data CF Options",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_custom_fields_options"
							}
						}
					},
					{
						"name": "ForEach Custom Field Option in Batch",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Iteration Data CF Options",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Iteration Data CF Options').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Create Custom Field Options",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Custom Fields Options",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"portalId": {
						"type": "string"
					}
				},
				"variables": {
					"rp_area_type": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Create Custom Fields Options')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields Options')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get CF Options for Iteration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select row_num\n, optionName\n, displaySequence\n, newCustomFieldId customFieldId\n, newCustomFieldOptionId customFieldOptionId\n from migration_custom_fields_options\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Custom Field Option",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get CF Options for Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get CF Options for Iteration').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable custom fields",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_custom_field_option_statements",
										"value": {
											"value": "insert into ppPortalCustomFieldOption\n(customFieldOptionId\n, customFieldId\n, optionName\n, isDefault\n, displaySequence\n, customFieldOptionStatusTypeId\n, dateTimeCreated\n, createdById)\nVALUES\n(\n'@{item().customFieldOptionId}'\n, '@{item().customFieldId}'\n, '@{item().optionName}'\n, case when @{item().displaySequence} = 0 then 1 else 0 end\n, @{item().displaySequence}\n, 'b5da6970-6125-4904-b87f-c39187d4fd8a'\n, CURRENT_TIMESTAMP\n, '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach Custom Field Option",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insert_custom_field_option_statements')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Insert Custom Field Options Batch",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_custom_field_option_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"rp_area_type": {
						"type": "Integer"
					},
					"insert_custom_field_option_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Migration Tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "/*custom field type mapping*/\r\nDROP TABLE IF EXISTS migration_custom_fields_types_mapping;\r\n\r\nCREATE TABLE IF NOT EXISTS migration_custom_fields_types_mapping as\r\n(\r\nselect a.rp_area_type, a.rp_descr, a.preparis_type, a.preparis_descr\r\nfrom\r\n(select t.* from\r\n(values\r\nrow(5, 'user', '0741ab49-72f7-4555-b93c-b462cbd96007', 'User'),\r\nrow(19, 'function', '72bf9737-378a-4171-bfb1-deef31a7f9f9', 'Biusiness Continiuty'),\r\nrow(3, 'resource', 'ea473ce9-8796-4d7d-b74d-a154a56c1d5f', 'Biusiness Continiuty Technology')) t (rp_area_type, rp_descr, preparis_type, preparis_descr)) a);\r\n\r\n/*custom fields data types mapping*/\r\nDROP TABLE IF EXISTS migration_custom_fields_data_types_mapping;\r\n\r\nCREATE TABLE IF NOT EXISTS migration_custom_fields_data_types_mapping as\r\n(\r\nselect a.rp_type, a.rp_descr, a.preparis_type, a.preparis_descr\r\nfrom\r\n(select t.* from\r\n(values\r\nrow(10, 'DATE', '1eccbe40-1b3b-461b-95df-35f1fe6a8af2', 'DateTime'),\r\nrow(2, 'ShortText', '0f6f2372-1e4c-4d67-ad13-615a0540488c', 'ShortText'),\r\nrow(3, 'RADIO', 'aad6f035-05f9-42d3-b6ea-682371340875', 'SelectOne'),\r\nrow(0, 'PICKLIST', 'aad6f035-05f9-42d3-b6ea-682371340875', 'SelectOne'),\r\nrow(5, 'MULTISELECT', '76c83029-8439-42ad-90e6-7f0ff54b732c', 'SelectMany'),\r\nrow(1, 'CHECKBOX', 'd8bd3d80-d25d-4056-8754-a740f2396792', 'TrueFalse'),\r\nrow(4, 'TEXTBOX', 'b9847d16-19b5-4ed4-a4e3-d7f07533ab5a', 'LongText'),\r\nrow(9, 'NUMERIC', '5f31785c-4d3c-4d68-a834-da37c2bc0a76', 'Numeric')) t (rp_type, rp_descr, preparis_type, preparis_descr)) a);\r\n\r\n\r\n/* Process custom fields */\r\nDROP TABLE IF EXISTS migration_custom_fields;\r\n\r\nCREATE TABLE IF NOT EXISTS migration_custom_fields as\r\n(\r\nselect\r\nROW_NUMBER() OVER (ORDER BY cf.id) row_num,\r\ncf.id,\r\ncf.areaType,\r\ncf.name,\r\ncf.required isRequired,\r\ncfdtm.preparis_type customFieldDataTypeId,\r\ncftm.preparis_type customFieldTypeId,\r\ncf.possition displaySequence,\r\nuuid() newCustomFieldId\r\nfrom t_custom_field cf\r\njoin migration_custom_fields_data_types_mapping cfdtm on cf.type = cfdtm.rp_type\r\njoin migration_custom_fields_types_mapping cftm on cf.areaType = cftm.rp_area_type);\r\n\r\n\r\n/* process custom fields options */\r\nDROP TABLE IF EXISTS migration_custom_fields_options;\r\n\r\nCREATE TABLE IF NOT EXISTS migration_custom_fields_options as\r\n(\r\nselect\r\nROW_NUMBER() OVER (ORDER BY cfch.id) row_num,\r\ncfch.id,\r\ncfch.field_id,\r\nmcf.areaType,\r\ncfch.name optionName,\r\ncfch.possition displaySequence,\r\n0 isDefault,\r\n'b5da6970-6125-4904-b87f-c39187d4fd8a' customFieldOptionStatusTypeId /*Active*/,\r\nmcf.newCustomFieldId,\r\nuuid() newCustomFieldOptionId\r\n from migration_custom_fields mcf\r\njoin t_custom_field_choice cfch on mcf.id = cfch.field_id);\r\n\r\n\r\nselect count(*) cfCount from migration_custom_fields;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Lookup Iteration Data CF",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Migrating ITDR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_custom_fields"
							}
						}
					},
					{
						"name": "ForEach Custom Field in batch",
						"description": "For Each Recovery Planner User Custom Field Batch",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Iteration Data CF",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Iteration Data CF').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Create Custom Fields",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Custom Fields",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"portalId": {
												"value": "@pipeline().parameters.currentPortalId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Migrating ITDR",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Build Migration Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().globalParameters.migrateITDR, 1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Remove ITDR Custom fields",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureMySqlSource",
											"query": "/*Delete records for ITDR (areaType 3)*/\r\ndelete from migration_custom_fields\r\nwhere areaType = 3;\r\n\r\ndelete from migration_custom_fields_options\r\nwhere areaType = 3;\r\n\r\n/*Update row numbers*/\r\nupdate migration_custom_fields mcf\r\njoin (\r\nselect ROW_NUMBER() OVER (ORDER BY id) row_num,\r\nid\r\nfrom migration_custom_fields\r\n) t on t.id = mcf.id\r\nset mcf.row_num = t.row_num;\r\n\r\n\r\nupdate migration_custom_fields_options mcfo\r\njoin (\r\nselect ROW_NUMBER() OVER (ORDER BY id) row_num,\r\nid\r\nfrom migration_custom_fields_options\r\n) t on t.id = mcfo.id\r\nset mcfo.row_num = t.row_num;\r\n\r\nselect count(*) from migration_custom_fields_options;",
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "RecoveryPlanner",
											"type": "DatasetReference",
											"parameters": {
												"db_name": {
													"value": "@pipeline().globalParameters.rp_db_name",
													"type": "Expression"
												},
												"server_name": {
													"value": "@pipeline().globalParameters.rp_server_name",
													"type": "Expression"
												}
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"iteration_start": {
						"type": "Integer",
						"defaultValue": 0
					},
					"iteration_stop": {
						"type": "Integer",
						"defaultValue": 0
					},
					"insert_custom_fields_statements": {
						"type": "Array"
					},
					"rp_area_type": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Create Custom Fields')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields Strategy Values Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Strategy Custom Fields",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LUP Migration Tables Custom Fields Values",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_strategy_custom_fields_values"
							}
						}
					},
					{
						"name": "Strategy Custom Field value",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Strategy Custom Fields",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Strategy Custom Fields').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Create Strategy Custom Fields Values",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Custom Fields Strategy Values",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"currentPortalId": {
												"value": "@pipeline().parameters.currentPortalId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "LUP Migration Tables Custom Fields Values",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "DROP TABLE IF EXISTS migration_strategy_custom_fields_values;\r\n\r\nCREATE TABLE IF NOT EXISTS migration_strategy_custom_fields_values as\r\n(\r\nselect\r\n    ROW_NUMBER() OVER (ORDER BY user_id) row_num, t.*\r\n    from\r\n    (select\r\n    uuid() newCustomFieldValueId,\r\n    cv.user_id,\r\n    cv.field_id,\r\n    mcf.areaType,\r\n    case when mcf.customFieldDataTypeId = '0f6f2372-1e4c-4d67-ad13-615a0540488c'/*ShortText*/ then convert(cv.text, char(4000)) else\r\n    case when mcf.customFieldDataTypeId = 'd8bd3d80-d25d-4056-8754-a740f2396792'/*TrueFalse*/ then convert((cv.checked = 1), char(4000)) else\r\n        case when mcf.customFieldDataTypeId = 'b9847d16-19b5-4ed4-a4e3-d7f07533ab5a'/*LongText*/ then convert(cv.textArea, char(4000)) else\r\n            case when mcf.customFieldDataTypeId = '1eccbe40-1b3b-461b-95df-35f1fe6a8af2'/*DateTime*/ then convert(cv.date, char(4000)) \r\n                end end end end userValue,\r\n    ud.newUserId,\r\n    mcf.newCustomFieldId\r\n    from t_custom_value cv\r\n    join migration_all_user_data ud on ud.userId = cv.user_id\r\n    join migration_custom_fields mcf on mcf.id = cv.field_id\r\n    where mcf.areaType = 19\r\n    and mcf.customFieldDataTypeId in ('0f6f2372-1e4c-4d67-ad13-615a0540488c', 'd8bd3d80-d25d-4056-8754-a740f2396792', 'b9847d16-19b5-4ed4-a4e3-d7f07533ab5a', '1eccbe40-1b3b-461b-95df-35f1fe6a8af2')\r\nunion\r\n-- add picklist values\r\n    select \r\n    uuid() newCustomFieldValueId,\r\n    cv.user_id,\r\n    cv.field_id,\r\n    mcf.areaType,\r\n    convert(cfc.name, char(4000)) userValue,\r\n    ud.newUserId,\r\n    mcf.newCustomFieldId\r\n    from t_custom_value cv\r\n    join t_custom_field_choice cfc on cv.choice_id = cfc.id\r\n    join migration_all_user_data ud on ud.userId = cv.user_id\r\n    join migration_custom_fields mcf on mcf.id = cv.field_id\r\n    where user_id is not null\r\n    and mcf.areaType = 19\r\n    and mcf.customFieldDataTypeId = 'aad6f035-05f9-42d3-b6ea-682371340875' /*PICKLIST*/) t);\r\n\r\nselect count(*) customFieldsCount from migration_strategy_custom_fields_values;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"userLocationsStatements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Create Custom Fields Strategy Values')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields Strategy Values')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get CF Values for Iteration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select row_num\n, newCustomFieldValueId\n, fieldValue\n, newUserId\n, newCustomFieldId\n, userCustomFieldStatusTypeId\nfrom migration_strategy_custom_fields_values\nwhere row_num between @{pipeline().parameters.iteration_start} and\n@{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FE Custom Field Value",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get CF Values for Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get CF Values for Iteration').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable custom fields",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_custom_field_values_statements",
										"value": {
											"value": "INSERT INTO\nbcPortalProcessStrategyCustomFieldValue\n(portalProcessStrategyCustomFieldValueId\n, portalProcessStrategyId\n, customFieldId\n, fieldValue\n, dateTimeCreated\n, createdById)\nVALUES\n(\n'@{item().newPortalProcessStrategyCustomFieldValueId}'\n, '@{item().portalProcessStrategyId}'\n, '@{item().newCustomFieldId}'\n, '@{item().fieldValue}'\n, CURRENT_TIMESTAMP\n, '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Insert Custom Field Values Batch",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "FE Custom Field Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@join(variables('insert_custom_field_values_statements'),';')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					},
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"insert_custom_field_values_statements": {
						"type": "Array"
					},
					"rpCustomFieldType": {
						"type": "Integer",
						"defaultValue": 19
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields User Values Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LUP Iteration Data CFV",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "LUP Migration Tables Custom Fields Values",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_user_custom_fields_values"
							}
						}
					},
					{
						"name": "User Custom Field value",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LUP Iteration Data CFV",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LUP Iteration Data CFV').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "EP Create Custom Fields User Values",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Custom Fields User Values",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"currentPortalId": {
												"value": "@pipeline().parameters.currentPortalId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "LUP Migration Tables Custom Fields Values",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "DROP TABLE IF EXISTS migration_user_custom_fields_values;\r\n\r\nCREATE TABLE IF NOT EXISTS migration_user_custom_fields_values as\r\n(\r\nselect\r\n    ROW_NUMBER() OVER (ORDER BY user_id) row_num, t.*\r\n    from\r\n    (select\r\n    uuid() newCustomFieldValueId,\r\n    cv.user_id,\r\n    cv.field_id,\r\n    mcf.areaType,\r\n    case when mcf.customFieldDataTypeId = '0f6f2372-1e4c-4d67-ad13-615a0540488c'/*ShortText*/ then convert(cv.text, char(4000)) else\r\n    case when mcf.customFieldDataTypeId = 'd8bd3d80-d25d-4056-8754-a740f2396792'/*TrueFalse*/ then convert((cv.checked = 1), char(4000)) else\r\n        case when mcf.customFieldDataTypeId = 'b9847d16-19b5-4ed4-a4e3-d7f07533ab5a'/*LongText*/ then convert(cv.textArea, char(4000)) else\r\n            case when mcf.customFieldDataTypeId = '1eccbe40-1b3b-461b-95df-35f1fe6a8af2'/*DateTime*/ then convert(cv.date, char(4000)) \r\n                end end end end fieldValue,\r\n    ud.newUserId,\r\n    mcf.newCustomFieldId\r\n    from t_custom_value cv\r\n    join migration_all_user_data ud on ud.userId = cv.user_id\r\n    join migration_custom_fields mcf on mcf.id = cv.field_id\r\n    where mcf.areaType = 5\r\n    and mcf.customFieldDataTypeId in ('0f6f2372-1e4c-4d67-ad13-615a0540488c', 'd8bd3d80-d25d-4056-8754-a740f2396792', 'b9847d16-19b5-4ed4-a4e3-d7f07533ab5a', '1eccbe40-1b3b-461b-95df-35f1fe6a8af2')\r\nunion\r\n-- add picklist values\r\n    select \r\n    uuid() newCustomFieldValueId,\r\n    cv.user_id,\r\n    cv.field_id,\r\n    mcf.areaType,\r\n    convert(cfc.name, char(4000)) fieldValue,\r\n    ud.newUserId,\r\n    mcf.newCustomFieldId\r\n    from t_custom_value cv\r\n    join t_custom_field_choice cfc on cv.choice_id = cfc.id\r\n    join migration_all_user_data ud on ud.userId = cv.user_id\r\n    join migration_custom_fields mcf on mcf.id = cv.field_id\r\n    where user_id is not null\r\n    and mcf.areaType = 5\r\n    and mcf.customFieldDataTypeId = 'aad6f035-05f9-42d3-b6ea-682371340875' /*PICKLIST*/) t);\r\n\r\nselect count(*) customFieldsCount from migration_user_custom_fields_values;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"userLocationsStatements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Create Custom Fields User Values')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields User Values')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get CF Values for Iteration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select row_num\n, newCustomFieldValueId\n, replace(fieldValue, '''','''''') fieldValue\n, newUserId\n, newCustomFieldId\nfrom migration_user_custom_fields_values\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "FE Custom Field Value",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get CF Values for Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get CF Values for Iteration').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Append variable custom fields",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_custom_field_values_statements",
										"value": {
											"value": "INSERT INTO\nppUserCustomFieldValue\n(userCustomFieldValueId\n, userId\n, customFieldId\n, portalId\n, fieldValue\n, userCustomFieldStatusTypeId\n, dateTimeCreated\n, createdById)\nVALUES\n(\n'@{item().newCustomFieldValueId}'\n, '@{item().newUserId}'\n, '@{item().newCustomFieldId}'\n, '@{pipeline().parameters.currentPortalId}'\n, '@{item().fieldValue}'\n, '0dd44108-690c-45ee-ad20-d15a322334cf' /*Active*/\n, CURRENT_TIMESTAMP\n, '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "FE Custom Field Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insert_custom_field_values_statements')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Insert Custom Field Values Batch",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_custom_field_values_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					},
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"insert_custom_field_values_statements": {
						"type": "Array"
					},
					"userLocationsStatements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Custom Fields')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Custom Fields",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select\nrow_num\n, newCustomFieldId customFieldId\n, replace(name , '''', '''''') fieldName\n, customFieldDataTypeId\n, customFieldTypeId\n, isRequired\n, displaySequence\n from migration_custom_fields\nwhere row_num between @{pipeline().parameters.iteration_start}\n and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Custom Field",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Custom Fields",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Custom Fields').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable custom fields",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_custom_fields_statements",
										"value": {
											"value": "INSERT INTO ppPortalCustomField\n(customFieldId\n, portalId\n, customFieldTypeId\n, fieldName\n, customFieldDataTypeId\n, isRequired\n, displaySequence\n, customFieldStatusTypeId\n, dateTimeCreated\n, createdById)\nVALUES\n(\n    '@{item().customFieldId}'\n    , '@{pipeline().parameters.portalId}'\n    , '@{item().customFieldTypeId}'\n    , '@{item().fieldName}'\n    , '@{item().customFieldDataTypeId}'\n    , '@{item().isRequired}'\n    , '@{item().displaySequence}'\n    , '@{variables('customFieldStatusTypeId')}'\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach Custom Field",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testInsertScript",
							"value": {
								"value": "@join(variables('insert_custom_fields_statements'),';')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "insert array is not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach Custom Field",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insert_custom_fields_statements')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Insert Custom Fields Batch",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_custom_fields_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					},
					"portalId": {
						"type": "string"
					}
				},
				"variables": {
					"insert_custom_fields_statements": {
						"type": "Array"
					},
					"TestOutputArray": {
						"type": "String"
					},
					"rp_area_type": {
						"type": "Integer"
					},
					"iteration_stop": {
						"type": "Integer"
					},
					"testInsertScript": {
						"type": "String"
					},
					"customFieldStatusTypeId": {
						"type": "String",
						"defaultValue": "f1d4f59a-64d9-43be-bebf-958ef924f2b0"
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Department Users Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_department_users",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach Department User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Department User",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Department Users",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:34:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Create Department Users')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Department Users')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Department User",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nnewEntityUserItemId\n, newDepartmentId\n, newUserId\nfrom migration_department_users\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach User Email",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Department User",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Department User').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().newDepartmentId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Create Department User",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().newDepartmentId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach User Email",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup Department User').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Entity Users')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Department Users Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Department Users Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PortalEntityID": {
									"value": "@pipeline().parameters.PortalEntityID",
									"type": "Expression"
								},
								"CreatedByGUID": {
									"value": "@pipeline().parameters.CreatedByGUID",
									"type": "Expression"
								},
								"rp_db_name": {
									"value": "@pipeline().parameters.db_name",
									"type": "Expression"
								},
								"rp_db_server": {
									"value": "@pipeline().parameters.db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Pipeline Users Without Sites Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create User Without Sites Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PortalEntityID": {
									"value": "@pipeline().parameters.PortalEntityID",
									"type": "Expression"
								},
								"CreatedByGUID": {
									"value": "@pipeline().parameters.CreatedByGUID",
									"type": "Expression"
								},
								"rp_db_name": {
									"value": "@pipeline().parameters.db_name",
									"type": "Expression"
								},
								"rp_db_server": {
									"value": "@pipeline().parameters.db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Pipeline User Locations Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create User Locations Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PortalEntityID": {
									"value": "@pipeline().parameters.PortalEntityID",
									"type": "Expression"
								},
								"CreatedByGUID": {
									"value": "@pipeline().parameters.CreatedByGUID",
									"type": "Expression"
								},
								"rp_db_name": {
									"value": "@pipeline().parameters.db_name",
									"type": "Expression"
								},
								"rp_db_server": {
									"value": "@pipeline().parameters.db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Pipeline Group Users Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Group Users Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PortalEntityID": {
									"value": "@pipeline().parameters.PortalEntityID",
									"type": "Expression"
								},
								"CreatedByGUID": {
									"value": "@pipeline().parameters.CreatedByGUID",
									"type": "Expression"
								},
								"rp_db_name": {
									"value": "@pipeline().parameters.db_name",
									"type": "Expression"
								},
								"rp_db_server": {
									"value": "@pipeline().parameters.db_server",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T15:10:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Create Department Users Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Create User Without Sites Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Create User Locations Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Create Group Users Partitioned')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Group Users Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_group_users",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach Group User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Group User",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Group Users",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T15:09:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Create Group Users')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Group Users')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Group User",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nnewEntityUserItemId\n, newGroupId\n, newUserId\nfrom migration_group_users\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Group User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Group User",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Group User').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().newGroupId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Create Department User",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().newDepartmentId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach Group User",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup Group User').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create ITDR portalPlanType - not used')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set output portalPlanTypeId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Create or Get ITDR portalPlanTypeId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "portalPlanTypeId",
									"value": {
										"type": "Expression",
										"content": "@activity('Create or Get ITDR portalPlanTypeId').output.firstRow.portalPlanTypeId"
									}
								}
							],
							"setSystemVariable": true
						}
					},
					{
						"name": "Create or Get ITDR portalPlanTypeId",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "if not exists \n(select 1 from bcPortalPlanTypes\n where portalId = '@{pipeline().parameters.currentPortalId}'\n    and portalPlanTypeStatusTypeId = 'ab727771-44c6-4e3c-bcf7-6f7c37673aaa' /*Active*/\n    and planTypeId = 'a5a1b20b-bbce-425e-b4ef-04e065cf3288' /*Disaster Recovery*/)\nbegin\ninsert into bcPortalPlanTypes\n(\n    portalPlanTypeId,\n    portalId,\n    planTypeId,\n    portalPlanTypeStatusTypeId,\n    dateTimeCreated,\n    createdById\n)\nvalues\n(\n    NEWID(),\n    '@{pipeline().parameters.currentPortalId}',\n    'a5a1b20b-bbce-425e-b4ef-04e065cf3288', /*Disaster Recovery*/\n    'ab727771-44c6-4e3c-bcf7-6f7c37673aaa', /*Active*/\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)    \nend\n\nselect portalPlanTypeId from bcPortalPlanTypes\nwhere\nportalId = '@{pipeline().parameters.currentPortalId}'\nand portalPlanTypeStatusTypeId = 'ab727771-44c6-4e3c-bcf7-6f7c37673aaa' /*Active*/\nand planTypeId = 'a5a1b20b-bbce-425e-b4ef-04e065cf3288' /*Disaster Recovery*/",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string",
						"defaultValue": null
					}
				},
				"variables": {
					"portalPlanTypeId": {
						"type": "String"
					},
					"insertSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR/Portal Plan Technology Attachments"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Preparis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Iterations on Array')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Iterations",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "initialArray",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "iterations",
							"value": {
								"value": "@range(1, add(div(length(variables('initialArray')),\npipeline().parameters.batchSize), 1))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Iterations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('iterations')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "IterationArray",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "iterationArray",
										"value": {
											"value": "@take(skip(variables('initialArray'), mul(pipeline().parameters.batchSize,sub(item(), 1))), pipeline().parameters.batchSize)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "iterationsArray is not empty",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "IterationArray",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@empty(variables('iterationArray'))",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "processedIterations",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "processedIterations",
													"value": {
														"value": "@json(\n    concat(\n        '{',\n        'iteration: ', item(),\n        ',\n        iteration_start: ',\n            string(\n                first(\n                   variables('iterationArray')\n                )\n            ),\n        ',\n        iteration_stop: ', string(\n                last(\n                   variables('iterationArray')\n                )\n            ),\n        '}'\n    )\n)",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "iterations_array",
									"value": {
										"type": "Expression",
										"content": "@variables('processedIterations')"
									}
								}
							],
							"setSystemVariable": true
						}
					},
					{
						"name": "initialArray",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "initialArray",
							"value": {
								"value": "@range(1, length(pipeline().parameters.inputArray))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"batchSize": {
						"type": "int"
					},
					"inputArray": {
						"type": "array"
					}
				},
				"variables": {
					"iterations": {
						"type": "Array"
					},
					"processedIterations": {
						"type": "Array"
					},
					"res": {
						"type": "Array"
					},
					"iterationArray": {
						"type": "Array"
					},
					"initialArray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "common"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Portal Entities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Site Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select \r\nnewSiteId\r\n, REPLACE(REPLACE(replace(name, '''',''''''), '\\r', ''), '\\n', '') name\r\n, latitude\r\n, longitude\r\n,  REPLACE(REPLACE(replace(description, '''',''''''), '\\r', ''), '\\n', '') description\r\n, newAddressId\r\n, replace(address, '''','''''') address\r\n, replace(address2, '''','''''') address2\r\n, replace(city, '''','''''') city\r\n, replace(state, '''','''''') state\r\n, zip\r\n, replace(siteCountryName, '''','''''') siteCountryName\r\n, generalEmail\r\n, newMainNumberId\r\n, PhoneTypeSubType\r\n, mainNumber\r\n, newFaxNumberId\r\n, mainFax\r\n\r\nfrom migration_site_data;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Site",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Site Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Site Data').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append Location statement",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "location_insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityEntities]\n           ([entityId]\n           ,[entityName]\n           ,[entityTypeId]\n           ,[entityStatusTypeId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[lat]\n           ,[lng]\n           ,[timeZoneId]\n           ,[description]\n           ,[tags])\n     VALUES\n           ('@{item().newSiteId}'\n           ,'@{item().name}'\n           ,'@{variables('entityTypeId_Location')}'\n           ,'@{variables('entityStatus_Active')}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,@{item().latitude}\n           ,@{item().longitude}\n           ,NULL\n           ,SUBSTRING('@{item().description}', 0, 1000)\n           ,NULL\n        )\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append Location Address statement",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Append Location statement",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "location_address_insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityAddresses]\n           ([entityAddressId]\n           ,[entityAddressName]\n           ,[entityId]\n           ,[address1]\n           ,[address2]\n           ,[city]\n           ,[state]\n           ,[zip]\n           ,[country]\n           ,[additionalInfo]\n           ,[primaryEMail]\n           ,[secondaryEMail]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[lat]\n           ,[lng]\n           ,[url])\n     VALUES\n           ( '@{item().newAddressId}' \n           , '@{item().name}'   \n           , '@{item().newSiteId}'\n           , '@{item().address}'\n           , '@{item().address2}'\n           , '@{item().city}'\n           , '@{item().state}'\n           , '@{item().zip}'\n           , '@{item().siteCountryName}'\n           , NULL\n           , '@{item().generalEmail}'\n           , NULL\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , cast('@{item().latitude}' as float)\n           , cast('@{item().longitude}' as float)\n           , NULL\n        )\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append Location Phone statement",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Append Location Address statement",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "location_phone_insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityAddressPhoneNumbers]\n           ([entityPhoneNumberId]\n           ,[entityAddressId]\n           ,[phoneNumberTypeId]\n           ,[phoneNumberSubTypeId]\n           ,[phoneNumber]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\n     VALUES\n           ( '@{item().newMainNumberId}'\n           , '@{item().newAddressId}'\n           , '@{variables('PhoneNumberType_Main')}'\n           , '@{item().PhoneTypeSubType}'\n           , '@{item().mainNumber}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n\t),\n           ( '@{item().newFaxNumberId}'\n           , '@{item().newAddressId}'\n           , '@{variables('PhoneNumberType_Fax')}'\n           , '@{item().PhoneTypeSubType}'\n           , '@{item().mainFax}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n\t)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append EntityHierarchy statement",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Append Location Phone statement",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "entity_hierarchy_insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityHierarchy]\n           ([parentEntityId]\n           ,[childEntityId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[description])\n     VALUES\n           ('@{pipeline().parameters.PortalEntityID}'\n           ,'@{item().newSiteId}'\n\t     ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup Departments",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select \r\nnewDepartmentId\r\n,  REPLACE(REPLACE(replace(name, '''',''''''), '\\r', ''), '\\n', '') name\r\n,  REPLACE(REPLACE(replace(description, '''',''''''), '\\r', ''), '\\n', '') description\r\n from migration_department;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Department",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Departments",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Departments').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Append Department statement",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "department_insert_statements",
										"value": {
											"value": "INSERT INTO [azstudioEntityEntities]\n([entityId]\n,[entityName]\n,[entityTypeId]\n,[entityStatusTypeId]\n,[dateTimeCreated]\n,[createdById]\n,[description])\nVALUES\n('@{item().newDepartmentId}'\n,'@{item().name}'\n,'@{variables('entityTypeId_Department')}'\n,'@{variables('entityStatus_Active')}'\n,CURRENT_TIMESTAMP\n,'@{pipeline().parameters.CreatedByGUID}'\n,SUBSTRING('@{item().description}', 0, 1000)\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append Department Child statement",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Append Department statement",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "department_hierarchy_insert_statements",
										"value": {
											"value": "INSERT INTO [azstudioEntityHierarchy]\n([parentEntityId]\n,[childEntityId]\n,[dateTimeCreated]\n,[createdById])\nVALUES\n('@{pipeline().parameters.PortalEntityID}'\n,'@{item().newDepartmentId}'\n,CURRENT_TIMESTAMP\n,'@{pipeline().parameters.CreatedByGUID}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup Groups",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select\nROW_NUMBER() over (order by id) row_num\n, newGroupId\n, REPLACE(REPLACE(replace(name, '''',''''''), '\\r', ''), '\\n', '') name\n, SUBSTRING(REPLACE(REPLACE(replace(description, '''',''''''), '\\r', ''), '\\n', ''), 1, 99) description\n from migration_groups",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Group",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Groups",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Groups').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Append group statement",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "group_insert_statements",
										"value": {
											"value": "INSERT INTO [azstudioEntityEntities]\n([entityId]\n,[entityName]\n,[entityTypeId]\n,[entityStatusTypeId]\n,[dateTimeCreated]\n,[createdById]\n,[description])\nVALUES\n('@{item().newGroupId}'\n,'@{item().name}'\n,'@{variables('entityTypeId_Group')}'\n,'@{variables('entityStatus_Active')}'\n,CURRENT_TIMESTAMP\n,'@{pipeline().parameters.CreatedByGUID}'\n,SUBSTRING('@{item().description}', 0, 1000)\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append group portal hierarchy statement",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Append group statement",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "group_hierarchy_insert_statements",
										"value": {
											"value": "INSERT INTO [azstudioEntityHierarchy]\n([parentEntityId]\n,[childEntityId]\n,[dateTimeCreated]\n,[createdById]\n,[description])\n VALUES\n ('@{pipeline().parameters.PortalEntityID}'\n,'@{item().newGroupId}'\n,CURRENT_TIMESTAMP\n,'@{pipeline().parameters.CreatedByGUID}'\n,'@{item().description}')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Batch is ready",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Append group portal hierarchy statement",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(length(variables('group_insert_statements')), 50)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Reset Group Hierarchy Insert",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Insert groups entity hierarchy",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "group_hierarchy_insert_statements",
													"value": {
														"value": "@json('[]')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Insert groups entity hierarchy",
												"type": "Script",
												"dependsOn": [
													{
														"activity": "Reset Group Insert",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabase_Preparis_dev",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "@join(variables('group_hierarchy_insert_statements'), ';')",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											},
											{
												"name": "Reset Group Insert",
												"type": "SetVariable",
												"dependsOn": [
													{
														"activity": "Insert groups batch",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "group_insert_statements",
													"value": {
														"value": "@json('[]')",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Insert groups batch",
												"type": "Script",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"linkedServiceName": {
													"referenceName": "AzureSqlDatabase_Preparis_dev",
													"type": "LinkedServiceReference"
												},
												"typeProperties": {
													"scripts": [
														{
															"type": "Query",
															"text": {
																"value": "@join(variables('group_insert_statements'), ';')",
																"type": "Expression"
															}
														}
													],
													"scriptBlockExecutionTimeout": "02:00:00"
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Group Batch Is not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Group",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('group_insert_statements')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert Group Data",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('group_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Bulk Insert Group Entity Hierarchy Data",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Bulk Insert Group Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('group_hierarchy_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup Departments gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach Department",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup Departments').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert Department Data",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('department_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Bulk Insert Department Entity Hierarchy Data",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Bulk Insert Department Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('department_hierarchy_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup Site Data gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach Site",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup Site Data').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert Site Data",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('location_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Bulk Insert location_address_insert_statements",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Bulk Insert Site Data",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('location_address_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Bulk Insert location_phone_insert_statements",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Bulk Insert location_address_insert_statements",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('location_phone_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Bulk Insert entity_hierarchy_insert_statements",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Bulk Insert location_phone_insert_statements",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('entity_hierarchy_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					}
				},
				"variables": {
					"entityTypeId_Location": {
						"type": "String",
						"defaultValue": "2067409a-be15-492c-8954-9d76e8d8a140"
					},
					"entityStatus_Active": {
						"type": "String",
						"defaultValue": "4fdcaecc-b770-4202-a697-d52460223fe5"
					},
					"entityTypeId_Department": {
						"type": "String",
						"defaultValue": "dfee690c-4176-48b0-852f-8a6860459345"
					},
					"entityTypeId_Group": {
						"type": "String",
						"defaultValue": "c0df4767-bf7d-4df5-94bc-f2bf2e355e8a"
					},
					"PhoneNumberType_Fax": {
						"type": "String",
						"defaultValue": "2342506D-1F9A-4E52-8B4F-D692F3D1B3D6"
					},
					"PhoneNumberType_Main": {
						"type": "String",
						"defaultValue": "42281AF0-1F22-4AC8-B366-412E182DE359"
					},
					"location_insert_statements": {
						"type": "Array"
					},
					"department_insert_statements": {
						"type": "Array"
					},
					"group_insert_statements": {
						"type": "Array"
					},
					"location_address_insert_statements": {
						"type": "Array"
					},
					"location_phone_insert_statements": {
						"type": "Array"
					},
					"entity_hierarchy_insert_statements": {
						"type": "Array"
					},
					"group_hierarchy_insert_statements": {
						"type": "Array"
					},
					"department_hierarchy_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Portal"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T12:44:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Portal Plan Foder-not used')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get or Create Preparis Folder",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get or Create Preparis Folder",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisBaseURL": {
									"value": "@pipeline().globalParameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().globalParameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								},
								"preparisSessionToken": {
									"value": "@pipeline().parameters.preparisTokenId",
									"type": "Expression"
								},
								"entityId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"rootEntityId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"folderId": {
									"value": "@pipeline().parameters.parentFolderId",
									"type": "Expression"
								},
								"portalId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"folderName": {
									"value": "@pipeline().parameters.folderName",
									"type": "Expression"
								},
								"parentFolderId": {
									"value": "@pipeline().parameters.parentFolderId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Update Portal Plan Doc Folder Id",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Get or Create Preparis Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update \nbcPortalPlanTypes\nset documentFolderId = '@{activity('Get or Create Preparis Folder').output.pipelineReturnValue.preparisFolderGuid}'\nwhere portalId = '@{pipeline().parameters.currentPortalId}'\nand planTypeId = '@{pipeline().parameters.planTypeId}'\nand documentFolderId is null",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "pipeline output folder id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Update Portal Plan Doc Folder Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "folderId",
									"value": {
										"type": "Expression",
										"content": "@activity('Get or Create Preparis Folder').output.pipelineReturnValue.preparisFolderGuid"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					},
					"planTypeId": {
						"type": "string"
					},
					"parentFolderId": {
						"type": "string"
					},
					"folderName": {
						"type": "string"
					},
					"preparisTokenId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ITDR/Portal Plan Technology Attachments"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Get or Create Preparis Folder')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Portal Plan Technology Folder - not used')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get or Create Preparis Folder",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get or Create Preparis Folder",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisBaseURL": {
									"value": "@pipeline().globalParameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().globalParameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								},
								"preparisSessionToken": {
									"value": "@pipeline().parameters.preparisSessionToken",
									"type": "Expression"
								},
								"entityId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"rootEntityId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"folderId": {
									"value": "@pipeline().parameters.parentFolderId",
									"type": "Expression"
								},
								"portalId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"folderName": {
									"value": "@pipeline().parameters.folderName",
									"type": "Expression"
								},
								"parentFolderId": {
									"value": "@pipeline().parameters.parentFolderId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Update Portal Plan Tech Doc Folder Id",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Get or Create Preparis Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update \nbcPortalPlanRechnology\nset documentFolderId = '@{activity('Get or Create Preparis Folder').output.pipelineReturnValue.preparisFolderGuid}'\nwhere portalPlanTechnologyId = '@{pipeline().parameters.portalPlanTechnologyId}'\nand documentFolderId is null",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "pipeline output folder id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Update Portal Plan Tech Doc Folder Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "folderId",
									"value": {
										"type": "Expression",
										"content": "@activity('Get or Create Preparis Folder').output.pipelineReturnValue.preparisFolderGuid"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"preparisSessionToken": {
						"type": "string"
					},
					"currentPortalId": {
						"type": "string"
					},
					"parentFolderId": {
						"type": "string"
					},
					"folderName": {
						"type": "string"
					},
					"portalPlanTechnologyId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ITDR/Portal Plan Technology Attachments"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Get or Create Preparis Folder')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Portal configuration post migration')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create SecurityEntityModules",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "INSERT INTO [dbo].[azstudioSecurityEntityModules]\n           ([moduleId]\n           ,[entityId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\n     VALUES\n        (\n            '@{variables('Agility Risk GUID')}'\n            , '@{pipeline().parameters.PortalEntityID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n        )\n    ,   (\n            '@{variables('Agility Exercise Manager GUID')}'\n            , '@{pipeline().parameters.PortalEntityID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n        )\n    ,   (\n            '@{variables('Agility Planner GUID')}'\n            , '@{pipeline().parameters.PortalEntityID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n        )\n    ,   (\n            '@{variables('Incident Manager GUID')}'\n            , '@{pipeline().parameters.PortalEntityID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n        )",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Create Portal Industry Entry",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "INSERT INTO [dbo].[bcPortalIndustry]\n           ([portalId]\n           ,[industryId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\n     VALUES\n        (\n            '@{pipeline().parameters.PortalEntityID}'\n            , '@{variables('bcIndustry Generic GUID')}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n            , CURRENT_TIMESTAMP\n            , '@{pipeline().parameters.CreatedByGUID}'\n        )",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Lookup Site Type",
						"description": "This is actually Locations types. ",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select * from migration_site_type",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.mysql_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.mysql_db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Site Type",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Site Type",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Site Type').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Site Type",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioEntitySettings]\n           ([settingId]\n           ,[settingTypeId]\n           ,[entityId]\n           ,[userStringTypeId]\n           ,[settingValue]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\n     VALUES\n           ('@{item().newSettingId}'\n           ,'6dc816ea-8c2b-4438-b6a6-718cb6a4d824'\n           ,'@{item().newSiteId}'\n           ,'00000000-0000-0000-0000-000000000000'\n           ,'@{item().azstudioSettings_value}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n\t)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Create PortalFunctionalAreas And Processes",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create PortalFunctionalAreas And Processes",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"CompanyName": {
									"value": "@pipeline().parameters.CompanyName",
									"type": "Expression"
								},
								"PortalEntityID": {
									"value": "@pipeline().parameters.PortalEntityID",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"CompanyName": {
						"type": "string"
					},
					"mysql_db_name": {
						"type": "string"
					},
					"mysql_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"Agility Risk GUID": {
						"type": "String",
						"defaultValue": "33999ddb-70b9-47dd-9ba8-664144fd50cc"
					},
					"Agility Exercise Manager GUID": {
						"type": "String",
						"defaultValue": "aed76c86-8fa2-48e0-b6cd-abc8ffa1f50a"
					},
					"Agility Planner GUID": {
						"type": "String",
						"defaultValue": "5b4646af-d662-42af-9cde-e3f7e2c3ecb5"
					},
					"Incident Manager GUID": {
						"type": "String",
						"defaultValue": "6a55f235-61b7-40e5-bfe8-f6821309abab"
					},
					"bcIndustry Generic GUID": {
						"type": "String",
						"defaultValue": "56397415-6ac4-4c21-9101-e95158e9aac5"
					},
					"bcSite GUID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Portal"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T19:01:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]",
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Create PortalFunctionalAreas And Processes')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create PortalFunctionalAreas And Processes')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create bcSite",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Set variable bcSite GUID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "INSERT INTO [dbo].[bcSite]\n           ([siteId]\n           ,[siteName]\n           ,[portalId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[siteStatusTypeId]\n           ,[documentFolderId])\n     VALUES\n    (\n        '@{variables('bcSite GUID')}'\n        , '@{pipeline().parameters.CompanyName}'\n        , '@{pipeline().parameters.PortalEntityID}'\n        , CURRENT_TIMESTAMP\n        , '@{pipeline().globalParameters.preparisCreatedById}'\n        , CURRENT_TIMESTAMP\n        , '@{pipeline().globalParameters.preparisCreatedById}' \n        , '6D39FF0B-AFAC-45E8-BCB0-15673D70CE56'\n        , NULL\n    )",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Set variable bcSite GUID",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "bcSite GUID",
							"value": {
								"value": "@{guid()}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Lookup PortalFunctionalArea Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Create bcSite",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select \r\nportalFunctionalAreaId\r\n, replace(portalFunctionalAreaName, '''','''''') portalFunctionalAreaName\r\n, leaderUserId\r\n, replace(portalFunctionalAreaDescription, '''','''''') portalFunctionalAreaDescription\r\n, bcPortalFunctionalAreaToDepartmentId\r\n, newDepartmentId\r\nfrom migration_PortalFunctionalArea_data;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Functional Area",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup PortalFunctionalArea Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup PortalFunctionalArea Data').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create bcPortalFunctionalArea",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[bcPortalFunctionalArea]\n    ([portalFunctionalAreaId]\n    ,[portalId]\n    ,[portalFunctionalAreaName]\n    ,[functionalAreaId]\n    ,[dateTimeCreated]\n    ,[createdById]\n    ,[dateTimeLastModified]\n    ,[lastModifiedById]\n    ,[leaderUserId]\n    ,[portalFunctionalAreaStatusTypeId]\n    ,[siteId]\n    ,[documentFolderId]\n    ,[isHidden]\n    ,[portalFunctionalAreaDescription])\nSELECT\n        '@{item().portalFunctionalAreaId}' \n        ,'@{pipeline().parameters.PortalEntityID}'\n        , '@{item().portalFunctionalAreaName}'\n        , NULL\n        , CURRENT_TIMESTAMP\n        , '@{pipeline().globalParameters.preparisCreatedById}'\n        , CURRENT_TIMESTAMP\n        , '@{pipeline().globalParameters.preparisCreatedById}'\n        , NULL\n        , '5DCED3D8-305D-4D12-8558-BC4FADBFE3DE'\n        , '@{variables('bcSite GUID')}'\n        , NULL\n        , 0\n        , '@{item().portalFunctionalAreaDescription}'\n    ",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create bcPortalFunctionalAreaToDepartment",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Create bcPortalFunctionalArea",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[bcPortalFunctionalAreaToDepartment]\n           ([bcPortalFunctionalAreaToDepartmentId]\n           ,[portalFunctionalAreaId]\n           ,[departmentId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\n     VALUES\n           ('@{item().bcPortalFunctionalAreaToDepartmentId}'\n           ,'@{item().portalFunctionalAreaId}'\n           ,'@{item().newDepartmentId}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().globalParameters.preparisCreatedById}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().globalParameters.preparisCreatedById}'\n        )",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Lookup PortalProcessData",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach Functional Area",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select \nportalProcessId\n, portalFunctionalAreaId\n, substring(replace(portalProcessName, '''',''''''), 1, 200) portalProcessName\n, replace(portalProcessDescription, '''','''''') portalProcessDescription  \nfrom migration_PortalProcess_data;\n\n",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Portal Process",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup PortalProcessData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup PortalProcessData').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create bcPortalProcess",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[bcPortalProcess]\n           ([portalProcessId]\n           ,[portalFunctionalAreaId]\n           ,[processId]\n           ,[portalProcessName]\n           ,[rtoImpactTimespanId]\n           ,[portalProcessStatusTypeId]\n           ,[responsibleUserId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[documentFolderId]\n           ,[isHidden]\n           ,[mtdImpactTimespanId]\n           ,[portalProcessDescription])\nVALUES (\n        '@{item().portalProcessId}' \n        , '@{item().portalFunctionalAreaId}'\n        , NULL\n        , '@{item().portalProcessName}'\n        , NULL\n        , 'BCA9E36E-B82A-48D4-9DEF-B51A0114233E'\n        , NULL\n        , CURRENT_TIMESTAMP\n        , '@{pipeline().globalParameters.preparisCreatedById}'\n        , CURRENT_TIMESTAMP\n        , '@{pipeline().globalParameters.preparisCreatedById}'\n        , NULL\n        , 0\n        , NULL\n        , '@{item().portalProcessDescription}'\n    )",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Hide Default Functional Areas",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach Portal Process",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "insert into bcPortalFunctionalArea\n(portalFunctionalAreaId\n, portalFunctionalAreaName\n, portalId\n, functionalAreaId\n, dateTimeCreated\n, createdById\n, portalFunctionalAreaStatusTypeId\n, siteId\n, isHidden)\nselect newid()\n, fa.functionalAreaName\n, s.portalId\n, fa.functionalAreaId\n, GETUTCDATE()\n, '7b5ea827-bcd7-4a8a-8807-fc7e94a93455'\n, '5dced3d8-305d-4d12-8558-bc4fadbfe3de'\n, s.siteId\n, 1\nfrom bcSite s\n join bcPortalIndustry pi on pi.portalId = s.portalId\n join bcFunctionalArea fa on fa.industryId = pi.industryId\nwhere s.portalId = '@{pipeline().parameters.PortalEntityID}'\n and s.siteStatusTypeId = '6d39ff0b-afac-45e8-bcb0-15673d70ce56' \n and fa.functionalAreaStatusTypeId = 'aae1dff4-d206-4e72-ad0c-c64a30910d29'",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "create bcPortalPlanTypes",
						"description": "e need to create a new entry in the the bcPortalPlanTypes table for the portal you created and for the Business Continuity plan type.",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "INSERT INTO [dbo].[bcPortalPlanTypes]\n           ([portalPlanTypeId]\n           ,[portalId]\n           ,[planTypeId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[portalPlanTypeStatusTypeId])\n     VALUES\n           (NEWID()\n           ,'@{pipeline().parameters.PortalEntityID}'\n           ,'b1bac3a9-992b-4bfe-adff-72bd9bfe6db6'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().globalParameters.preparisCreatedById}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().globalParameters.preparisCreatedById}'\n           ,'ab727771-44c6-4e3c-bcf7-6f7c37673aaa')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CompanyName": {
						"type": "string"
					},
					"PortalEntityID": {
						"type": "string"
					}
				},
				"variables": {
					"bcSite GUID": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]",
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Portal_only')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreateNewPortal",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Create new EntityID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[az_ppentityCustom_CreateNewPortal]",
							"storedProcedureParameters": {
								"ParentEntityId": {
									"value": "b9a3eed5-80b2-4c11-b317-1b2ab2c006aa",
									"type": "Guid"
								},
								"CompanyName": {
									"value": {
										"value": "@pipeline().parameters.CompanyName",
										"type": "Expression"
									},
									"type": "String"
								},
								"VerticalID": {
									"value": "3089683e-a1c9-4c91-9b87-1e3888a9cfcf",
									"type": "Guid"
								},
								"PortalID": {
									"value": {
										"value": "@variables('PortalEntityID')",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Create new EntityID",
						"description": "Create the new EntityID and put into a variable that can be re-used without doing a lookup. ",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PortalEntityID",
							"value": {
								"value": "@{guid()}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Default Location ID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Default Location GUID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "LocationEntityId",
							"value": {
								"value": "@activity('Get Default Location GUID').output.firstRow.entityId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Default Location GUID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CreateNewPortal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select e.entityId\nfrom azstudioEntityEntities e \nJOIN azstudioEntityEntityTypes et on e.entityTypeId = et.entityTypeId\nJOIN azstudioEntityStatusTypes st on e.entityStatusTypeId = st.entityStatusTypeId\nwhere entityName =  '@{pipeline().parameters.CompanyName} - default location'\nand et.entityTypeName = 'Location'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CompanyName": {
						"type": "string",
						"defaultValue": "adftest6"
					}
				},
				"variables": {
					"PortalEntityID": {
						"type": "String"
					},
					"LocationEntityId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Backup"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-09T11:38:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]",
				"[concat(variables('factoryId'), '/datasets/Preparis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Post Portal and User entities')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Create User Meta Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create User Meta Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PortalEntityID": {
									"value": "@pipeline().parameters.PortalEntityID",
									"type": "Expression"
								},
								"CreatedByGUID": {
									"value": "@pipeline().globalParameters.preparisCreatedById",
									"type": "Expression"
								},
								"db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"db_server": {
									"value": "@pipeline().parameters.rp_server_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Pipeline Create Entity Users",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Entity Users",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PortalEntityID": {
									"value": "@pipeline().parameters.PortalEntityID",
									"type": "Expression"
								},
								"CreatedByGUID": {
									"value": "@pipeline().globalParameters.preparisCreatedById",
									"type": "Expression"
								},
								"db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"db_server": {
									"value": "@pipeline().parameters.rp_server_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Pipeline Create Security Modules",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Portal configuration post migration",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PortalEntityID": {
									"value": "@pipeline().parameters.PortalEntityID",
									"type": "Expression"
								},
								"CreatedByGUID": {
									"value": "@pipeline().globalParameters.preparisCreatedById",
									"type": "Expression"
								},
								"CompanyName": {
									"value": "@pipeline().parameters.company_name",
									"type": "Expression"
								},
								"mysql_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"mysql_db_server": {
									"value": "@pipeline().parameters.rp_server_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rp_server_name": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"company_name": {
						"type": "string"
					},
					"DefaultLocationId": {
						"type": "string"
					},
					"PortalEntityID": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Portal"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T19:46:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Create User Meta Data')]",
				"[concat(variables('factoryId'), '/pipelines/Create Entity Users')]",
				"[concat(variables('factoryId'), '/pipelines/Create Portal configuration post migration')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Preparis Plan Document')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Get RP Plan Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP Plan Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"rpSessionToken": {
									"value": "@pipeline().parameters.rpSessionToken",
									"type": "Expression"
								},
								"rpClientId": {
									"value": "@pipeline().parameters.rpClientId",
									"type": "Expression"
								},
								"planId": {
									"value": "@pipeline().parameters.plan_id",
									"type": "Expression"
								},
								"rpBaseURL": {
									"value": "@pipeline().parameters.rpBaseURL",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_server_name",
									"type": "Expression"
								},
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable postBody",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get RP Plan Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "postBody",
							"value": {
								"value": "@activity('Execute Pipeline Get RP Plan Data').output.pipelineReturnValue.postBody",
								"type": "Expression"
							}
						}
					},
					{
						"name": "POST PlanPrint Tester",
						"type": "WebActivity",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Set variable postBody",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json",
								"Rpxsession-Id": {
									"value": "@pipeline().parameters.rpSessionToken",
									"type": "Expression"
								},
								"Rpxclient-Id": {
									"value": "@pipeline().parameters.rpClientId",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@{pipeline().parameters.rpBaseURL}plan-print/@{pipeline().parameters.plan_id}?print-preview=false&output-format=MSWORD2007&bundled=true&draft=false",
								"type": "Expression"
							},
							"body": {
								"value": "@json(variables('postBody'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Copy Plan from RP to Blob",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "If Condition1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "POST",
									"additionalHeaders": {
										"value": "Rpxsession-Id: @{pipeline().parameters.rpSessionToken}  \nRpxclient-Id: @{pipeline().parameters.rpClientId}  \nContent-Type: application/json  ",
										"type": "Expression"
									},
									"requestBody": {
										"value": "@variables('postBody')",
										"type": "Expression"
									},
									"requestTimeout": ""
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "Binary_RecoveryPlannerPlan",
								"type": "DatasetReference",
								"parameters": {
									"BaseURL": {
										"value": "@pipeline().parameters.rpBaseURL",
										"type": "Expression"
									},
									"PlanID": {
										"value": "@{pipeline().parameters.plan_id}",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "Binary_PreparisDocument",
								"type": "DatasetReference",
								"parameters": {
									"documentIdGuid": {
										"value": "@variables('thisDocumentId')",
										"type": "Expression"
									},
									"fileName": {
										"value": "@concat(pipeline().parameters.plan_name,'.zip')",
										"type": "Expression"
									},
									"baseUrl": {
										"value": "@pipeline().globalParameters.PreparisStorageAccountBaseUrl",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Lookup existing document",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "POST PlanPrint Tester",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select documentId from ppdocsDocuments \nwhere documentName = '@{pipeline().parameters.plan_name}'\nand folderId = '@{pipeline().parameters.preparisFolderGuid}'\nand documentStateId = 'a615996c-640f-47d1-948a-4a3cb1bc7766'\nand owningAccountId = '@{pipeline().parameters.preparisUserId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Lookup existing document",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Lookup existing document').output.count,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set variable thisDocumentId",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "thisDocumentId",
										"value": {
											"value": "@{guid()}",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Set variable thisDocumentId existing",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "thisDocumentId",
										"value": {
											"value": "@activity('Lookup existing document').output.value[0].documentId",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Script create ppdocsDocumentHistory",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy Plan from RP to Blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "INSERT INTO ppdocsDocumentHistory\n    (documentHistoryId,documentId,archivedDocumentId,documentHistoryEventTypeId,additionalDetails,dateTimeCreated,createdById)\nVALUES(\n    '@{guid()}'\n    ,'@{variables('thisDocumentId')}'\n    ,'@{guid()}'\n    ,'46004597-7A44-434C-9792-5B763FDA45BD'\n    ,'Migration from Recovery Planner'\n    ,GETDATE()\n    ,'@{pipeline().parameters.preparisUserId}'\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Script Merge into ppdocsDocuments",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Script create ppdocsDocumentHistory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "IF NOT EXISTS(SELECT 1 FROM ppdocsDocuments WHERE documentId = '@{variables('thisDocumentId')}') \nBEGIN\n  INSERT INTO ppdocsDocuments\n  (documentId,documentName,documentFileName,description,documentStateId,folderId,owningAccountId,sizeInBytes,versionInfo,tagsJson,metadataJson,dateTimeCreated,createdById)\n  VALUES\n  ('@{variables('thisDocumentId')}'\n  ,'@{pipeline().parameters.plan_name}'\n  ,'@{pipeline().parameters.plan_name}.zip'\n  ,NULL\n  ,'a615996c-640f-47d1-948a-4a3cb1bc7766'\n  ,'@{pipeline().parameters.preparisFolderGuid}'\n  ,'@{pipeline().parameters.preparisUserId}'\n  ,@{activity('Copy Plan from RP to Blob').output.dataWritten}\n  ,null\n  ,NULL\n  ,NULL\n  ,CURRENT_TIMESTAMP\n  ,'@{pipeline().parameters.preparisUserId}');\nEND\nELSE\nBEGIN\n  UPDATE ppdocsDocuments\n  SET documentName = '@{pipeline().parameters.plan_name}',\n        documentFileName = '@{pipeline().parameters.plan_name}.zip',\n        description = NULL,\n        documentStateId = 'a615996c-640f-47d1-948a-4a3cb1bc7766',\n        folderId = '@{pipeline().parameters.preparisFolderGuid}',\n        owningAccountId = '@{pipeline().parameters.preparisUserId}',\n        sizeInBytes = @{activity('Copy Plan from RP to Blob').output.dataWritten},\n        versionInfo = NULL,\n        tagsJson = NULL,\n        metadataJson = NULL,\n        lastModifiedById = '@{pipeline().parameters.preparisUserId}',\n        dateTimeLastModified = CURRENT_TIMESTAMP\n  WHERE documentId = '@{variables('thisDocumentId')}'\nEND",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rpSessionToken": {
						"type": "string"
					},
					"rpClientId": {
						"type": "string"
					},
					"plan_id": {
						"type": "string"
					},
					"rpBaseURL": {
						"type": "string"
					},
					"rp_server_name": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"preparisBaseURL": {
						"type": "string"
					},
					"preparisDeviceIdAsBase64": {
						"type": "string"
					},
					"preparisSessionToken": {
						"type": "string"
					},
					"preparisCurrentPortalId": {
						"type": "string"
					},
					"plan_name": {
						"type": "string"
					},
					"preparisUserId": {
						"type": "string"
					},
					"preparisFolderGuid": {
						"type": "string"
					}
				},
				"variables": {
					"thisDocumentId": {
						"type": "String"
					},
					"postBody": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Plans"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-19T20:21:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Get RP Plan Data')]",
				"[concat(variables('factoryId'), '/datasets/Binary_RecoveryPlannerPlan')]",
				"[concat(variables('factoryId'), '/datasets/Binary_PreparisDocument')]",
				"[concat(variables('factoryId'), '/datasets/Preparis')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Preparis Portal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreateNewPortal",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Script Update Portal to deleted if it already exists",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[az_ppentityCustom_CreateNewPortal]",
							"storedProcedureParameters": {
								"ParentEntityId": {
									"value": "b9a3eed5-80b2-4c11-b317-1b2ab2c006aa",
									"type": "Guid"
								},
								"CompanyName": {
									"value": {
										"value": "@pipeline().parameters.CompanyName",
										"type": "Expression"
									},
									"type": "String"
								},
								"VerticalID": {
									"value": "3089683e-a1c9-4c91-9b87-1e3888a9cfcf",
									"type": "Guid"
								},
								"PortalID": {
									"value": {
										"value": "@pipeline().parameters.PortalEntityID",
										"type": "Expression"
									},
									"type": "Guid"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Script Update Portal to deleted if it already exists",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "with portal_exists as (\n\tSELECT e.entityId, e.entityName, e.entityTypeId, et.entityTypeName, e.entityStatusTypeId, st.entityStatusTypeName \n\tfrom  azstudioEntityEntities e\n\tJOIN azstudioEntityEntityTypes et on e.entityTypeId = et.entityTypeId\n\tJOIN azstudioEntityStatusTypes st on e.entityStatusTypeId = st.entityStatusTypeId\n\twhere e.entityName = '@{pipeline().parameters.CompanyName}'\n\tand et.entityTypeName = 'Portal'\n\tand e.entityStatusTypeId != '847EBBEF-B0C9-48A3-9891-212833DDFAC6'\n)\n\nupdate azstudioEntityEntities \nset entityStatusTypeId = '847EBBEF-B0C9-48A3-9891-212833DDFAC6'\nwhere entityId in (select entityId from portal_exists)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"CompanyName": {
						"type": "string"
					},
					"PortalEntityID": {
						"type": "string"
					}
				},
				"variables": {
					"PortalEntityID": {
						"type": "String"
					},
					"CreatedByGUID": {
						"type": "String",
						"defaultValue": "7b5ea827-bcd7-4a8a-8807-fc7e94a93455"
					},
					"DefaultLocationId": {
						"type": "String",
						"defaultValue": "0b92f0ba-1a21-43cb-995e-e2843f53a557"
					}
				},
				"folder": {
					"name": "Portal"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T19:01:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Preparis Users_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Recovery Planner Users",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach Entity RoleBundle",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select * from migration_user_data;\n",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable RecoveryPlannerUsers",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Recovery Planner Users",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RecoveryPlannerUsers",
							"value": {
								"value": "@activity('Get Recovery Planner Users').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach Recovery Planner User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set variable RecoveryPlannerUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('RecoveryPlannerUsers')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "create new SecurityUser",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioSecurityUsers]\n           ([userId]\n           ,[userName]\n           ,[passwordHash]\n           ,[userStateId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[passwordResetRequired]\n           ,[lat]\n           ,[lng]\n           ,[consecutiveFailedLoginAttempts]\n           ,[dateTimePasswordLockout]\n           ,[externalSystemId]\n           ,[timeZoneId]\n           ,[seed]\n           ,[isFullyMigrated]\n           ,[isSelfRegistered]\n           ,[dateTimePasswordLastModified])\nSELECT '@{item().newUserId}' as newUserId\n, '@{item().username}' as username\n, '@{item().password}' as password\n, case \n    when '@{item().role}' = 'LISTED' or '@{item().username}' = '' then '@{variables('userStateId_Active')}' \n    when '@{item().status}' = 'INACTIVE' then '@{variables('userStateId_inActive')}'\n    else '@{variables('userStateId_Pending')}' \n    end as userStateId\n, CURRENT_TIMESTAMP as dateTimeCreated\n, '@{pipeline().parameters.CreatedByGUID}' as createdById\n, CURRENT_TIMESTAMP as dateTimeLastModified\n, '@{pipeline().parameters.CreatedByGUID}' as lastModifiedById\n, 1 as passwordResetRequired\n, NULL as lat\n, NULL as lng\n, 0 as consecutiveFailedLoginAttempts\n, CURRENT_TIMESTAMP as dateTimePasswordLockout\n, '@{item().externalId}' as externalSystemId\n, NULL as timeZoneId\n, NULL as seed\n, NULL as isFullyMigrated\n, 0 as isSelfRegistered\n, CURRENT_TIMESTAMP as dateTimePasswordLastModified",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create EntityUser",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "create new SecurityUser",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().entityUserItemId_portal}'\n           ,'@{pipeline().parameters.PortalEntityID}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,0\n           ,NULL)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create UserProfile",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Create EntityUser",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[ppuserUserProfile]\n           ([userProfileId]\n           ,[userId]\n           ,[firstName]\n           ,[lastName]\n           ,[pin]\n           ,[title]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[floors]\n           ,[rolesChanged]\n           ,[userStringLanguageId])\n     VALUES\n           ('@{item().userProfileId}'\n           ,'@{item().newUserId}'\n           ,'@{item().firstName}'\n           ,'@{item().lastName}'\n           ,'@{item().pin}'\n           ,'@{item().title}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL\n           ,NULL)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create RoleBundleUser",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Create UserProfile",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioSecurityRoleBundleUsers]\n           ([userId]\n           ,[roleBundleId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\nSELECT \n\t'@{item().newUserId}' as userId\n    , case '@{item().role}' \n\t\twhen 'LISTED' then '@{variables('roleBundleId_MessageOnly')}'\n\t\telse '@{variables('roleBundleId_Employee')}'\n\t  end as roleBundleId\n    ,CURRENT_TIMESTAMP as dateTimeCreated\n    ,'@{pipeline().parameters.CreatedByGUID}'as createdById\n    ,CURRENT_TIMESTAMP as dateTimeLastModified\n    ,'@{pipeline().parameters.CreatedByGUID}' as lastModifiedById",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Lookup RoleBundleIds",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT e.entityId, e.entityName\n, rb.roleBundleId\n, rb.roleBundleName\nfrom  azstudioEntityEntities e\nJOIN azstudioEntityEntityTypes et on e.entityTypeId = et.entityTypeId\nJOIN azstudioEntityStatusTypes st on e.entityStatusTypeId = st.entityStatusTypeId\nJOIN azstudioSecurityRoleBundles rb on e.entityId = rb.entityId \nwhere e.entityId = '@{pipeline().parameters.PortalEntityID}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Entity RoleBundle",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup RoleBundleIds",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup RoleBundleIds').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().roleBundleName",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Employee",
												"activities": [
													{
														"name": "Set variable roleBundleId_employee",
														"type": "SetVariable",
														"dependsOn": [],
														"policy": {
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"variableName": "roleBundleId_Employee",
															"value": {
																"value": "@item().roleBundleId",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"value": "Message Only",
												"activities": [
													{
														"name": "Set variable roleBundleId_MessageOnly",
														"type": "SetVariable",
														"dependsOn": [],
														"policy": {
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"variableName": "roleBundleId_MessageOnly",
															"value": {
																"value": "@item().roleBundleId",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					}
				},
				"variables": {
					"userStateId_Active": {
						"type": "String",
						"defaultValue": "c1ff019b-b3f6-411c-b04e-59294e9090fe"
					},
					"userStateId_Pending": {
						"type": "String",
						"defaultValue": "b5d6bc28-5e6d-4bd1-b028-f7e9a6c6b7a1"
					},
					"RecoveryPlannerUsers": {
						"type": "Array"
					},
					"SelectString": {
						"type": "String"
					},
					"userStateId_inActive": {
						"type": "String",
						"defaultValue": "ffb8849c-4dc6-4c66-9d00-f93ac2ef260b"
					},
					"roleBundleId_Employee": {
						"type": "String"
					},
					"roleBundleId_MessageOnly": {
						"type": "String"
					},
					"entityStatus_Pending": {
						"type": "String",
						"defaultValue": "45df2299-cc49-4d91-9a68-a391e009dbf3"
					}
				},
				"folder": {
					"name": "Backup"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-15T15:58:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/datasets/Preparis')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Recovery Planner Sites')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Step through JSON sites",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.json_data",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set Select Statement",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "select_statement_debug",
										"value": {
											"value": "SELECT '@{json(item()).newUserId}' as newUserId",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "step1",
							"value": {
								"value": "@split(replace(replace(replace(pipeline().parameters.json_string, '[', ''),']',''),'},','}},'),'},')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"json_data": {
						"type": "array",
						"defaultValue": [
							[
								{
									"siteFax": "",
									"siteZip": null,
									"siteCity": "TBD",
									"siteName": "Test Alt Site",
									"newUserId": "83e9a761-c4fa-11ee-b23f-6045bd7c0953",
									"siteState": null,
									"siteRegion": null,
									"primarySite": 1,
									"siteAddress": "TBD",
									"siteCountry": 2,
									"siteAddress2": null,
									"siteLatitude": "",
									"siteLongitude": "",
									"siteDescription": null,
									"sitePhoneNumber": "",
									"siteGeneralEmail": null,
									"newSiteLocationId": "83ef4ff2-c4fa-11ee-b23f-6045bd7c0953"
								},
								{
									"siteFax": "",
									"siteZip": "06611",
									"siteCity": "Trumbull",
									"siteName": "Main Site (1)",
									"newUserId": "83e9a761-c4fa-11ee-b23f-6045bd7c0953",
									"siteState": "CT",
									"siteRegion": null,
									"primarySite": 1,
									"siteAddress": "101 Merritt Blvd.",
									"siteCountry": 2,
									"siteAddress2": null,
									"siteLatitude": "41.23933",
									"siteLongitude": "-73.14601",
									"siteDescription": null,
									"sitePhoneNumber": "+1 (203) 455-9990",
									"siteGeneralEmail": null,
									"newSiteLocationId": "83ef5074-c4fa-11ee-b23f-6045bd7c0953"
								}
							]
						]
					},
					"PortalEntityID": {
						"type": "string",
						"defaultValue": "1234567"
					},
					"json_string": {
						"type": "string",
						"defaultValue": "\"[{\\\"siteFax\\\": \\\"\\\", \\\"siteZip\\\": \\\"46601\\\", \\\"siteCity\\\": \\\"South Bend\\\", \\\"siteName\\\": \\\"Site B\\\", \\\"newUserId\\\": \\\"1c0166b7-c536-11ee-b23f-6045bd7c0953\\\", \\\"siteState\\\": \\\"Indiana\\\", \\\"siteRegion\\\": \\\"North America\\\", \\\"primarySite\\\": 1, \\\"siteAddress\\\": \\\"201 Chapin St\\\", \\\"siteCountry\\\": 2, \\\"siteAddress2\\\": null, \\\"siteLatitude\\\": \\\"41.6747639\\\", \\\"siteLongitude\\\": \\\"-86.2619656\\\", \\\"siteDescription\\\": null, \\\"sitePhoneNumber\\\": \\\"1 16551927\\\", \\\"siteGeneralEmail\\\": \\\"TestEmail3@aol.com\\\", \\\"newEnitiyId_Location\\\": \\\"1c034019-c536-11ee-b23f-6045bd7c0953\\\"}]\""
					}
				},
				"variables": {
					"select_statement_debug": {
						"type": "String"
					},
					"entityType_Location": {
						"type": "String",
						"defaultValue": "2067409a-be15-492c-8954-9d76e8d8a140"
					},
					"json_array": {
						"type": "Array"
					},
					"step1": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Backup"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-09T11:38:28Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Technologies Attachments List')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create technology attachments data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "documentId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "fileName",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "folderId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_itdr_technology_attachments;\r\ncreate table migration_itdr_technology_attachments\r\nas (\r\n\r\n    select\r\n    ROW_NUMBER() OVER (order by rp_technology_name) row_num,\r\n    uuid() newPortalPlanTechnologyAttachmentsId,\r\n    newPortalPlanTechnologyId,\r\n    rp_technology_name,\r\n    resource_id,\r\n    file_id,\r\n    df.newItemId,\r\n    df.name fileName,\r\n    dfr.path\r\n    from T_FILE_RESOURCE fr\r\n    join migration_itdr_technologies t on t.rp_technology_id = fr.resource_id\r\n    join migration_doc_files df on df.id = fr.file_id\r\n    join migration_doc_folders dfr on df.parent_id = dfr.id\r\n);\r\n\r\nselect count(*) num_rec from migration_itdr_technology_attachments;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy data to file",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Create technology attachments data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select \r\nrp_technology_name 'Technology Name',\r\nCONCAT(path, '\\\\', fileName) 'File Name'\r\n from migration_itdr_technology_attachments\r\n order by row_num",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DelimitedTextPreparis",
								"type": "DatasetReference",
								"parameters": {
									"baseUrl": {
										"value": "@pipeline().globalParameters.PreparisStorageAccountBaseUrl",
										"type": "Expression"
									},
									"fileName": {
										"value": "@variables('fileName')",
										"type": "Expression"
									},
									"documentIdGuid": {
										"value": "@variables('documentId')",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "documentId",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "documentId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Script Merge into ppdocsDocuments",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Copy data to file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "IF NOT EXISTS(SELECT 1 FROM ppdocsDocuments WHERE documentId = '@{variables('documentId')}') \nBEGIN\n  INSERT INTO ppdocsDocuments\n  (documentId\n  ,documentName\n  ,documentFileName\n  ,documentStateId\n  ,folderId\n  ,owningAccountId\n  ,sizeInBytes\n  ,dateTimeCreated\n  ,createdById)\n  VALUES\n  ('@{variables('documentId')}'\n  ,'@{variables('fileName')}'\n  ,'@{variables('fileName')}'\n  ,'a615996c-640f-47d1-948a-4a3cb1bc7766'\n  ,'@{variables('folderId')}'\n  ,'@{pipeline().globalParameters.preparisCreatedById}'\n  ,@{activity('Copy data to file').output.dataWritten}\n  ,CURRENT_TIMESTAMP\n  ,'@{pipeline().globalParameters.preparisCreatedById}');\nEND\nELSE\nBEGIN\n  UPDATE ppdocsDocuments\n  SET documentName = '@{variables('fileName')}',\n      documentFileName = '@{variables('fileName')}',\n        description = NULL,\n        documentStateId = 'a615996c-640f-47d1-948a-4a3cb1bc7766',\n        folderId = '@{variables('folderId')}',\n        owningAccountId = '@{pipeline().globalParameters.preparisCreatedById}',\n        sizeInBytes = @{activity('Copy data to file').output.dataWritten},\n        versionInfo = NULL,\n        tagsJson = NULL,\n        metadataJson = NULL,\n        lastModifiedById = '@{pipeline().globalParameters.preparisCreatedById}',\n        dateTimeLastModified = CURRENT_TIMESTAMP\n  WHERE documentId = '@{variables('documentId')}'\nEND",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "fileName",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "fileName",
							"value": "TechnologiesAttachments.csv"
						}
					},
					{
						"name": "Folder",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select\ndf.folderId\n from ppdocsDocumentFolders df\n join ppdocsDocumentFolders df1 on df.parentFolderId = df1.folderId and df1.folderName = 'entityRoot'\n join ppdocsEntityFolders ef on df1.folderId = ef.folderId\n where df.folderName = 'RecoveryPlanner Files'\n and entityId = '@{pipeline().parameters.currentPortalId}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "folderId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "folderId",
							"value": {
								"value": "@activity('Folder').output.firstRow.folderId",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"documentId": {
						"type": "String"
					},
					"fileName": {
						"type": "String"
					},
					"folderId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "ITDR/Portal Plan Technology Attachments"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedTextPreparis')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]",
				"[concat(variables('factoryId'), '/datasets/Preparis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Addresses Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_userAddresses",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach User Address",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Preparis UserAddresses",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create User Addresses",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:09:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Create User Addresses')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Addresses')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup UserAddresses",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nnewAddressId\n, newUserId\n, replace(line1, '''','''''') line1\n, replace(line2, '''','''''') line2\n, replace(city, '''','''''') city\n, replace(state, '''','''''') state\n, zip\n, CountryTypeId\n, latitude\n, longitude\n, userAddressTypeId\nfrom migration_userAddresses\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach UserAddress",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup UserAddresses",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup UserAddresses').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create UserAddresses",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[ppuserUserAddresses]\n           ([userAddressId]\n           ,[userId]\n           ,[userAddressTypeId]\n           ,[address1]\n           ,[address2]\n           ,[city]\n           ,[state]\n           ,[zip]\n           ,[countryTypeId]\n           ,[department]\n           ,[floor]\n           ,[additionalLocationInfo]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[lat]\n           ,[lng])\n     VALUES\n           ('@{item().newAddressId}'\n           ,'@{item().newUserId}'\n           ,'@{item().UserAddressTypeId}'\n           ,'@{item().line1}'\n           ,'@{item().line2}'\n           ,'@{item().city}'\n           ,'@{item().state}'\n           ,'@{item().zip}'\n           ,'@{item().CountryTypeId}'\n           ,NULL\n           ,NULL\n           ,NULL\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,'@{item().latitude}'\n           ,'@{item().longitude}'\n\t)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[ppuserUserAddresses]\n           ([userAddressId]\n           ,[userId]\n           ,[userAddressTypeId]\n           ,[address1]\n           ,[address2]\n           ,[city]\n           ,[state]\n           ,[zip]\n           ,[countryTypeId]\n           ,[department]\n           ,[floor]\n           ,[additionalLocationInfo]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[lat]\n           ,[lng])\n     VALUES\n           ('@{item().newAddressId}'\n           ,'@{item().newUserId}'\n           ,'@{item().UserAddressTypeId}'\n           ,'@{item().line1}'\n           ,'@{item().line2}'\n           ,'@{item().city}'\n           ,'@{item().state}'\n           ,'@{item().zip}'\n           ,'@{item().CountryTypeId}'\n           ,NULL\n           ,NULL\n           ,NULL\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,'@{item().latitude}'\n           ,'@{item().longitude}'\n\t)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach UserAddress",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup UserAddresses').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Emails Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_userEmails",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach User Address",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Preparis User Emails",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create User Emails",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:14:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Create User Emails')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Emails')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup User Emails",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nnewEmailId\n, newUserId\n, emailAddressTypeId\n, replace(email, '''','''''') email\nfrom migration_userEmails\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach User Email",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup User Emails",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup User Emails').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[ppuserEMailAddresses]\n           ([userEMailId]\n           ,[userId]\n           ,[emailTypeId]\n           ,[emailAddress]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[optOutEmail])\n     VALUES\n           ('@{item().newEmailId}'\n           ,'@{item().newUserId}'\n           ,'@{item().emailAddressTypeId}'\n           ,'@{item().email}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           ,0)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Create User Email",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[ppuserEMailAddresses]\n           ([userEMailId]\n           ,[userId]\n           ,[emailTypeId]\n           ,[emailAddress]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[optOutEmail])\n     VALUES\n           ('@{item().newEmailId}'\n           ,'@{item().newUserId}'\n           ,'@{item().emailAddressTypeId}'\n           ,'@{item().email}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           , CURRENT_TIMESTAMP\n           , '@{pipeline().parameters.CreatedByGUID}'\n           ,0)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach User Email",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup User Emails').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Locations Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_user_site_data"
							}
						}
					},
					{
						"name": "ForEach User Location",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Create User Locations",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create User Locations",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					},
					"userLocationsStatements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:55:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Create User Locations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Locations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup User Sites",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nnewEntityUserItemId\n, newSiteId\n, newUserId\n, isPrimaryRelationship\n, isManager\nfrom migration_user_site_data\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach User Site",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup User Sites",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup User Sites').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[isPrimaryRelationship])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().newSiteId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().globalParameters.preparisCreatedById}'\n           ,'@{item().isPrimaryRelationship}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach User Site",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup User Sites').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:20:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Meta Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline User Role Bundle Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create User Role Bundle Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PortalEntityID": {
									"value": "@pipeline().parameters.PortalEntityID",
									"type": "Expression"
								},
								"CreatedByGUID": {
									"value": "@pipeline().parameters.CreatedByGUID",
									"type": "Expression"
								},
								"db_name": {
									"value": "@pipeline().parameters.db_name",
									"type": "Expression"
								},
								"db_server": {
									"value": "@pipeline().parameters.db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Pipeline User Addresses Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create User Addresses Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PortalEntityID": {
									"value": "@pipeline().parameters.PortalEntityID",
									"type": "Expression"
								},
								"CreatedByGUID": {
									"value": "@pipeline().parameters.CreatedByGUID",
									"type": "Expression"
								},
								"rp_db_name": {
									"value": "@pipeline().parameters.db_name",
									"type": "Expression"
								},
								"rp_db_server": {
									"value": "@pipeline().parameters.db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Pipeline User Phone Number Partitioned_copy1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create User Phone Numbers Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PortalEntityID": {
									"value": "@pipeline().parameters.PortalEntityID",
									"type": "Expression"
								},
								"CreatedByGUID": {
									"value": "@pipeline().parameters.CreatedByGUID",
									"type": "Expression"
								},
								"rp_db_name": {
									"value": "@pipeline().parameters.db_name",
									"type": "Expression"
								},
								"rp_db_server": {
									"value": "@pipeline().parameters.db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Pipeline User Emails Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create User Emails Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PortalEntityID": {
									"value": "@pipeline().parameters.PortalEntityID",
									"type": "Expression"
								},
								"CreatedByGUID": {
									"value": "@pipeline().parameters.CreatedByGUID",
									"type": "Expression"
								},
								"rp_db_name": {
									"value": "@pipeline().parameters.db_name",
									"type": "Expression"
								},
								"rp_db_server": {
									"value": "@pipeline().parameters.db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Pipeline User Profiles Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create User Profiles Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PortalEntityID": {
									"value": "@pipeline().parameters.PortalEntityID",
									"type": "Expression"
								},
								"CreatedByGUID": {
									"value": "@pipeline().parameters.CreatedByGUID",
									"type": "Expression"
								},
								"rp_db_name": {
									"value": "@pipeline().parameters.db_name",
									"type": "Expression"
								},
								"rp_db_server": {
									"value": "@pipeline().parameters.db_server",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					}
				},
				"variables": {
					"UserPhoneNumberType_Office": {
						"type": "String",
						"defaultValue": "20509910-5326-4057-b21f-5c694b314692"
					},
					"UserPhoneNumberType_Personal": {
						"type": "String",
						"defaultValue": "5eec12d5-595f-4123-a613-c63e701ae993"
					},
					"roleBundleId_Employee": {
						"type": "String"
					},
					"roleBundleId_MessageOnly": {
						"type": "String"
					},
					"roleBundleId_ProgramManager": {
						"type": "String"
					},
					"BusinessContinuityManagerRoleId": {
						"type": "String",
						"defaultValue": "a90d9a09-75cd-44d0-8ece-a04d873520ad"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T14:54:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Create User Role Bundle Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Create User Addresses Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Create User Phone Numbers Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Create User Emails Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Create User Profiles Partitioned')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Phone Numbers Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create Phone Numbers migration tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_userPhones"
							}
						}
					},
					{
						"name": "ForEach User Phone",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Create Preparis User Phone Number",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create User Phone Numbers",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Create Phone Numbers migration tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "/*  USER PHONE NUMBERS  */\r\ndrop table if exists migration_all_userPhones;\r\n\r\ncreate table migration_all_userPhones as (\r\n    select \r\n        (select uuid()) as newPhoneId\r\n        , mud.newUserId\r\n        , mud.userId rpUserId\r\n        , ci.id as rpPhoneId\r\n        , ct.name  \r\n        , cast(AES_DECRYPT(ci.numberString, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) phoneNumber\r\n        , cast(AES_DECRYPT(ci.internationalCode, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) internationalCode\r\n        , cast(AES_DECRYPT(ci.extension, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) extension\r\n        , mcm.recoveryPlannerCountryName\r\n        , mcm.CountryTypeName\r\n        , case when mcm.CountryTypeId is NULL or mcm.CountryTypeId = '' then '2D76605B-86B5-40FF-9A71-C4893E5916FB' \r\n            else mcm.CountryTypeId\r\n            end as CountryTypeId \r\n        , case \r\n            when cic.code  != 'US' then  '8337fbb1-9a43-45eb-aafa-19c877e762fc' \r\n            else 'ffabdff8-4b2c-4655-9edc-8195c303419d' \r\n            end as 'phoneNumberSubTypeId'\r\n        /*\r\n        Follow the Preparis Mapping else follow the following logic. \r\n        Phone data, map lowest internal ID data per distribution type that has data.\r\n        rp.user.phone(Personal Distribution) = p.user.phone(Additional Personal Phone)\r\n        rp.user.phone(Business Distribution) = p.user.phone(Office Phone)\r\n\r\n\tdistributionType\r\n\t\t0 = business\r\n\t\t1 = personal\r\n\r\n    emergency - emergency contact flag. we do not need emergency contacts\r\n\r\nphoneNumberTypeId\t                    phoneNumberTypeName\r\n9da9c256-8283-4a0a-bd3d-10df73e1f43b\tSecurity\r\n391dca7b-aac3-4875-94e2-2ef680c7f35f\tAdditional Personal\r\n20509910-5326-4057-b21f-5c694b314692\tOffice\r\n5322a58a-8683-449b-a562-b0577de3fa74\tEmergency\r\n5eec12d5-595f-4123-a613-c63e701ae993\tPersonal\r\n33f27328-8fee-4835-b020-cd6d48bb39cd\tMobile\r\n \r\n        */\r\n        , case \r\n            when ct.mappedName = 'preparisOfficePhone' then '20509910-5326-4057-b21f-5c694b314692'\r\n            when ct.mappedName = 'preparisPersonalPhone' then '5eec12d5-595f-4123-a613-c63e701ae993'\r\n            when ct.mappedName = 'preparisMobilePhone' then '33f27328-8fee-4835-b020-cd6d48bb39cd'\r\n            when ct.mappedName = 'preparisAdditionalMobilePhone' then '391dca7b-aac3-4875-94e2-2ef680c7f35f'\r\n            when cm.name = 'Cell Phone' and ct.distributionType = 0 then '33f27328-8fee-4835-b020-cd6d48bb39cd'\r\n            when cm.name = 'Cell Phone' and ct.distributionType = 1 then '5eec12d5-595f-4123-a613-c63e701ae993'\r\n            when cm.name = 'PHONE' and ct.distributionType = 0 then '20509910-5326-4057-b21f-5c694b314692'\r\n            when cm.name = 'PHONE' and ct.distributionType = 1 then '391dca7b-aac3-4875-94e2-2ef680c7f35f'\r\n            end as 'phoneNumberTypeId'\r\n        , ct.mappedName\r\n        , ct.distributionType\r\n    from migration_user_data mud\r\n    LEFT JOIN T_CONTACT_INFO ci ON mud.userId = ci.owner_id\r\n    JOIN T_CONTACT_TYPE ct ON ci.contact_type_id = ct.id\r\n    JOIN T_CONTACT_METHOD cm on ct.contact_method_id = cm.id\r\n    LEFT JOIN T_COUNTRY cic on ci.country_id = cic.id\r\n    LEFT JOIN migration_country_mapping mcm on mcm.recoveryPlannerCountryName = cic.name\r\n    where cm.name in ('PHONE', 'Cell Phone') \r\n    and ci.emergency = 0\r\n);\r\n\r\ndrop table if exists migration_configuredUserPhones;\r\n\r\ncreate table migration_configuredUserPhones AS\r\n(select * from\r\n(select\r\n    ROW_NUMBER() OVER (PARTITION BY newUserId, phoneNumberTypeId order by rpPhoneId) row_num_internal\r\n    , rpPhoneId\r\n    , newPhoneId\r\n    , newUserId\r\n    , rpUserId\r\n    , name\r\n    , REPLACE(REPLACE(REPLACE(REPLACE(phoneNumber, ' ', ''), '(', ''), ')', ''), '-', '') phoneNumber\r\n    , internationalCode\r\n    , extension\r\n    , recoveryPlannerCountryName\r\n    , CountryTypeName\r\n    , CountryTypeId\r\n    , phoneNumberSubTypeId\r\n    , phoneNumberTypeId\r\nfrom migration_all_userPhones) t\r\nwhere row_num_internal = 1);\r\n\t\r\n\r\n/* 2/20/24...  When you do phone numbers for a user, create four types, regardless as to whether they have numbers for them (Mobile, Personal, Additional Personal, and Office). If there is not a number for that type, set the phonenumber to ''.*/\r\ndrop table if exists migration_UserPhones;\r\n\r\ncreate table migration_UserPhones as (\r\n        \r\n    with userConfiguredPhoneNumbers as (\r\n        select newUserId\r\n        , rpUserId\r\n        , phoneNumberTypeId\r\n        , case\r\n            when phoneNumberTypeId = '20509910-5326-4057-b21f-5c694b314692' then 'preparisOfficePhone'\r\n            when phoneNumberTypeId = '5eec12d5-595f-4123-a613-c63e701ae993' then 'preparisPersonalPhone' \r\n            when phoneNumberTypeId = '33f27328-8fee-4835-b020-cd6d48bb39cd' then 'preparisMobilePhone'\r\n            when phoneNumberTypeId = '391dca7b-aac3-4875-94e2-2ef680c7f35f' then 'preparisAdditionalMobilePhone'\r\n            END as phonenumberTypeName\r\n        , phoneNumber\r\n        , phoneNumberSubTypeId\r\n        , extension\r\n        from migration_configuredUserPhones\r\n    )\r\n    , userOfficePhoneNumbers as (\r\n        select * from userConfiguredPhoneNumbers where phonenumberTypeName = 'preparisOfficePhone'\r\n    )\r\n    , newUserOfficePhoneNumbers as (\r\n        select mud.newUserId\r\n        , mud.userId rpUserId\r\n        , '20509910-5326-4057-b21f-5c694b314692' phoneNumberTypeId\r\n        , 'preparisOfficePhone' phonenumberTypeName\r\n        , '' phoneNumber\r\n        , '8337fbb1-9a43-45eb-aafa-19c877e762fc' phoneNumberSubTypeId\r\n        , '' extension\r\n        from migration_user_data mud\r\n        left join userOfficePhoneNumbers upn on mud.newUserId = upn.newUserId\r\n        where upn.newuserid is NULL\r\n    )\r\n    , userPersonalPhoneNumbers as (\r\n        select * from userConfiguredPhoneNumbers where phonenumberTypeName = 'preparisPersonalPhone'\r\n    )\r\n    , newUserPersonalPhoneNumbers as (\r\n        select mud.newUserId\r\n        , mud.userId rpUserId\r\n        , '5eec12d5-595f-4123-a613-c63e701ae993' phoneNumberTypeId\r\n        , 'preparisPersonalPhone' phonenumberTypeName\r\n        , '' phoneNumber\r\n        , '8337fbb1-9a43-45eb-aafa-19c877e762fc' phoneNumberSubTypeId\r\n        , '' extension\r\n        from migration_user_data mud\r\n        left join userPersonalPhoneNumbers upn on mud.newUserId = upn.newUserId\r\n        where upn.newuserid is NULL\r\n    )\r\n    , userMobilePhoneNumbers as (\r\n        select * from userConfiguredPhoneNumbers where phonenumberTypeName = 'preparisMobilePhone'\r\n    )\r\n    , newUserMobilePhoneNumbers as (\r\n        select mud.newUserId\r\n        , mud.userId rpUserId\r\n        , '33f27328-8fee-4835-b020-cd6d48bb39cd' phoneNumberTypeId\r\n        , 'preparisMobilePhone' phonenumberTypeName\r\n        , '' phoneNumber\r\n        , '8337fbb1-9a43-45eb-aafa-19c877e762fc' phoneNumberSubTypeId\r\n        , '' extension\r\n        from migration_user_data mud\r\n        left join userMobilePhoneNumbers upn on mud.newUserId = upn.newUserId\r\n        where upn.newuserid is NULL\r\n    )\r\n    , userAdditionalMobilePhoneNumbers as (\r\n        select * from userConfiguredPhoneNumbers where phonenumberTypeName = 'preparisAdditionalMobilePhone'\r\n    )\r\n    , newUserAdditionalMobilePhoneNumbers as (\r\n        select mud.newUserId\r\n        , mud.userId rpUserId\r\n        , '391dca7b-aac3-4875-94e2-2ef680c7f35f' phoneNumberTypeId\r\n        , 'preparisAdditionalMobilePhone' phonenumberTypeName\r\n        , '' phoneNumber\r\n        , '8337fbb1-9a43-45eb-aafa-19c877e762fc' phoneNumberSubTypeId\r\n        , '' extension\r\n        from migration_user_data mud\r\n        left join userAdditionalMobilePhoneNumbers upn on mud.newUserId = upn.newUserId\r\n        where upn.newuserid is NULL\r\n    )\r\n    , combined_phone_data as (\r\n        select *,  (SELECT uuid()) as newPhoneId from userOfficePhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from newUserOfficePhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from userPersonalPhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from newUserPersonalPhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from userMobilePhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from newUserMobilePhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from userAdditionalMobilePhoneNumbers\r\n        UNION\r\n        select *,  (SELECT uuid()) as newPhoneId from newUserAdditionalMobilePhoneNumbers\r\n    )\r\n    select \r\n    ROW_NUMBER() OVER (ORDER BY newPhoneId) row_num\r\n    , cpd.*\r\n    from combined_phone_data cpd\r\n);\r\n\r\nselect count(*) from migration_UserPhones;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:09:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Create User Phone Numbers')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Phone Numbers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup UserPhone Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \r\nnewPhoneId\r\n, newUserId\r\n, phoneNumberTypeId\r\n, phoneNumberSubTypeId\r\n, phoneNumber\r\n, extension\r\nfrom migration_userPhones\r\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach UserPhone",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup UserPhone Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup UserPhone Data').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable Insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[ppuserPhoneNumbers]\n           ([userPhoneId]\n           ,[userId]\n           ,[phoneNumberTypeId]\n           ,[phoneNumberSubTypeId]\n           ,[phoneNumber]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[extension]\n           ,[optOutSms]\n           ,[optOutVoice]\n           ,[isSMSVerified])\n     VALUES\n           ('@{item().newPhoneId}'\n           ,'@{item().newUserId}'\n           ,'@{item().phoneNumberTypeId}'\n           ,'@{item().phoneNumberSubTypeId}'\n           ,'@{item().phoneNumber}'\n           , CURRENT_TIMESTAMP\n           ,'@{pipeline().globalParameters.preparisCreatedById}'\n           ,'@{item().extension}'\n           ,0\n           ,0\n           ,NULL\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach UserPhone",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup UserPhone Data').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"iteration_start": {
						"type": "string"
					},
					"iteration_stop": {
						"type": "string"
					}
				},
				"variables": {
					"UserPhoneNumberType_Office": {
						"type": "String",
						"defaultValue": "20509910-5326-4057-b21f-5c694b314692"
					},
					"UserPhoneNumberType_Personal": {
						"type": "String",
						"defaultValue": "5eec12d5-595f-4123-a613-c63e701ae993"
					},
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Profiles Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_user_profile",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach User Address",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create User Profiles",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create User Profiles",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:23:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Create User Profiles')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Profiles')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup User Profiles",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nuserProfileId\n, newUserId\n, replace(firstName, '''','''''') firstName\n, replace(lastName, '''','''''') lastName\n, pin\n, replace(title, '''','''''') title\nfrom migration_user_profile\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach User Email",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup User Profiles",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup User Profiles').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[ppuserUserProfile]\n           ([userProfileId]\n           ,[userId]\n           ,[firstName]\n           ,[lastName]\n           ,[pin]\n           ,[title]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[floors]\n           ,[rolesChanged]\n           ,[userStringLanguageId])\n     VALUES\n           ('@{item().userProfileId}'\n           ,'@{item().newUserId}'\n           ,'@{item().firstName}'\n           ,'@{item().lastName}'\n           ,'@{item().pin}'\n           ,'@{item().title}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL\n           ,NULL)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Create UserProfile",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[ppuserUserProfile]\n           ([userProfileId]\n           ,[userId]\n           ,[firstName]\n           ,[lastName]\n           ,[pin]\n           ,[title]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[floors]\n           ,[rolesChanged]\n           ,[userStringLanguageId])\n     VALUES\n           ('@{item().userProfileId}'\n           ,'@{item().newUserId}'\n           ,'@{item().firstName}'\n           ,'@{item().lastName}'\n           ,'@{item().pin}'\n           ,'@{item().title}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,NULL\n           ,NULL\n           ,NULL)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach User Email",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup User Profiles').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Role Bundle Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "ForEach Entity RoleBundle",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_user_roleBundle",
								"rp_db_name": {
									"value": "@pipeline().parameters.db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Preparis Users",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create User Role Bundle",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"roleBundleId_MessageOnly": {
												"value": "@variables('roleBundleId_MessageOnly')",
												"type": "Expression"
											},
											"roleBundleId_Employee": {
												"value": "@variables('roleBundleId_Employee')",
												"type": "Expression"
											},
											"roleBundleId_ProgramManager": {
												"value": "@variables('roleBundleId_ProgramManager')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Create azstudioSecurityRoleBundleRoles entry",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach User",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "INSERT INTO [dbo].[azstudioSecurityRoleBundleRoles]\n           ([roleBundleId]\n           ,[roleId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\n     VALUES\n           ('@{variables('roleBundleId_ProgramManager')}'\n           ,'@{variables('BusinessContinuityManagerRoleId')}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           )",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Lookup RoleBundleIds",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT e.entityId, e.entityName\n, rb.roleBundleId\n, rb.roleBundleName\nfrom  azstudioEntityEntities e\nJOIN azstudioEntityEntityTypes et on e.entityTypeId = et.entityTypeId\nJOIN azstudioEntityStatusTypes st on e.entityStatusTypeId = st.entityStatusTypeId\nJOIN azstudioSecurityRoleBundles rb on e.entityId = rb.entityId \nwhere e.entityId = '@{pipeline().parameters.PortalEntityID}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Entity RoleBundle",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup RoleBundleIds",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup RoleBundleIds').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch1",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@item().roleBundleName",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "Employee",
												"activities": [
													{
														"name": "Set variable roleBundleId_employee",
														"type": "SetVariable",
														"dependsOn": [],
														"policy": {
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"variableName": "roleBundleId_Employee",
															"value": {
																"value": "@item().roleBundleId",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"value": "Message Only",
												"activities": [
													{
														"name": "Set variable roleBundleId_MessageOnly",
														"type": "SetVariable",
														"dependsOn": [],
														"policy": {
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"variableName": "roleBundleId_MessageOnly",
															"value": {
																"value": "@item().roleBundleId",
																"type": "Expression"
															}
														}
													}
												]
											},
											{
												"value": "Program Manager",
												"activities": [
													{
														"name": "Set variable roleBundleId_Manager",
														"type": "SetVariable",
														"dependsOn": [],
														"policy": {
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"variableName": "roleBundleId_ProgramManager",
															"value": {
																"value": "@item().roleBundleId",
																"type": "Expression"
															}
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					}
				},
				"variables": {
					"roleBundleId_Employee": {
						"type": "String"
					},
					"roleBundleId_MessageOnly": {
						"type": "String"
					},
					"roleBundleId_ProgramManager": {
						"type": "String"
					},
					"BusinessContinuityManagerRoleId": {
						"type": "String",
						"defaultValue": "a90d9a09-75cd-44d0-8ece-a04d873520ad"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T14:55:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]",
				"[concat(variables('factoryId'), '/datasets/Preparis')]",
				"[concat(variables('factoryId'), '/pipelines/Create User Role Bundle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Role Bundle')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup UserRole",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \r\nnewUserId\r\n, role\r\nfrom migration_user_roleBundle\r\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}\r\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach UserRole",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup UserRole",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup UserRole').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create UserRoleBundle",
									"type": "Script",
									"state": "Inactive",
									"onInactiveMarkAs": "Succeeded",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioSecurityRoleBundleUsers]\n           ([userId]\n           ,[roleBundleId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\nSELECT \n\t'@{item().newUserId}' as userId\n    , case '@{item().role}' \n\t\twhen 'LISTED' then '@{variables('roleBundleId_MessageOnly')}'\n    when 'ADMIN' then '@{variables('roleBundleId_ProgramManager')}'\n\t\telse '@{variables('roleBundleId_Employee')}'\n\t  end as roleBundleId\n    ,CURRENT_TIMESTAMP as dateTimeCreated\n    ,'@{pipeline().parameters.CreatedByGUID}'as createdById\n    ,CURRENT_TIMESTAMP as dateTimeLastModified\n    ,'@{pipeline().parameters.CreatedByGUID}' as lastModifiedById",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioSecurityRoleBundleUsers]\n           ([userId]\n           ,[roleBundleId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\nSELECT \n\t'@{item().newUserId}' as userId\n    , case '@{item().role}' \n\t\twhen 'LISTED' then '@{pipeline().parameters.roleBundleId_MessageOnly}'\n    when 'ADMIN' then '@{pipeline().parameters.roleBundleId_ProgramManager}'\n\t\telse '@{pipeline().parameters.roleBundleId_Employee}'\n\t  end as roleBundleId\n    ,CURRENT_TIMESTAMP as dateTimeCreated\n    ,'@{pipeline().parameters.CreatedByGUID}'as createdById\n    ,CURRENT_TIMESTAMP as dateTimeLastModified\n    ,'@{pipeline().parameters.CreatedByGUID}' as lastModifiedById",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach UserRole",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup UserRole').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					},
					"roleBundleId_MessageOnly": {
						"type": "string"
					},
					"roleBundleId_Employee": {
						"type": "string"
					},
					"roleBundleId_ProgramManager": {
						"type": "string"
					}
				},
				"variables": {
					"UserPhoneNumberType_Office": {
						"type": "String",
						"defaultValue": "20509910-5326-4057-b21f-5c694b314692"
					},
					"UserPhoneNumberType_Personal": {
						"type": "String",
						"defaultValue": "5eec12d5-595f-4123-a613-c63e701ae993"
					},
					"BusinessContinuityManagerRoleId": {
						"type": "String",
						"defaultValue": "a90d9a09-75cd-44d0-8ece-a04d873520ad"
					},
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create User Without Sites Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_users_without_site",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach User Without Sites",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Users Without Site",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Users Without Sites",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:45:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Create Users Without Sites')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Users Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_user_data",
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_db_server",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "ForEach User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Preparis Users",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Users",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"PortalEntityID": {
												"value": "@pipeline().parameters.PortalEntityID",
												"type": "Expression"
											},
											"CreatedByGUID": {
												"value": "@pipeline().parameters.CreatedByGUID",
												"type": "Expression"
											},
											"db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"db_server": {
												"value": "@pipeline().parameters.rp_db_server",
												"type": "Expression"
											},
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					},
					"rp_db_server": {
						"type": "string"
					}
				},
				"variables": {
					"user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:09:24Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Create Users')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Users Without Sites')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Users Without Sites",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select * \nfrom migration_users_without_site\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach UserAddress",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Users Without Sites",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Users Without Sites').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().newEntityUserItemId}'\n           ,'@{item().defaultLocationId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,'@{item().isPrimaryRelationship}'\n           ,'@{item().isManager}')",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Bulk Insert",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach UserAddress",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@join(variables('insert_statements'),';')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T14:45:26Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Create Users')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Recovery Planner Users",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \n newUserId\n, replace(username, '''','''''') username\n, password\n, userStateId\n, entityUserItemId\n, employeeID\nfrom migration_user_data\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.db_server",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Recovery Planner User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Recovery Planner Users",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Recovery Planner Users').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Append variable security_user_insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "security_user_insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioSecurityUsers]\n           ([userId]\n           ,[userName]\n           ,[passwordHash]\n           ,[userStateId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[passwordResetRequired]\n           ,[lat]\n           ,[lng]\n           ,[consecutiveFailedLoginAttempts]\n           ,[dateTimePasswordLockout]\n           ,[externalSystemId]\n           ,[timeZoneId]\n           ,[seed]\n           ,[isFullyMigrated]\n           ,[isSelfRegistered]\n           ,[dateTimePasswordLastModified])\nVALUES (\n\t'@{item().newUserId}' \n\t, '@{item().username}'\n\t, ''\n\t, '@{item().userStateId}'\n\t, CURRENT_TIMESTAMP\n\t, '@{pipeline().parameters.CreatedByGUID}'\n\t, CURRENT_TIMESTAMP\n\t, '@{pipeline().parameters.CreatedByGUID}'\n\t, 1\n\t, NULL\n\t, NULL\n\t, 0 \n\t, NULL\n\t, '@{item().employeeID}' \n\t, NULL\n\t, '@{item().username}'\n\t, NULL\n\t, 0\n\t, CURRENT_TIMESTAMP\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append variable entity_user_insert_statements_copy1",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "entity_user_insert_statements",
										"value": {
											"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().entityUserItemId}'\n           ,'@{pipeline().parameters.PortalEntityID}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,CURRENT_TIMESTAMP\n           ,'@{pipeline().parameters.CreatedByGUID}'\n           ,0\n           ,NULL)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach Recovery Planner User",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Get Recovery Planner Users').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert Security Users",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('security_user_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Bulk Insert Entity Users",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Bulk Insert Security Users",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('entity_user_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string"
					},
					"CreatedByGUID": {
						"type": "string"
					},
					"db_name": {
						"type": "string"
					},
					"db_server": {
						"type": "string"
					},
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"security_user_insert_statements": {
						"type": "Array"
					},
					"entity_user_insert_statements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:16:12Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DecodeErrorMessage')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable ErrorMessage",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "errorMessage",
							"value": {
								"value": "@base64ToString(variables('errorMessageEncoded'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable ErrorMessageToUser",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable ErrorMessage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "errorMessageToUser",
							"value": {
								"value": "@base64ToString(variables('errorMessageToUserEncoded'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"errorMessageEncoded": {
						"type": "String",
						"defaultValue": "SW52YWxpZCB1c2VybmFtZSBvciBwYXNzd29yZA=="
					},
					"errorMessageToUserEncoded": {
						"type": "String",
						"defaultValue": "SW52YWxpZCB1c2VyIG5hbWUgb3IgcGFzc3dvcmQ="
					},
					"errorMessage": {
						"type": "String"
					},
					"errorMessageToUser": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Testers and Misc"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-13T10:07:39Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Doc Create Files Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": {
									"value": "@pipeline().parameters.file_table_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Doc Create Files",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Doc Create Files",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"file_table_name": {
												"value": "@pipeline().parameters.file_table_name",
												"type": "Expression"
											},
											"rpSessionToken": {
												"value": "@pipeline().parameters.rpSessionToken",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"preparisSessionToken": {
						"type": "string"
					},
					"file_table_name": {
						"type": "string"
					},
					"rpSessionToken": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Files And Images"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Doc Create Files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Doc Create Files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Iteration Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select\n newItemId\n, replace(name, '''','''''') name\n, newParentItemId\n, id\n from @{pipeline().parameters.file_table_name}\nwhere row_num between @{pipeline().parameters.iteration_start} and @{pipeline().parameters.iteration_stop};",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Iteration Data').output.value",
								"type": "Expression"
							},
							"batchCount": 10,
							"activities": [
								{
									"name": "Copy File from RP to Blob",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "Rpxsession-Id: @{pipeline().parameters.rpSessionToken}  \nRpxclient-Id: @{pipeline().globalParameters.rpClientId}  \nContent-Type: application/json  ",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Binary_RecoveryPlannerFile",
											"type": "DatasetReference",
											"parameters": {
												"BaseURL": {
													"value": "@pipeline().globalParameters.rpBaseURL",
													"type": "Expression"
												},
												"RelativeUrl": {
													"value": "@if(equals(pipeline().parameters.file_table_name, 'migration_doc_files'),\n concat('files/',item().id, '/download-file'),\n concat('image/',item().id, '/download'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Binary_PreparisDocument",
											"type": "DatasetReference",
											"parameters": {
												"documentIdGuid": {
													"value": "@item().newItemId",
													"type": "Expression"
												},
												"fileName": {
													"value": "@item().name",
													"type": "Expression"
												},
												"baseUrl": {
													"value": "@pipeline().globalParameters.PreparisStorageAccountBaseUrl",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Script Merge into ppdocsDocuments",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy File from RP to Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "IF NOT EXISTS(SELECT 1 FROM ppdocsDocuments WHERE documentId = '@{item().newItemId}') \nBEGIN\n  INSERT INTO ppdocsDocuments\n  (documentId\n  ,documentName\n  ,documentFileName\n  ,documentStateId\n  ,folderId\n  ,owningAccountId\n  ,sizeInBytes\n  ,dateTimeCreated\n  ,createdById)\n  VALUES\n  ('@{item().newItemId}'\n  ,'@{item().name}'\n  ,'@{item().name}'\n  ,'a615996c-640f-47d1-948a-4a3cb1bc7766'\n  ,'@{item().newParentItemId}'\n  ,'@{pipeline().globalParameters.preparisCreatedById}'\n  ,@{activity('Copy File from RP to Blob').output.dataWritten}\n  ,CURRENT_TIMESTAMP\n  ,'@{pipeline().globalParameters.preparisCreatedById}');\nEND\nELSE\nBEGIN\n  UPDATE ppdocsDocuments\n  SET documentName = '@{item().name}',\n      documentFileName = '@{item().name}',\n        description = NULL,\n        documentStateId = 'a615996c-640f-47d1-948a-4a3cb1bc7766',\n        folderId = '@{item().newParentItemId}',\n        owningAccountId = '@{pipeline().globalParameters.preparisCreatedById}',\n        sizeInBytes = @{activity('Copy File from RP to Blob').output.dataWritten},\n        versionInfo = NULL,\n        tagsJson = NULL,\n        metadataJson = NULL,\n        lastModifiedById = '@{pipeline().globalParameters.preparisCreatedById}',\n        dateTimeLastModified = CURRENT_TIMESTAMP\n  WHERE documentId = '@{item().newItemId}'\nEND",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					},
					"file_table_name": {
						"type": "string"
					},
					"rpSessionToken": {
						"type": "string"
					}
				},
				"variables": {
					"userLocationsStatements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Files And Images"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/datasets/Binary_RecoveryPlannerFile')]",
				"[concat(variables('factoryId'), '/datasets/Binary_PreparisDocument')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Doc Create Folders')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Folders",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Preparis Root Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select\nnewItemId,\nname,\ncase when newParentItemId is null then '@{variables('preparisRootFolderId')}' else newParentItemId end newParentItemId\nfrom @{pipeline().parameters.folderTableName}\norder by row_num",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get Preparis Root Folder",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Preparis Root Folder",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisBaseURL": {
									"value": "@pipeline().globalParameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().globalParameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								},
								"preparisSessionToken": {
									"value": "@pipeline().parameters.preparisSessionToken",
									"type": "Expression"
								},
								"preparisCurrentPortalId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"UserRootPortal": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Preparis Root Folder",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Preparis Root Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisRootFolderId",
							"value": {
								"value": "@activity('Get Preparis Root Folder').output.pipelineReturnValue.rootFolderId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Folder",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Folders').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "CreateFolder",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {
											"Content-Type": "application/json",
											"token": {
												"value": "@pipeline().parameters.preparisSessionToken",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat(pipeline().globalParameters.preparisBaseURL,'API/CreateFolder')",
											"type": "Expression"
										},
										"body": {
											"value": "{\n  \"applicationId\": \"15871a25-1ab0-4c98-9a29-0f2e076c9adc\",\n  \"versionId\": \"39fd8b5d-5151-46d7-aca1-6c9f8f4cd153\",\n  \"clientTransactionKey\": \"00000\",\n  \"deviceIdAsBase64\": \"@{pipeline().globalParameters.preparisDeviceIdAsBase64}\",\n  \"token\": \"@{pipeline().parameters.preparisSessionToken}\",\n  \"entityId\": \"@{pipeline().parameters.currentPortalId}\",\n  \"rootEntityId\": \"@{pipeline().parameters.currentPortalId}\",\n  \"portalId\": \"@{pipeline().parameters.currentPortalId}\",\n  \"createdById\": \"20247852-4d72-437a-bad5-3948cc551feb\",\n  \"lastModifiedById\": \"20247852-4d72-437a-bad5-3948cc551feb\",\n  \"folderId\": \"@{item().newItemId}\",\n  \"folderNameAsBase64\": \"@{base64(item().name)}\", \n  \"parentFolderId\": \"@{item().newParentItemId}\"\n}",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					},
					"folderTableName": {
						"type": "string"
					},
					"preparisSessionToken": {
						"type": "string"
					}
				},
				"variables": {
					"preparisRootFolderId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Files And Images"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Get Preparis Root Folder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Existing Preparis To RP Location Matcher')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Locations in Preparis",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Create Mapping Table schema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select ee.entityId locationId, \nreplace(ee.entityName, '''','''''') matcher,\ncase when CHARINDEX(' - default location', ee.entityName, 0) > 0 then 1 else 0 end isDefault\n from azstudioEntityHierarchy eh\njoin azstudioEntityEntities ee on ee.entityId = eh.childEntityId\nwhere eh.parentEntityId = '@{variables('currentPortalId')}'\nand entityTypeId = '2067409a-be15-492c-8954-9d76e8d8a140'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get PortalId By DB Name",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Portal Id By DB Name",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Set currentPortalId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get PortalId By DB Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentPortalId",
							"value": {
								"value": "@activity('Get PortalId By DB Name').output.pipelineReturnValue.currentPortalId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Preparis Location",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Locations in Preparis",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Locations in Preparis').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Insert Location",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureMySqlSource",
											"query": {
												"value": "insert into migration_preparis_locations_match\n(preparisLocationId, matchString, isDefault)\nvalues\n(\n'@{item().locationId}',\n'@{item().matcher}',\n'@{item().isDefault}'\n);\n\nselect count(*) locationCount from migration_preparis_locations_match;",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "RecoveryPlanner",
											"type": "DatasetReference",
											"parameters": {
												"db_name": {
													"value": "@pipeline().globalParameters.rp_db_name",
													"type": "Expression"
												},
												"server_name": {
													"value": "@pipeline().globalParameters.rp_server_name",
													"type": "Expression"
												}
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Create Mapping Table schema",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set currentPortalId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "DROP TABLE IF EXISTS migration_preparis_locations_match;\n CREATE TABLE migration_preparis_locations_match\n (\n    preparisLocationId NVARCHAR(38),\n    matchString NVARCHAR(1000),\n    isDefault smallint\n );\n\nselect count(*) from migration_preparis_locations_match;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"currentPortalId": {
						"type": "String"
					},
					"userLocationsStatements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Fixes For Failures"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Preparis')]",
				"[concat(variables('factoryId'), '/pipelines/Get Portal Id By DB Name')]",
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Existing Preparis To RP User Matcher Opt')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Users in Preparis",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Create Mapping Table schema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select\nROW_NUMBER() over(order by su.userId) row_num,\n su.userId, su.userName, up.firstName, up.lastName, su.externalSystemId,\nreplace(concat(isnull(su.userName, ''), isnull(up.firstName, ''), isnull(up.lastName, ''), isnull(su.externalSystemId, '')), '''','') matcher\n from azstudioSecurityUsers su\njoin azstudioEntityUsers eu on eu.userId = su.userId\njoin ppuserUserProfile up on su.userId = up.userId\nwhere eu.entityId = '@{variables('currentPortalId')}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get PortalId By DB Name",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Portal Id By DB Name",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Set currentPortalId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get PortalId By DB Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentPortalId",
							"value": {
								"value": "@activity('Get PortalId By DB Name').output.pipelineReturnValue.currentPortalId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Preparis User",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Users in Preparis",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Users in Preparis').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "insertUsersMatch",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertUsersMatch",
										"value": {
											"value": "insert into migration_preparis_users_match\n(preparisUserId, matchString, employeeId)\nvalues\n(\n'@{item().userId}',\n'@{item().matcher}',\n'@{item().externalSystemId}'\n)\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Create Mapping Table schema",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set currentPortalId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "DROP TABLE IF EXISTS migration_preparis_users_match;\n CREATE TABLE migration_preparis_users_match\n (\n   preparisUserId NVARCHAR(38),\n   matchString NVARCHAR(1000),\n   employeeId NVARCHAR(1000)\n );\n\nselect count(*) from migration_preparis_users_match;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Create Iterations on Array",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Preparis User",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Iterations on Array",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"batchSize": 500,
								"inputArray": {
									"value": "@variables('insertUsersMatch')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Create Iterations on Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Create Iterations on Array').output.pipelineReturnValue.iterations_array",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Lookup1",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Append result select",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureMySqlSource",
											"query": {
												"value": "@join(variables('iterationDataArray'), ';')",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "RecoveryPlanner",
											"type": "DatasetReference",
											"parameters": {
												"db_name": {
													"value": "@pipeline().globalParameters.rp_db_name",
													"type": "Expression"
												},
												"server_name": {
													"value": "@pipeline().globalParameters.rp_server_name",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "IterationDataArray",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "iterationDataArray",
										"value": {
											"value": "@take(skip(\r\n    variables('insertUsersMatch'),\r\n    item().iteration_start),\r\n    add(sub(item().iteration_stop, item().iteration_start), 1))",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append result select",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "IterationDataArray",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "iterationDataArray",
										"value": "select 1 as res"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"currentPortalId": {
						"type": "String"
					},
					"insertUsersMatch": {
						"type": "Array"
					},
					"iterationDataArray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Fixes For Failures"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Preparis')]",
				"[concat(variables('factoryId'), '/pipelines/Get Portal Id By DB Name')]",
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Create Iterations on Array')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get Document Migration Objects')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Get RP CompanyName",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP CompanyName",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_server_name",
									"type": "Expression"
								},
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable CompanyName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get RP CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CompanyName",
							"value": {
								"value": "@activity('Execute Pipeline Get RP CompanyName').output.pipelineReturnValue.CompanyName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable UserRootPortal",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable preparisUserId from pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "UserRootPortal",
							"value": {
								"value": "@activity('Execute Pipeline Get Preparis Session Token').output.pipelineReturnValue.currentPortalId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Get RP Session Token",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable currentPortalId from DB_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP Session Token",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"rpClientID": {
									"value": "@pipeline().parameters.rpClientId",
									"type": "Expression"
								},
								"rpUserName": {
									"value": "@pipeline().parameters.rpRestUserName",
									"type": "Expression"
								},
								"rpUserPassword": {
									"value": "@pipeline().parameters.rpRestUserPassword",
									"type": "Expression"
								},
								"rpBaseUrl": {
									"value": "@pipeline().parameters.rpBaseURL",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable rpSessionToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get RP Session Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "rpSessionToken",
							"value": {
								"value": "@activity('Execute Pipeline Get RP Session Token').output.pipelineReturnValue.rpSessionToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Get Preparis Session Token",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable currentPortalId from DB_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Preparis Session Token",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisBaseURL": {
									"value": "@pipeline().parameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().parameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable preparisSessionToken from pipeline",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get Preparis Session Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisSessionToken",
							"value": {
								"value": "@activity('Execute Pipeline Get Preparis Session Token').output.pipelineReturnValue.preparisSessionToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable preparisUserId from pipeline",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable preparisSessionToken from pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisUserId",
							"value": {
								"value": "@activity('Execute Pipeline Get Preparis Session Token').output.pipelineReturnValue.preparisUserId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Get Preparis PortalID",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Preparis Portal ID",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"companyName": {
									"value": "@variables('CompanyName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable currentPortalId from DB_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get Preparis PortalID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisCurrentPortalId",
							"value": {
								"value": "@activity('Execute Pipeline Get Preparis PortalID').output.pipelineReturnValue.portalEntityId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Get Preparis Root Folder",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable UserRootPortal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Preparis Root Folder",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisBaseURL": {
									"value": "@pipeline().parameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().parameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								},
								"preparisSessionToken": {
									"value": "@variables('preparisSessionToken')",
									"type": "Expression"
								},
								"preparisCurrentPortalId": {
									"value": "@variables('preparisCurrentPortalId')",
									"type": "Expression"
								},
								"UserRootPortal": {
									"value": "@variables('UserRootPortal')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable preparisRootFolderId_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get Preparis Root Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisRootFolderId",
							"value": {
								"value": "@activity('Execute Pipeline Get Preparis Root Folder').output.pipelineReturnValue.rootFolderId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set Return Variables",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable preparisRootFolderId_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Set variable rpSessionToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "preparisRootFolderId",
									"value": {
										"type": "Expression",
										"content": "@variables('preparisRootFolderId')"
									}
								},
								{
									"key": "preparisSessionToken",
									"value": {
										"type": "Expression",
										"content": "@variables('preparisSessionToken')"
									}
								},
								{
									"key": "preparisCurrentPortalId",
									"value": {
										"type": "Expression",
										"content": "@variables('preparisCurrentPortalId')"
									}
								},
								{
									"key": "preparisUserId",
									"value": {
										"type": "Expression",
										"content": "@variables('preparisUserId')"
									}
								},
								{
									"key": "rpSessionToken",
									"value": {
										"type": "Expression",
										"content": "@variables('rpSessionToken')"
									}
								},
								{
									"key": "rpClientId",
									"value": {
										"type": "Expression",
										"content": "@pipeline().parameters.rpClientId"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rp_db_name": {
						"type": "string"
					},
					"rp_server_name": {
						"type": "string"
					},
					"preparisBaseURL": {
						"type": "string"
					},
					"preparisDeviceIdAsBase64": {
						"type": "string"
					},
					"rpBaseURL": {
						"type": "string"
					},
					"rpRestUserName": {
						"type": "string"
					},
					"rpRestUserPassword": {
						"type": "string"
					},
					"rpClientId": {
						"type": "string"
					}
				},
				"variables": {
					"rpSessionToken": {
						"type": "String"
					},
					"preparisSessionToken": {
						"type": "String"
					},
					"preparisUserId": {
						"type": "String"
					},
					"preparisCurrentPortalId": {
						"type": "String"
					},
					"preparisRootFolderId": {
						"type": "String"
					},
					"CompanyName": {
						"type": "String"
					},
					"UserRootPortal": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Documents"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T16:44:14Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Get RP CompanyName')]",
				"[concat(variables('factoryId'), '/pipelines/Get RP Session Token')]",
				"[concat(variables('factoryId'), '/pipelines/Get Preparis Session Token')]",
				"[concat(variables('factoryId'), '/pipelines/Get Preparis Portal ID')]",
				"[concat(variables('factoryId'), '/pipelines/Get Preparis Root Folder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get Portal Id By DB Name')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Get RP CompanyName",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP CompanyName",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Set variable CompanyName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get RP CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CompanyName",
							"value": {
								"value": "@activity('Execute Pipeline Get RP CompanyName').output.pipelineReturnValue.CompanyName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Get Preparis PortalID",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Preparis Portal ID",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"companyName": {
									"value": "@variables('CompanyName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Pipeline Return value",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get Preparis PortalID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "currentPortalId",
									"value": {
										"type": "Expression",
										"content": "@activity('Execute Pipeline Get Preparis PortalID').output.pipelineReturnValue.portalEntityId"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"CompanyName": {
						"type": "String",
						"defaultValue": "''"
					}
				},
				"folder": {
					"name": "common"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Get RP CompanyName')]",
				"[concat(variables('factoryId'), '/pipelines/Get Preparis Portal ID')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get Preparis Portal ID')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Active PortalId",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select e.entityId\nfrom azstudioEntityEntities e \nJOIN azstudioEntityEntityTypes et on e.entityTypeId = et.entityTypeId\nJOIN azstudioEntityStatusTypes st on e.entityStatusTypeId = st.entityStatusTypeId\nwhere entityName =  '@{pipeline().parameters.companyName}'\nand et.entityTypeName = 'Portal'\nand st.entityStatusTypeName = 'Active'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Set variable portalEntityId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Active PortalId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "portalEntityId",
									"value": {
										"type": "Expression",
										"content": "@activity('Get Active PortalId').output.firstRow.entityId"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"companyName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "common"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-20T14:08:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Preparis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get Preparis Root Folder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Preparis Root Folder",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json",
								"token": {
									"value": "@pipeline().parameters.preparisSessionToken",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@concat(pipeline().parameters.preparisBaseURL,'API/GetEntityRootFolder')",
								"type": "Expression"
							},
							"body": {
								"value": "{\n  \"applicationId\": \"15871a25-1ab0-4c98-9a29-0f2e076c9adc\",\n  \"versionId\": \"39fd8b5d-5151-46d7-aca1-6c9f8f4cd153\",\n  \"clientTransactionKey\": \"00000\",\n  \"deviceIdAsBase64\": \"@{pipeline().parameters.preparisDeviceIdAsBase64}\",\n  \"token\": \"@{pipeline().parameters.preparisSessionToken}\",\n  \"entityId\": \"@{pipeline().parameters.preparisCurrentPortalId}\",\n  \"rootEntityId\": \"@{pipeline().parameters.UserRootPortal}\",\n  \"portalId\": \"@{pipeline().parameters.preparisCurrentPortalId}\",\n  \"createdById\": \"20247852-4d72-437a-bad5-3948cc551feb\",\n  \"lastModifiedById\": \"20247852-4d72-437a-bad5-3948cc551feb\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable rootFolderID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Preparis Root Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "rootFolderId",
									"value": {
										"type": "Expression",
										"content": "@activity('Get Preparis Root Folder').output.folder.folderId"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"preparisBaseURL": {
						"type": "string"
					},
					"preparisDeviceIdAsBase64": {
						"type": "string"
					},
					"preparisSessionToken": {
						"type": "string"
					},
					"preparisCurrentPortalId": {
						"type": "string"
					},
					"UserRootPortal": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Documents"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T19:01:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get Preparis Session Token')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Preparis Token",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set variable preparisUserPasswordEncoded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": {
								"value": "@concat(pipeline().parameters.preparisBaseURL,'API/login')",
								"type": "Expression"
							},
							"body": {
								"value": "{\n    \"applicationId\": \"15871a25-1ab0-4c98-9a29-0f2e076c9adc\",\n    \"versionId\": \"39fd8b5d-5151-46d7-aca1-6c9f8f4cd153\",\n    \"clientTransactionKey\": \"00000\",\n    \"deviceIdAsBase64\": \"@{pipeline().parameters.preparisDeviceIdAsBase64}\",\n    \"token\": null,\n    \"entityId\": null,\n    \"rootEntityId\": null,\n    \"portalId\": null,\n    \"createdById\": null,\n    \"lastModifiedById\": null,\n    \"userNameAsBase64\": \"@{variables('preparisUserEncoded')}\", \n    \"passwordAsBase64\": \"@{variables('preparisUserPasswordEncoded')}\", \n    \"referrerSiteAsBase64\": \"bG9jYWxob3N0\",\n    \"userName\": null,\n    \"password\": null,\n    \"multifactorAuthPin\": \"\",\n    \"referrerSite\": null\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable preparisUserPasswordEncoded",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set variable preparisUserEncoded",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisUserPasswordEncoded",
							"value": {
								"value": "@base64(pipeline().parameters.preparisUserPassword)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable preparisUserEncoded",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisUserEncoded",
							"value": {
								"value": "@base64(pipeline().parameters.preparisUser)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable preparisSessionToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Preparis Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "preparisSessionToken",
									"value": {
										"type": "Expression",
										"content": "@activity('Get Preparis Token').output.token"
									}
								},
								{
									"key": "preparisUserId",
									"value": {
										"type": "Expression",
										"content": "@activity('Get Preparis Token').output.userId"
									}
								},
								{
									"key": "currentPortalId",
									"value": {
										"type": "Expression",
										"content": "@activity('Get Preparis Token').output.currentPortalId"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"preparisUser": {
						"type": "string",
						"defaultValue": "migration@dispostable.com"
					},
					"preparisUserPassword": {
						"type": "string",
						"defaultValue": "Preparis123!"
					},
					"preparisBaseURL": {
						"type": "string"
					},
					"preparisDeviceIdAsBase64": {
						"type": "string"
					}
				},
				"variables": {
					"preparisUserEncoded": {
						"type": "String"
					},
					"preparisUserPasswordEncoded": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Documents"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T19:01:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get RP CompanyName')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Company Name",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "SELECT \ncase when fullName is NULL or fullName ='' \n    then REPLACE(TRIM(dbname), '''', '') \n    else REPLACE(TRIM(fullName), '''', '') end as CompanyName\nFROM T_CLIENT_NAME\nwhere dbname = '@{pipeline().globalParameters.rp_db_name}'\nand datacenter = '@{pipeline().globalParameters.rp_datacenter}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": "Common",
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Set variable CompanyName ReturnValue",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup Company Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "CompanyName",
									"value": {
										"type": "Expression",
										"content": "@activity('Lookup Company Name').output.firstRow.CompanyName"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "common"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T19:01:40Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get RP Plan Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get PlanPrint OutputOptions",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Content-Type": "application/json",
								"Rpxsession-Id": {
									"value": "@pipeline().parameters.rpSessionToken",
									"type": "Expression"
								},
								"Rpxclient-Id": {
									"value": "@pipeline().parameters.rpClientId",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@{pipeline().parameters.rpBaseURL}plan-print/@{pipeline().parameters.planId}/output-options",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable printPreviewOutputOptions",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get PlanPrint OutputOptions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "printPreviewOutputOptions",
							"value": {
								"value": "@string(activity('Get PlanPrint OutputOptions').output)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get PlanComponents",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Set variable printPreviewOutputOptions",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {
								"Content-Type": "application/json",
								"Rpxsession-Id": {
									"value": "@pipeline().parameters.rpSessionToken",
									"type": "Expression"
								},
								"Rpxclient-Id": {
									"value": "@pipeline().parameters.rpClientId",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@{pipeline().parameters.rpBaseURL}plans/@{pipeline().parameters.planId}/plan-components?show-appendices=true",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach PlanComponent",
						"type": "ForEach",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Transform Response",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Transform Response').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable nodeArray",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "nodeArray",
										"value": {
											"value": "@item().payload",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set PipelineReturnVariable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach PlanComponent",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Azure Function GeneratePlanPrintNodesDTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "postBody",
									"value": {
										"type": "Expression",
										"content": "{\n  \"planPrintNodesDTO\": @{json(activity('Azure Function GeneratePlanPrintNodesDTO').output.response)}, \n  \"printPreviewOutputOptions\":@{variables('printPreviewOutputOptions')}\n}"
									}
								}
							],
							"setSystemVariable": true
						}
					},
					{
						"name": "Create Response Table",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Get PlanComponents",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "drop table if exists migration_plan_components;\n\ncreate table migration_plan_components (\n    plan_id int UNSIGNED NOT NULL,\n    plan_component json NOT NULL\n);\n\ninsert into migration_plan_components\nselect @{pipeline().parameters.planId}\n, '@{activity('Get PlanComponents').output}';\n\n\nselect 'DONE' as table_created;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Transform Response",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Create Response Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "DROP FUNCTION IF EXISTS PlanChildJSON;\r\n\r\nCREATE FUNCTION PlanChildJSON\r\n(id INT, type VARCHAR(50), children JSON)\r\nRETURNS JSON \r\nBEGIN\r\n    DECLARE node JSON;\r\n    SET node = (select JSON_OBJECT('node', JSON_OBJECT('id', id), 'type', UPPER(type), 'children', children, 'selected', 'true'));\r\n    RETURN node;\r\nEND;\r\n\r\nSET SESSION group_concat_max_len = 1000000;\r\n\r\ndrop table if exists migration_plan_child_hierarchy;\r\n\r\ncreate table migration_plan_child_hierarchy as (\r\n    with RECURSIVE child_hierarchy as (\r\n        select \r\n        root.*\r\n        from migration_plan_components,\r\n        JSON_TABLE(plan_component , '$.children[*]' COLUMNS(\r\n            id int PATH '$.id',\r\n            type varchar(50) PATH '$.type',\r\n            children json PATH '$.children',\r\n            parent_id int PATH '$.parent.id')\r\n        ) root\r\n        where root.type != 'root_appendix'\r\n\r\n        UNION\r\n\r\n        select child.*\r\n        from child_hierarchy ch \r\n        join JSON_TABLE(children , '$[*]' COLUMNS(\r\n            id int PATH '$.id',\r\n            type varchar(50) PATH '$.type',\r\n            children json PATH '$.children',\r\n            parent_id int PATH '$.parent.id')\r\n        ) as child on child.parent_id = ch.id\r\n\r\n    )\r\n\r\n    select * from child_hierarchy\r\n);\r\n\r\n\r\nwith recursive child_hierarchy_info as (\r\n\r\n    select id, type, children, parent_id\r\n    , 2 as level \r\n    , concat(cast(parent_id as char(1000)),'.', cast(id as char(1000))) as hierarchy_string \r\n    , json_length(children)\r\n    , case when json_length(children) = 0 then PlanChildJSON(id, type, children) end as child\r\n    from migration_plan_child_hierarchy\r\n    where parent_id = (select plan_id from migration_plan_components)\r\n\r\n    union all\r\n\r\n    select pch.id, pch.type, pch.children, pch.parent_id \r\n    , rch.level + 1 as level\r\n    , concat(hierarchy_string, '.', cast(pch.id as char(10)))  as hierarchy_string \r\n    , json_length(pch.children)\r\n    , case when json_length(pch.children) = 0 then PlanChildJSON(pch.id, pch.type, pch.children) end as child\r\n    from child_hierarchy_info rch\r\n    join migration_plan_child_hierarchy pch on pch.parent_id = rch.id\r\n)\r\n, leaf_nodes as (\r\n    select * from child_hierarchy_info where child is not null order by level, parent_id\r\n)\r\n\r\n, parent_nodes as (\r\n    select * from child_hierarchy_info where child is null order by level, parent_id\r\n)\r\n\r\n\r\n, parent_node_with_child as (\r\n    select p.id, p.parent_id, p.type, l.child\r\n    from parent_nodes p\r\n    left join leaf_nodes l on p.id = l.parent_id\r\n)\r\n\r\n, child_nodes_with_children as (\r\n    select c.id child_id, PlanChildJSON(c.id, c.type, concat('[',group_concat(c.child), ']')) children \r\n    from parent_node_with_child p\r\n    join parent_node_with_child c on p.id = c.parent_id\r\n    where p.child is null\r\n    group by c.id, c.type\r\n)\r\n\r\n, painful_nodes_with_children as(\r\n    select distinct p.id, PlanChildJSON(p.id, p.type, concat('[', cnwc.children , ']')) children \r\n    from parent_node_with_child p\r\n    join parent_node_with_child c on p.id = c.parent_id\r\n    join child_nodes_with_children cnwc on cnwc.child_id = c.id\r\n)\r\n, parent_nodes_with_children as(\r\n    select pnwc.id, PlanChildJSON(pnwc.id, pnwc.type, concat('[',group_concat(pnwc.child), ']')) children \r\n    from parent_node_with_child pnwc\r\n    left join child_nodes_with_children cnwc on pnwc.id = cnwc.child_id\r\n    where pnwc.child is not null\r\n    and cnwc.child_id is null\r\n    group by pnwc.id, pnwc.type\r\n) \r\n, all_nodes_with_children as (\r\n    select * from painful_nodes_with_children\r\n    union\r\n    select * from parent_nodes_with_children\r\n)\r\n, root_nodes_without_children as (\r\n    select id, child \r\n    from leaf_nodes \r\n    where parent_id = (select plan_id from migration_plan_components)\r\n)\r\n\r\n select child as payload from root_nodes_without_children\r\n union\r\n select children as payload from all_nodes_with_children",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Azure Function GeneratePlanPrintNodesDTO",
						"type": "AzureFunctionActivity",
						"dependsOn": [
							{
								"activity": "Get PlanComponents",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"functionName": "GeneratePlanPrintNodesDTO",
							"body": {
								"value": "@activity('Get PlanComponents').output",
								"type": "Expression"
							},
							"headers": {},
							"method": "POST"
						},
						"linkedServiceName": {
							"referenceName": "AzureFunction_GeneratePlanPrintNodesDTO",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rpSessionToken": {
						"type": "string"
					},
					"rpClientId": {
						"type": "string"
					},
					"planId": {
						"type": "string"
					},
					"rpBaseURL": {
						"type": "string"
					},
					"rp_server_name": {
						"type": "string"
					},
					"rp_db_name": {
						"type": "string"
					}
				},
				"variables": {
					"printPreviewOutputOptions": {
						"type": "String"
					},
					"nodeArray": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Plans"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T18:46:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureFunction_GeneratePlanPrintNodesDTO')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get RP Session Token')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get RP Session Token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": {
								"value": "@{pipeline().globalParameters.rpBaseURL}login?client=@{pipeline().globalParameters.rpClientId}",
								"type": "Expression"
							},
							"body": {
								"value": "{\n    \"clientId\": \"@{pipeline().globalParameters.rpClientId}\",\n    \"username\": \"@{pipeline().globalParameters.rpRestUserName}\",\n    \"password\": \"@{pipeline().globalParameters.rpRestUserPassword}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable rpSessionToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get RP Session Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "rpSessionToken",
									"value": {
										"type": "Expression",
										"content": "@activity('Get RP Session Token').output.ADFWebActivityResponseHeaders['RpxSession-Id']"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Documents"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T19:01:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get Recovery Planner User data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Recovery Planner Users",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "CREATE TEMPORARY TABLE IF NOT EXISTS user_data AS (\r\nSELECT \r\n    (SELECT uuid()) as newUserId\r\n    , (SELECT uuid()) as entityUserItemId_portal\r\n    , (SELECT uuid()) as entityUserItemId_location\r\n    , (SELECT uuid()) as userProfileId\r\n    , u.id as userId\r\n    , c.name as contactName\r\n    , IFNULL(ci.email,c.name) as username\r\n    , c.firstName\r\n    , c.middleInitials\r\n    , c.lastName\r\n    , case u.role when 0 then 'SYSTEM' when 1 then 'PARTNER' when 2 THEN 'ADMIN' when 3 then 'MANAGER' when 4 then 'USER' when 5 then 'LISTED' end AS role\r\n    , case u.status when 0 then 'ACTIVE' when 1 then 'INACTIVE' when 2 then 'LOCKED' when 3 then 'TERMINATED' end AS status\r\n    , u.currentLoginAttempts\r\n    , IFNULL(u.password,'') as password\r\n    , u.passwordExpired\r\n    , u.passwordLastUpdated\r\n    , u.twoFactorAuth\r\n    , u.twoFactorAuthSecret\r\n    , u.creationdate\r\n    , u.timezone\r\n    , c.externalID\r\n    \r\n    , case \r\n        when u.timezone = 'UTC' then '8fa8449a-4be5-4b8c-9bcd-c7f378a9f438'\r\n        when u.timezone = 'JST' then '8702ab86-8acc-468d-a735-f5ab8c8de4d5'\r\n        when u.timezone in ('CST', 'America/Chicago') then '19a4144b-76bd-42fd-baa8-bb528a814884'\r\n        when u.timezone in ('EST', 'America/New_York') then 'c16ab931-6dfa-40b0-ac2a-e404e725c8b9'\r\n        else concat('TimeZone', u.timezone, ' Not Yet Mapped')\r\n        END  as timeZoneId\r\n        \r\n    , ci.pin\r\n    , u.title\r\n\r\n    , case u.LANGUAGE when 0 then  'BROWSER_LOCALE'\r\n        when 1 then 'ENGLISH'\r\n        when 2 then 'PORTUGUESE_BRAZIL'\r\n        when 3 then 'SPANISH_DOMINICAN_REP'\r\n        when 4 then 'SPANISH_MEXICAN'\r\n        when 5 then 'FRENCH'\r\n        when 6 then 'RUSSIAN'\r\n       end\r\n       as Language_String\r\n\r\nFROM T_CONTACT c\r\nLEFT JOIN T_USER u ON c.id = u.id\r\nleft JOIN T_CONTACT_INFO ci ON c.id = ci.owner_id and ci.primaryEmail = 1\r\n);\r\n\r\nCREATE TEMPORARY TABLE IF NOT EXISTS user_site_data AS (\r\n    select ud.newUserId, ud.contactName, ud.username, ud.userId, s.*\r\n    from User_data ud\r\n    JOIN T_USER_SITE us ON ud.userId = us.user_id\r\n    JOIN T_SITE s on us.site_id = s.id\r\n);\r\n\r\nCREATE TEMPORARY TABLE IF NOT EXISTS user_site_json_data AS(\r\nselect newUserId\r\n, JSON_ARRAYAGG(JSON_OBJECT(\r\n    'newEnitiyId_Location', (SELECT uuid())\r\n    , 'siteName', usd.name\r\n    , 'siteAddress', usd.address\r\n    , 'siteAddress2', usd.address2\r\n    , 'siteCity', usd.city\r\n    , 'siteState', usd.state\r\n    , 'siteZip', usd.zip\r\n    , 'siteDescription', usd.description\r\n    , 'siteGeneralEmail', usd.generalEmail\r\n    , 'siteLatitude', usd.latitude\r\n    , 'siteLongitude', usd.longitude\r\n    , 'siteFax', usd.mainFax\r\n    , 'sitePhoneNumber', usd.mainNumber\r\n    , 'primarySite', usd.primarySite\r\n    , 'siteRegion', usd.region\r\n    , 'siteCountry', usd.country_id\r\n    )) as user_site_json\r\nfrom user_site_data usd\r\ngroup by newUserId\r\n);\r\n\r\nselect ud.*, jd.user_site_json\r\nfrom user_data ud\r\njoin user_site_json_data jd on ud.newUserId = jd.newUserID\r\n",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable RecoveryPlannerUsers",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Recovery Planner Users",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RecoveryPlannerUsers",
							"value": {
								"value": "@activity('Get Recovery Planner Users').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"RecoveryPlannerUsers": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Backup"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-15T15:58:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Get or Create Preparis Folder')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Preparis Folder Status",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json",
								"token": {
									"value": "@pipeline().parameters.preparisSessionToken",
									"type": "Expression"
								}
							},
							"url": {
								"value": "@concat(pipeline().parameters.preparisBaseURL,'API/CheckFolderStatus')",
								"type": "Expression"
							},
							"body": {
								"value": "{\n  \"applicationId\": \"15871a25-1ab0-4c98-9a29-0f2e076c9adc\",\n  \"versionId\": \"39fd8b5d-5151-46d7-aca1-6c9f8f4cd153\",\n  \"clientTransactionKey\": \"00000\",\n  \"deviceIdAsBase64\": \"@{pipeline().parameters.preparisDeviceIdAsBase64}\",\n  \"token\": \"@{pipeline().parameters.preparisSessionToken}\",\n  \"entityId\": \"@{pipeline().parameters.entityId}\",\n  \"rootEntityId\": \"@{pipeline().parameters.rootEntityId}\",\n  \"portalId\": \"@{pipeline().parameters.portalId}\",\n  \"createdById\": \"20247852-4d72-437a-bad5-3948cc551feb\",\n  \"lastModifiedById\": \"20247852-4d72-437a-bad5-3948cc551feb\",\n  \"folderName\": \"@{pipeline().parameters.folderName}\",\n  \"folderId\": \"@{pipeline().parameters.folderId}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Folder Does Not Exist",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Preparis Folder Status",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(activity('Get Preparis Folder Status').output.folderStatus,0)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set variable preparisFolderGuid whenFolderExists",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "preparisFolderGuid",
										"value": {
											"value": "@activity('Get Preparis Folder Status').output.folder.folderId",
											"type": "Expression"
										}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Create Preparis Folder",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable folderNameEncoded_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {
											"Content-Type": "application/json",
											"token": {
												"value": "@pipeline().parameters.preparisSessionToken",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@concat(pipeline().parameters.preparisBaseURL,'API/CreateFolder')",
											"type": "Expression"
										},
										"body": {
											"value": "{\n  \"applicationId\": \"15871a25-1ab0-4c98-9a29-0f2e076c9adc\",\n  \"versionId\": \"39fd8b5d-5151-46d7-aca1-6c9f8f4cd153\",\n  \"clientTransactionKey\": \"00000\",\n  \"deviceIdAsBase64\": \"@{pipeline().parameters.preparisDeviceIdAsBase64}\",\n  \"token\": \"@{pipeline().parameters.preparisSessionToken}\",\n  \"entityId\": \"@{pipeline().parameters.entityId}\",\n  \"rootEntityId\": \"@{pipeline().parameters.rootEntityId}\",\n  \"portalId\": \"@{pipeline().parameters.portalId}\",\n  \"createdById\": \"20247852-4d72-437a-bad5-3948cc551feb\",\n  \"lastModifiedById\": \"20247852-4d72-437a-bad5-3948cc551feb\",\n  \"folderId\": \"@{variables('preparisFolderGuid')}\",\n  \"folderNameAsBase64\": \"@{variables('preparisFolderNameEncoded')}\", \n  \"parentFolderId\": \"@{pipeline().parameters.parentFolderId}\"\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable preparisFolderGuid",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "preparisFolderGuid",
										"value": {
											"value": "@{guid()}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable folderNameEncoded_copy1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set variable preparisFolderGuid",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "preparisFolderNameEncoded",
										"value": {
											"value": "@base64(pipeline().parameters.folderName)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set Pipeline Return Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "If Folder Does Not Exist",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "preparisFolderGuid",
									"value": {
										"type": "Expression",
										"content": "@variables('preparisFolderGuid')"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"preparisBaseURL": {
						"type": "string"
					},
					"preparisDeviceIdAsBase64": {
						"type": "string"
					},
					"preparisSessionToken": {
						"type": "string"
					},
					"entityId": {
						"type": "string"
					},
					"rootEntityId": {
						"type": "string"
					},
					"folderId": {
						"type": "string"
					},
					"portalId": {
						"type": "string"
					},
					"folderName": {
						"type": "string"
					},
					"parentFolderId": {
						"type": "string"
					}
				},
				"variables": {
					"preparisFolderGuid": {
						"type": "String"
					},
					"preparisFolderNameEncoded": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Documents"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T19:01:40Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GetIterations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Iteration 0",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Iteration Stop",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Iteration Index",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Iteration start 0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "iterations",
							"value": {
								"value": "{\n    \"iteration_start\": @{variables('iteration_start')},\n    \"iteration_stop\": @{variables('iteration_stop')},\n    \"iteration_index\": 0\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Number of loops",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "New number for loops",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "numOfLoops",
							"value": {
								"value": "@sub(div(variables('currentNumber'), pipeline().parameters.batchSize), 1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "New number for loops",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Iteration Start 1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentNumber",
							"value": {
								"value": "@sub(pipeline().parameters.number, mod(pipeline().parameters.number, pipeline().parameters.batchSize))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Iteration start 0",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "iteration_start",
							"value": 1
						}
					},
					{
						"name": "Iteration Stop",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "iteration_stop",
							"value": {
								"value": "@mod(pipeline().parameters.number, pipeline().parameters.batchSize)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Iteration Start 1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Iteration 0",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "iteration_start",
							"value": {
								"value": "@add(variables('iteration_stop'), 1)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [
							{
								"activity": "Number of loops",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('iterations')), variables('numOfLoops'))",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable3",
									"type": "AppendVariable",
									"dependsOn": [
										{
											"activity": "Iteration stop 1",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Iteration Index 1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "iterations",
										"value": {
											"value": "{\n    \"iteration_start\": @{variables('iteration_start')},\n    \"iteration_stop\": @{variables('iteration_stop')},\n    \"iteration_index\": @{variables('iteration_index')}\n}",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Iteration stop 1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "iteration_stop",
										"value": {
											"value": "@add(variables('iteration_start'), pipeline().parameters.batchSize)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable3",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Append variable3",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "iteration_start",
										"value": {
											"value": "@add(variables('iteration_stop'), 1)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Iteration Index 1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "iteration_index",
										"value": {
											"value": "@length(variables('iterations'))",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					},
					{
						"name": "Test result",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Until1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "iterations",
									"value": {
										"type": "Expression",
										"content": "@variables('iterations')"
									}
								}
							],
							"setSystemVariable": true
						}
					},
					{
						"name": "Iteration Index",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "iteration_index",
							"value": {
								"value": "@length(variables('iterations'))",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"number": {
						"type": "int"
					},
					"batchSize": {
						"type": "int"
					}
				},
				"variables": {
					"iterations": {
						"type": "Array"
					},
					"numOfLoops": {
						"type": "Integer"
					},
					"iteration_start": {
						"type": "Integer"
					},
					"currentNumber": {
						"type": "Integer"
					},
					"iteration_stop": {
						"type": "Integer"
					},
					"iteration_index": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "common"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ITDR Technology Files - not used')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create Portal Plan Folder",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Get Preparis Root Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Portal Plan Foder-not used",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"planTypeId": {
									"value": "@pipeline().parameters.planTypeId",
									"type": "Expression"
								},
								"parentFolderId": {
									"value": "@activity('Get Preparis Root Folder').output.pipelineReturnValue.rootFolderId",
									"type": "Expression"
								},
								"folderName": {
									"value": "@pipeline().parameters.folderName",
									"type": "Expression"
								},
								"preparisTokenId": {
									"value": "@activity('Generate Preparis Token').output.pipelineReturnValue.preparisSessionToken",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Generate Preparis Token",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Preparis Session Token",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisBaseURL": {
									"value": "@pipeline().globalParameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().globalParameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get Preparis Root Folder",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Generate Preparis Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Preparis Root Folder",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisBaseURL": {
									"value": "@pipeline().globalParameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().globalParameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								},
								"preparisSessionToken": {
									"value": "@activity('Generate Preparis Token').output.pipelineReturnValue.preparisSessionToken",
									"type": "Expression"
								},
								"preparisCurrentPortalId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"UserRootPortal": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Create attachments data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Create Portal Plan Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_itdr_attachments;\r\ncreate table migration_itdr_attachments\r\nas (\r\nselect\r\nROW_NUMBER() OVER (order by resource_id) row_num,\r\nuuid() newPortalPlanTechnologyAttachmentsId,\r\nnewPortalPlanTechnologyId,\r\nrp_technology_name,\r\nresource_id,\r\nfile_id,\r\ndf.newItemId\r\n from T_FILE_RESOURCE fr\r\n join migration_itdr_technologies t on t.rp_technology_id = fr.resource_id\r\n join migration_doc_files df on df.id = fr.file_id\r\n);\r\n\r\nselect count(*) from migration_itdr_attachments;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Migrate Portal Plan Tech Attachments Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create attachments data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Migrate Portal Plan Technologies Attachments Partitioned - not used",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@pipeline().parameters.currentPortalId",
									"type": "Expression"
								},
								"portalPlanDocumentFolderId": {
									"value": "@activity('Create Portal Plan Folder').output.pipelineReturnValue.preparisFolderGuid",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					},
					"planTypeId": {
						"type": "string"
					},
					"folderName": {
						"type": "string",
						"defaultValue": "Disaster Recovery Planner"
					}
				},
				"variables": {
					"insertSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR/Portal Plan Technology Attachments"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Create Portal Plan Foder-not used')]",
				"[concat(variables('factoryId'), '/pipelines/Get Preparis Session Token')]",
				"[concat(variables('factoryId'), '/pipelines/Get Preparis Root Folder')]",
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate Portal Plan Technologies Attachments Partitioned - not used')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookup Iteration Data')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup iteration Data Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "with recursive iteration_data as (\n    select 1 iteration_start\n    , case when max(row_num) > 5000 then 5000 else max(row_num) end as iteration_stop\n    , 1 iteration \n    , max(row_num) max_row_num\n    from @{pipeline().parameters.tableName}\n    union all\n    select id.iteration_start + 5000\n    , case when id.max_row_num > id.iteration_start + (5000 * (id.iteration + 1)) then id.iteration_start -1 + (5000 * (id.iteration + 1)) else id.max_row_num end as iteration_stop\n    , id.iteration + 1\n    , id.max_row_num\n    from iteration_data id\n    inner join @{pipeline().parameters.tableName} ds on ds.row_num = id.iteration_start\n    \n)\n\nselect * from iteration_data where iteration_start <= max_row_num;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set Pipeline result set",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup iteration Data Details",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "pipelineReturnValue",
							"value": [
								{
									"key": "iteration_data_array",
									"value": {
										"type": "Expression",
										"content": "@activity('Lookup iteration Data Details').output.value"
									}
								}
							],
							"setSystemVariable": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"tableName": {
						"type": "string",
						"defaultValue": "migration_user_data"
					}
				},
				"folder": {
					"name": "common"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T11:56:04Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Lookup results tester')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup RP Events",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select documentId from ppdocsDocuments \nwhere documentName = 'Test RPX dne'\nand folderId = '65a2a94a-8d9f-462c-8f0f-e4b97709b67a'\nand documentStateId = 'a615996c-640f-47d1-948a-4a3cb1bc7766'\nand owningAccountId = 'd73532f5-55d9-4bea-99d9-389c25ac725a'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rp_db_name": {
						"type": "string",
						"defaultValue": "afsvision"
					},
					"rp_server_name": {
						"type": "string",
						"defaultValue": "recovery-planner-mysql-server.mysql.database.azure.com"
					}
				},
				"folder": {
					"name": "Testers and Misc"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-13T10:02:51Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Preparis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR TaskSet Members Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Iterations for TaskSet Tasks",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_itdr_task_set_members"
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Iterations for TaskSet Tasks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Iterations for TaskSet Tasks').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Migrate ITDR TaskSet Members",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate ITDR TaskSet Members",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"membersSQL": {
						"type": "Array"
					},
					"teamsSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate ITDR TaskSet Members')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR TaskSet Members')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Memebrs For Iteration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select\nnewPortalPlanTechnologyTaskSetMemberId,\nnewPortalPlanTechnologyTaskSetId,\nnewUserId\nfrom migration_itdr_task_set_members\nwhere row_num between\n@{pipeline().parameters.iteration_start}\nand @{pipeline().parameters.iteration_stop}\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Member",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Memebrs For Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Memebrs For Iteration').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "member script",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "membersSQL",
										"value": {
											"value": "insert into bcPortalPlanTechnologyTaskSetMember\n(\n    portalPlanTechnologyTaskSetMemberId,\n    portalPlanTechnologyTaskSetId,\n    memberUserId,\n    dateTimeCreated,\n    createdById\n)\nvalues\n(\n    '@{item().newPortalPlanTechnologyTaskSetMemberId}',\n    '@{item().newPortalPlanTechnologyTaskSetId}',\n    '@{item().newUserId}',\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Memebers not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Member",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('membersSQL')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Insert Members",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('membersSQL'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"membersSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR TaskSet Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup iteration data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_itdr_task_sets"
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup iteration data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup iteration data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Migrate ITDR TaskSet",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate ITDR TaskSet",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"taskSetInsertSql": {
						"type": "Array"
					},
					"membersSQL": {
						"type": "Array"
					},
					"teamsSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate ITDR TaskSet')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR TaskSet Tasks Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Task Iterations",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_itdr_task_set_tasks"
							}
						}
					},
					{
						"name": "Task Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Task Iterations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Task Iterations').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Migrate ITDR TaskSet Tasks",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate ITDR TaskSet Tasks",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Update TaskSet Task Sort Order",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Task Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update task\nset task.sequenceNumber = sortOrder.row_num\nfrom bcPortalPlanTechnologyTask task\njoin \n(select \nROW_NUMBER() OVER(PARTITION BY portalPlanTechnologyTaskSetId order by sortHierKey) row_num,\nt.portalPlanTechnologyTaskId\n from\n(select\nCAST(CONCAT('/', TRIM(REPLACE(SUBSTRING(tt.portalPlanTechnologyTaskName, 0, PATINDEX('% - %', tt.portalPlanTechnologyTaskName)), '.', '/')), '/') as hierarchyid)sortHierKey,\ntt.portalPlanTechnologyTaskId,\ntt.portalPlanTechnologyTaskSetId\n from bcPortalPlanTechnologyTask tt\njoin bcPortalPlanTechnologyTaskSet ts on tt.portalPlanTechnologyTaskSetId = ts.portalPlanTechnologyTaskSetId\njoin bcPortalPlanTechnology ppt on ts.portalPlanTechnologyId = ppt.portalPlanTechnologyId\nwhere ppt.portalId = '@{pipeline().parameters.currentPortalId}') t) sortOrder on task.portalPlanTechnologyTaskId = sortOrder.portalPlanTechnologyTaskId",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"teamsSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate ITDR TaskSet Tasks')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR TaskSet Tasks')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Iteration TaskSet Tasks",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select\nnewPortalPlanTechnologyTaskSetId,\nnewPortalPlanTechnologyTaskId,\nconcat(tp, ' - ', replace(task_name, '''','''''')) task_name,\n0 sequence_num\nfrom migration_itdr_task_set_tasks t\nwhere row_num between\n@{pipeline().parameters.iteration_start}\nand @{pipeline().parameters.iteration_stop}\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TaskSet Tasks Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Iteration TaskSet Tasks",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Iteration TaskSet Tasks').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "teamsSQL",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "teamsSQL",
										"value": {
											"value": "insert into bcPortalPlanTechnologyTask\n(\n    portalPlanTechnologyTaskId,\n    portalPlanTechnologyTaskName,\n    portalPlanTechnologyTaskSetId,\n    portalPlanTechnologyTaskStatusTypeId,\n    sequenceNumber,\n    dateTimeCreated,\n    createdById\n)\nvalues\n(\n    '@{item().newPortalPlanTechnologyTaskId}',\n    '@{item().task_name}',\n    '@{item().newPortalPlanTechnologyTaskSetId}',\n    '15d5a9e6-947b-46e0-81f7-2288c043b9ed', /*Active*/\n    @{item().sequence_num},\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Tasks not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "TaskSet Tasks Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('teamsSQL')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Insert Teams",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('teamsSQL'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"teamsSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR TaskSet')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TaskSets for iteration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nnewPortalPlanTechnologyTaskSetId,\nteam_name,\nnewPortalPlanTechnologyId,\nsequence_number\nfrom migration_itdr_task_sets\nwhere row_num between\n@{pipeline().parameters.iteration_start}\nand @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "TaskSet",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "TaskSets for iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('TaskSets for iteration').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "taskSetInsertSql",
										"value": {
											"value": "insert into bcPortalPlanTechnologyTaskSet\n(portalPlanTechnologyTaskSetId,\n portalPlanTechnologyTaskSetName,\n portalPlanTechnologyId,\n sequenceNumber,\n portalPlanTechnologyTaskSetStatusTypeId,\n dateTimeCreated,\n createdById)\n values\n (\n    '@{item().newPortalPlanTechnologyTaskSetId}',\n    '@{item().team_name}',\n    '@{item().newPortalPlanTechnologyId}',\n    @{item().sequence_number},\n    'd69f84a6-c949-45ae-ae33-4c05d9283d3d', /*Active*/\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n )",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Task Sets not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "TaskSet",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('taskSetInsertSql')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Insert Task Sets",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('taskSetInsertSql'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"taskSetInsertSql": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR Technologies Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup iteration data",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_itdr_technologies"
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup iteration data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup iteration data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Migrate ITDR Technology",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate ITDR Technologies",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"currentPortalId": {
												"value": "@pipeline().parameters.currentPortalId",
												"type": "Expression"
											},
											"iterationStart": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iterationStop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"portalPlanTypeId": {
												"value": "@pipeline().parameters.portalPlanTypeId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					},
					"portalPlanTypeId": {
						"type": "string"
					}
				},
				"variables": {
					"taskSetInsertSql": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate ITDR Technologies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR Technologies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ITDR Technologies",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select * \nfrom migration_itdr_technologies\nwhere row_num between \n@{pipeline().parameters.iterationStart} and\n@{pipeline().parameters.iterationStop}\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ITDR Technology",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ITDR Technologies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ITDR Technologies').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Insert SQL",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertSQL",
										"value": {
											"value": "insert into bcPortalPlanTechnology\n(\n    portalPlanTechnologyId,\n    portalId,\n    portalPlanTypeId,\n    technologyId,\n    technologyStatusTypeId,\n    dateTimeCreated,\n    createdById\n)\nvalues\n(\n    '@{item().newPortalPlanTechnologyId}',\n    '@{pipeline().parameters.currentPortalId}',\n    '@{pipeline().parameters.portalPlanTypeId}',\n    '@{item().technologyId}',\n    '9255219c-a219-4f5b-9ab2-130289fdbb92', /*Active*/\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "insertSQL not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ITDR Technology",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insertSQL')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Insert ITDR Techs",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insertSQL'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					},
					"iterationStart": {
						"type": "int"
					},
					"iterationStop": {
						"type": "int"
					},
					"portalPlanTypeId": {
						"type": "string"
					}
				},
				"variables": {
					"insertSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR Technology Dependencies Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup iteration data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Technology Dependencies data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_itdr_dependencies"
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup iteration data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup iteration data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Migrate ITDR Technology Dependencies",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate ITDR Technology Dependencies",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Technology Dependencies data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_itdr_dependencies;\r\ncreate table migration_itdr_dependencies\r\nas (\r\nselect \r\nROW_NUMBER() OVER (ORDER BY rg.parent_id) row_num,\r\nuuid() newPortalPlanTechnologyDependencyId,\r\nrg.child_id rp_child_technology_id,\r\nrg.parent_id rp_parent_technology_id,\r\nt1.technologyId childTechnologyId,\r\nt2.newPortalPlanTechnologyId newParentPortalPlanTechnologyId\r\n from t_resource_graph rg\r\njoin migration_itdr_technologies t1 on rg.child_id = t1.rp_technology_id\r\njoin migration_itdr_technologies t2 on rg.parent_id = t2.rp_technology_id\r\n);\r\n\r\nselect count(*) from migration_itdr_dependencies;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate ITDR Technology Dependencies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR Technology Dependencies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ITDR Technology Dependencies",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select\nnewPortalPlanTechnologyDependencyId,\nchildTechnologyId,\nnewParentPortalPlanTechnologyId\nfrom migration_itdr_dependencies\nwhere row_num between \n@{pipeline().parameters.iteration_start} and\n@{pipeline().parameters.iteration_stop}\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ITDR Technology Dependency",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "ITDR Technology Dependencies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('ITDR Technology Dependencies').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Insert SQL",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "technologyDependencySQL",
										"value": {
											"value": "insert into bcPortalPlanTechnologyDependency\n(\n    portalPlanTechnologyDependencyId,\n    portalPlanTechnologyId,\n    dependentTechnologyId,\n    portalPlanTechnologyDependencyStatusTypeId,\n    dateTimeCreated,\n    createdById\n)\nvalues\n(\n    '@{item().newPortalPlanTechnologyDependencyId}',\n    '@{item().newParentPortalPlanTechnologyId}',\n    '@{item().childTechnologyId}',\n    '8884fc46-6214-4bf2-a335-26e3c13bb041', /*Active*/\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "technologyDependencySQL not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ITDR Technology Dependency",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('technologyDependencySQL')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Insert technology dependencies",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('technologyDependencySQL'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"technologyDependencySQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR Vendors Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup iteration data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Technology Vendor data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_itdr_vendor"
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup iteration data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup iteration data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Migrate ITDR Vendors",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate ITDR Vendors",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Technology Vendor data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_itdr_vendor;\r\ncreate table migration_itdr_vendor\r\nas (\r\nselect\r\nROW_NUMBER() OVER (ORDER BY newPortalPlanTechnologyId) row_num,\r\nuuid() newPortalPlanTechnologyVendorId,\r\nvr.VENDOR_ID rp_vendor_id,\r\nvd.newVendorId,\r\nvd.vendorName,\r\nt.rp_technology_id,\r\nt.rp_technology_name,\r\nt.newPortalPlanTechnologyId\r\n from T_VENDOR_RESOURCE vr\r\njoin migration_vendor_data vd on vd.vendorId = vr.VENDOR_ID\r\njoin migration_itdr_technologies t on t.rp_technology_id = vr.resource_id\r\n);\r\n\r\nselect count(*) from migration_itdr_vendor;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate ITDR Vendors')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate ITDR Vendors')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Iteration Technology Vendors",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nnewPortalPlanTechnologyVendorId,\nnewPortalPlanTechnologyId,\nnewVendorId\n from migration_itdr_vendor\n where row_num between \n @{pipeline().parameters.iteration_start} and\n @{pipeline().parameters.iteration_stop};\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Vendor",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Iteration Technology Vendors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Iteration Technology Vendors').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "vendorSQL",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "vendorSQL",
										"value": {
											"value": "insert into bcPortalPlanTechnologyVendor\n(\n    portalPlanTechnologyVendorId,\n    portalPlanTechnologyId,\n    vendorId,\n    portalPlanTechnologyVendorStatusTypeId,\n    dateTimeCreated,\n    createdById\n)\nvalues\n(\n    '@{item().newPortalPlanTechnologyVendorId}',\n    '@{item().newPortalPlanTechnologyId}',\n    '@{item().newVendorId}',\n    '409833f6-cbb0-4531-b3d9-dbfb8703f2ca', /*Active*/\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Vendors not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Vendor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('vendorSQL')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Insert Vendors",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('vendorSQL'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"vendorSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Portal Plan Technologies Attachments - not used')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Iteration Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select * from\nmigration_itdr_attachments\nwhere row_num between\n@{pipeline().parameters.iteration_start}\nand @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Portal Plan Technology",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Iteration Data').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Portal Plan Technology Folder",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Portal Plan Technology Folder - not used",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"insertSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR/Portal Plan Technology Attachments"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Create Portal Plan Technology Folder - not used')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Portal Plan Technologies Attachments Partitioned - not used')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Portal Plan Technology Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Iterations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Iterations').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Migrate Portal Plan Technologies Attachments",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate Portal Plan Technologies Attachments - not used",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								}
							]
						}
					},
					{
						"name": "Iterations",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_itdr_attachments"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					},
					"portalPlanDocumentFolderId": {
						"type": "string"
					},
					"preparisSessionToken": {
						"type": "string"
					}
				},
				"variables": {
					"insertSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR/Portal Plan Technology Attachments"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate Portal Plan Technologies Attachments - not used')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Strategies Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Migration table for Process Strategies",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_portalProcess_strategy;\r\n\r\ncreate table migration_portalProcess_strategy AS\r\n(\r\nwith toDefault as\r\n(\r\n    select\r\n    f.id function_id\r\n    from T_FUNCTION f\r\n    left join T_BIA_MATRIX_FUNCTION_ENTRY mfe on f.Id = mfe.function_id\r\n    where mfe.FUNCTION_ID is null\r\n),\r\nfromMatrix as \r\n(\r\n    select\r\n    ROW_NUMBER() OVER (PARTITION by m.department_id, mfe.function_id order by mfe.siteType, CASE when (l.newSiteId is not null) then 0 else 1 end, rto.seconds ) row_num_internal\r\n    , m.id matrix_id\r\n    , m.name matrixName\r\n    , m.description\r\n    , mfe.siteType\r\n    , mfe.site_id\r\n    , mfe.function_id\r\n    , f.name functionName\r\n    , m.department_id\r\n    , m.lastUpdateDate matrixLastUpdateDate\r\n    , mfe.lastUpdateDate funcEntryLastUpdateDate\r\n    , mfe.rto_id\r\n    , case when l.newSiteId is null then '9c004e84-4eb4-44f1-a008-cd33f5211014' /*Work From Anywhere*/ else '704acb8f-ed9b-4f11-ab37-0f0139895d5b' /*Temporary Workspace*/ end strategyTypeId\r\n    , pp.portalProcessId\r\n    , pfa.portalFunctionalAreaId\r\n    , l.newSiteId locationId\r\n    , rto.seconds\r\n    from T_BIA_MATRIX m\r\n    join T_BIA_MATRIX_FUNCTION_ENTRY mfe on m.id = mfe.matrix_id\r\n    join t_function f on f.id = mfe.function_id\r\n    join migration_portalfunctionalArea_data pfa on pfa.department_id = m.department_id\r\n    join migration_portalProcess_data pp on pp.function_id = mfe.function_Id and pp.portalFunctionalAreaId = pfa.portalFunctionalAreaId\r\n    left join migration_site_data l on l.id = mfe.site_id\r\n    left join migration_rto_intervals rto on rto.id = mfe.rto_id\r\n),\r\nwithDefaults as\r\n(\r\n    select\r\n    1 row_num_internal\r\n    , 0 matrix_id\r\n    , 'Default' matrixName\r\n    , 'Default' description\r\n    , null siteType\r\n    , null site_id\r\n    , pp.function_id\r\n    , pp.portalProcessName\r\n    , null department_id\r\n    , null matrixLastUpdateDate\r\n    , null funcEntryLastUpdateDate\r\n    , null rto_id\r\n    , '9c004e84-4eb4-44f1-a008-cd33f5211014' /*Work From Anywhere*/ strategyTypeId\r\n    , pp.portalProcessId\r\n    , pp.portalFunctionalAreaId\r\n    , null locationId\r\n    , null seconds\r\n    from toDefault d\r\n    join migration_portalProcess_data pp on pp.function_id = d.function_id\r\n)\r\n\r\nselect ROW_NUMBER() over (order by portalProcessId) row_num\r\n, t.* from\r\n(   select\r\n    uuid() portalProcessStrategyId\r\n    , fm.* from fromMatrix fm\r\n    where row_num_internal = 1\r\n    union\r\n    select\r\n    uuid() portalProcessStrategyId\r\n    , wd.* from withDefaults wd) t\r\n);\r\n\r\nselect count(*) rowsCount from migration_portalProcess_strategy;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Stratagies Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Process Strategies",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate Strategies",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iterationStart": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iterationStop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"currentPortalId": {
												"value": "@pipeline().parameters.currentPortalId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build Migration table for Process Strategies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_portalProcess_strategy",
								"rp_db_name": {
									"value": "@pipeline().globalParameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().globalParameters.rp_server_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Update Strategy Impact Timespan Id",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Process Stratagies Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update pps\nset pps.impactTimespanId = pp.rtoImpactTimespanId\n from\nbcPortalProcessStrategy pps\njoin bcPortalProcess pp on pp.portalProcessId = pps.portalProcessId\njoin bcPortalFunctionalArea pfa on pfa.portalFunctionalAreaId = pp.portalFunctionalAreaId\nwhere pfa.portalId = '@{pipeline().parameters.currentPortalId}'\nand pp.rtoImpactTimespanId is not NULL",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Update Strategy locations",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Process Stratagies Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "insert into bcPortalProcessStrategyLocation\n(portalProcessStrategyLocationId\n, portalProcessStrategyId\n, strategyLocationTypeId\n, locationId\n, processStrategyResourceStatusTypeId\n, dateTimeCreated\n, createdById)\nselect\nnewid()\n, portalProcessStrategyId\n, '226d7117-02fb-409a-a4da-29cca8689300' /*Internal location*/\n, pl.locationId\n, 'dfa05d5e-7ec3-4d2e-8170-bbad882951c5' /*Active*/\n, CURRENT_TIMESTAMP\n, pl.createdById\n from\nbcPortalProcessStrategy pps\njoin bcPortalProcessLocation pl on pl.portalProcessLocationId = pps.portalProcessLocationId\njoin bcPortalProcess pp on pp.portalProcessId = pps.portalProcessId\njoin bcPortalFunctionalArea pfa on pfa.portalFunctionalAreaId = pp.portalFunctionalAreaId\nwhere pfa.portalId = '@{pipeline().parameters.currentPortalId}'",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate Strategies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Strategies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process Strategies",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select\nportalProcessStrategyId\n, portalProcessId\n, strategyTypeId\n, locationId\n, case when locationId is null then null else uuid() end portalProcessLocationId\nfrom migration_portalProcess_strategy\nwhere row_num between @{pipeline().parameters.iterationStart}\nand @{pipeline().parameters.iterationStop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Strategy",
						"description": "If strategy is 'Temporary workspace' we need to insert location. \nbcPortalProcessStrategy has field portalProcessLocationId.\nTable bcPortalProcessLocation is linking locationId to portalProcessLocationId.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Process Strategies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Process Strategies').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Temporary workspace",
									"type": "IfCondition",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(item().strategyTypeId, '704acb8f-ed9b-4f11-ab37-0f0139895d5b')",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Insert Process WFA Strategy Script",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "insertProcessWFAStrategyScript",
													"value": {
														"value": "insert into bcPortalProcessStrategy\n(\n    portalProcessStrategyId\n    , portalProcessId\n    , strategyTypeId\n    , portalProcessStrategyStatusTypeId\n    , dateTimeCreated\n    , createdById\n)\nvalues\n(\n    '@{item().portalProcessStrategyId}'\n    , '@{item().portalProcessId}'\n    , '@{item().strategyTypeId}'\n    , 'c29b7d09-fd49-440a-b540-c213302ac0e6' /*Active*/\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}'\n)",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Insert Process Strategy Temp Workspace Script",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "insertProcessStrategyLocationScript",
													"value": {
														"value": "insert into bcPortalProcessLocation\n(\nportalProcessLocationId\n, portalProcessId\n, locationId\n, portalProcessLocationStatusTypeId\n, dateTimeCreated\n, createdById\n)\nvalues\n(\n'@{item().portalProcessLocationId}'\n, '@{item().portalProcessId}'\n, '@{item().locationId}'\n, 'c60d99bf-eb57-4880-8a73-9e879ecb5fdc' /*Active*/\n, CURRENT_TIMESTAMP\n, '@{pipeline().globalParameters.preparisCreatedById}'\n)",
														"type": "Expression"
													}
												}
											},
											{
												"name": "Insert Process Strategy Script",
												"type": "AppendVariable",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"variableName": "insertProcessTWStrategyScript",
													"value": {
														"value": "insert into bcPortalProcessStrategy\n(\n    portalProcessStrategyId\n    , portalProcessId\n    , strategyTypeId\n    , portalProcessStrategyStatusTypeId\n    , portalProcessLocationId\n    , dateTimeCreated\n    , createdById\n)\nvalues\n(\n    '@{item().portalProcessStrategyId}'\n    , '@{item().portalProcessId}'\n    , '@{item().strategyTypeId}'\n    , 'c29b7d09-fd49-440a-b540-c213302ac0e6' /*Active*/\n    , '@{item().portalProcessLocationId}'\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}'\n)",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Set Test script variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Process Strategy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testScript",
							"value": {
								"value": "@join(variables('insertProcessStrategyLocationScript'), ';')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Strategy Locations",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Process Strategy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insertProcessStrategyLocationScript')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Insert into bcPortalProcessLocation",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insertProcessStrategyLocationScript'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If TW",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If Strategy Locations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insertProcessTWStrategyScript')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute Insert TW strategy locations",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insertProcessTWStrategyScript'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "If WFA",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "If TW",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insertProcessWFAStrategyScript')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute Insert WFA strategy locations",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insertProcessWFAStrategyScript'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iterationStart": {
						"type": "int"
					},
					"iterationStop": {
						"type": "int"
					},
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"insertProcessTWStrategyScript": {
						"type": "Array"
					},
					"testScript": {
						"type": "String"
					},
					"insertProcessStrategyLocationScript": {
						"type": "Array"
					},
					"insertProcessWFAStrategyScript": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Strategy Employees Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Migration table for Process Strategies Employees",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_Strategy_Employee;\r\n\r\ncreate table migration_Strategy_Employee AS\r\n(\r\n    with temp as \r\n    (\r\n        select distinct\r\nps.portalProcessStrategyId,\r\nps.matrixName,\r\nps.functionName,\r\nmfe.function_id,\r\npp.portalProcessId,\r\npp.portalProcessName,\r\nfd.department_id,\r\nd.portalFunctionalAreaId,\r\nd.portalFunctionalAreaName,\r\nmue.user_id,\r\nu.username,\r\nu.newUserId userId\r\n from T_BIA_MATRIX_USER_ENTRY mue\r\njoin T_BIA_MATRIX_FUNCTION_ENTRY mfe on mue.function_entry_id = mfe.id\r\njoin T_FUNCTION_DEPARTMENT fd on fd.FUNCTION_ID = mfe.function_id\r\njoin migration_portalfunctionalArea_data d on d.department_id = fd.department_id\r\njoin migration_portalProcess_data pp on pp.function_id = mfe.function_id and pp.portalFunctionalAreaId = d.portalFunctionalAreaId\r\njoin migration_all_user_data u on u.userId = mue.user_id\r\njoin migration_portalProcess_strategy ps on ps.portalProcessId = pp.portalProcessId\r\nwhere entry_type = 'FUNCTION'\r\n    )\r\n\r\n    select\r\n    ROW_NUMBER() over (order by portalProcessId) row_num\r\n    , uuid() portalProcessStrategyEmployeeId\r\n    , temp.* from temp\r\n);\r\n\r\nselect 'DONE' as 'Lookup Activity Hack';",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Stratagy Employees Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Process Strategies Employees",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate Strategy Employees",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iterationStart": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iterationStop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build Migration table for Process Strategies Employees",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_Strategy_Employee"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate Strategy Employees')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Strategy Employees')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process Strategy Employees",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "Select \nportalProcessStrategyEmployeeId\n, portalProcessStrategyId\n, userId\nfrom migration_Strategy_Employee\nwhere row_num between\n@{pipeline().parameters.iterationStart}\nand @{pipeline().parameters.iterationStop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Strategy Employee",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Process Strategy Employees",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Process Strategy Employees').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Insert Process Strategy Employee Script",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertProcessStrategyEmployee",
										"value": {
											"value": "insert into bcPortalProcessStrategyEmployee\n (\n    portalProcessStrategyEmployeeId\n    , portalProcessStrategyId\n    , userId\n    , processStrategyResourceStatusTypeId\n    , dateTimeCreated\n    , createdById\n )\n VALUES\n (\n    '@{item().portalProcessStrategyEmployeeId}'\n    , '@{item().portalProcessStrategyId}'\n    , '@{item().userId}'\n    , 'dfa05d5e-7ec3-4d2e-8170-bbad882951c5' /*Active*/\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}'\n )",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Insert list is not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Process Strategy Employee",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insertProcessStrategyEmployee')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insertProcessStrategyEmployee'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Set testInsertStatement",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Process Strategy Employee",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testInsertStatement",
							"value": {
								"value": "@join(variables('insertProcessStrategyEmployee'), ';')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iterationStart": {
						"type": "int"
					},
					"iterationStop": {
						"type": "int"
					}
				},
				"variables": {
					"insertProcessStrategyEmployee": {
						"type": "Array"
					},
					"testInsertStatement": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Strategy Technologies Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Migration table for Process Strategies Tech",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_Strategy_Technology;\r\n\r\ncreate table migration_Strategy_Technology AS\r\n(\r\nwith toDefault as\r\n(\r\n    select\r\n    f.id function_id\r\n    from T_FUNCTION f\r\n    left join T_BIA_MATRIX_FUNCTION_ENTRY mfe on f.Id = mfe.function_id\r\n    where mfe.FUNCTION_ID is null\r\n),\r\nfromMatrix as \r\n(\r\n    select distinct\r\nps.portalProcessStrategyId,\r\nps.matrixName,\r\nps.functionName,\r\nmfe.function_id,\r\npp.portalProcessId,\r\npp.portalProcessName,\r\nfd.department_id,\r\nd.portalFunctionalAreaId,\r\nd.portalFunctionalAreaName,\r\nmre.resource_id,\r\ntech.name rp_resource_name,\r\ntech.technologyId\r\n from T_BIA_MATRIX_RESOURCE_ENTRY mre\r\njoin T_BIA_MATRIX_FUNCTION_ENTRY mfe on mre.function_entry_id = mfe.id\r\njoin T_FUNCTION_DEPARTMENT fd on fd.FUNCTION_ID = mfe.function_id\r\njoin migration_portalfunctionalArea_data d on d.department_id = fd.department_id\r\njoin migration_portalProcess_data pp on pp.function_id = mfe.function_id and pp.portalFunctionalAreaId = d.portalFunctionalAreaId\r\njoin migration_technology_data tech on tech.rp_technology_id = mre.resource_id\r\njoin migration_portalProcess_strategy ps on ps.portalProcessId = pp.portalProcessId\r\nwhere entry_type = 'FUNCTION'\r\nand resource_id is not null\r\n),\r\nwithDefaults as\r\n(\r\n    select distinct\r\nps.portalProcessStrategyId,\r\nps.matrixName,\r\nps.functionName,\r\npp.function_id,\r\npp.portalProcessId,\r\npp.portalProcessName,\r\nnull department_id,\r\npp.portalFunctionalAreaId,\r\npp.portalFunctionalAreaName,\r\nrf.resource_id,\r\ntech.name rp_resource_name,\r\ntech.technologyId\r\n from toDefault d\r\njoin migration_portalProcess_data pp on pp.function_id = d.function_id\r\njoin t_resource_function rf on rf.function_id = pp.function_id\r\njoin migration_technology_data tech on tech.rp_technology_id = rf.resource_id\r\njoin migration_portalProcess_strategy ps on ps.portalProcessId = pp.portalProcessId\r\n)\r\n\r\nselect ROW_NUMBER() over (order by portalProcessId) row_num\r\n, t.* from\r\n(   select\r\n    uuid() portalProcessStrategyTechnologyId,\r\n    fm.* from fromMatrix fm\r\n    union\r\n    select\r\n    uuid() portalProcessStrategyTechnologyId,\r\n    wd.* from withDefaults wd) t\r\n);\r\n\r\nselect count(*) rowsCount from migration_Strategy_Technology;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Stratagy Tech Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Process Strategies Technology",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate Strategy Technologies",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iterationStart": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iterationStop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build Migration table for Process Strategies Tech",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_Strategy_Technology",
								"rp_db_name": {
									"value": "@pipeline().globalParameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().globalParameters.rp_server_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate Strategy Technologies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Strategy Technologies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process Strategy Technologies",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "Select \nportalProcessStrategyTechnologyId\n, portalProcessStrategyId\n, technologyId\n from migration_Strategy_Technology\nwhere row_num between \n@{pipeline().parameters.iterationStart}\n and @{pipeline().parameters.iterationStop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Strategy Technology",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Process Strategy Technologies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Process Strategy Technologies').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Insert Process Strategy Thechnology Script",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertProcessStrategyTechnology",
										"value": {
											"value": "insert into bcPortalProcessStrategyTechnology\n(\n    portalProcessStrategyTechnologyId\n    , portalProcessStrategyId\n    , technologyId\n    , processStrategyResourceStatusTypeId\n    , dateTimeCreated\n    , createdById\n)\nvalues\n(\n    '@{item().portalProcessStrategyTechnologyId}'\n    , '@{item().portalProcessStrategyId}'\n    , '@{item().technologyId}'\n    , 'dfa05d5e-7ec3-4d2e-8170-bbad882951c5' /*Active*/\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "testInsertStatement",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Process Strategy Technology",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testInsertStatement",
							"value": {
								"value": "@join(variables('insertProcessStrategyTechnology'), ',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Insert List not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Process Strategy Technology",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insertProcessStrategyTechnology')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insertProcessStrategyTechnology'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iterationStart": {
						"type": "int"
					},
					"iterationStop": {
						"type": "int"
					}
				},
				"variables": {
					"insertProcessStrategyTechnology": {
						"type": "Array"
					},
					"testInsertStatement": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Strategy Vendors Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Migration table for Process Strategies Vendors",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_Strategy_Vendor;\r\n\r\ncreate table migration_Strategy_Vendor AS\r\n(\r\nwith toDefault as\r\n(\r\n    select\r\n    f.id function_id\r\n    from T_FUNCTION f\r\n    left join T_BIA_MATRIX_FUNCTION_ENTRY mfe on f.Id = mfe.function_id\r\n    where mfe.FUNCTION_ID is null\r\n),\r\nfromMatrix as \r\n(\r\nselect distinct\r\nps.portalProcessStrategyId,\r\nps.matrixName,\r\nps.functionName,\r\nmfe.function_id,\r\npp.portalProcessId,\r\npp.portalProcessName,\r\nfd.department_id,\r\nd.portalFunctionalAreaId,\r\nd.portalFunctionalAreaName,\r\nmve.vendor_id,\r\nv.vendorName,\r\nv.newVendorId vendorId\r\n from T_BIA_MATRIX_VENDOR_ENTRY mve\r\njoin T_BIA_MATRIX_FUNCTION_ENTRY mfe on mve.function_entry_id = mfe.id\r\njoin T_FUNCTION_DEPARTMENT fd on fd.FUNCTION_ID = mfe.function_id\r\njoin migration_portalfunctionalArea_data d on d.department_id = fd.department_id\r\njoin migration_portalProcess_data pp on pp.function_id = mfe.function_id and pp.portalFunctionalAreaId = d.portalFunctionalAreaId\r\njoin migration_vendor_data v on v.vendorId = mve.vendor_id\r\njoin migration_portalProcess_strategy ps on ps.portalProcessId = pp.portalProcessId\r\nwhere entry_type = 'FUNCTION'\r\n),\r\nwithDefaults as\r\n(\r\nselect distinct\r\nps.portalProcessStrategyId,\r\nps.matrixName,\r\nps.functionName,\r\npp.function_id,\r\npp.portalProcessId,\r\npp.portalProcessName,\r\nnull department_id,\r\npp.portalFunctionalAreaId,\r\npp.portalFunctionalAreaName,\r\nvf.vendor_id,\r\nv.vendorName,\r\nv.newVendorId vendorId\r\nfrom toDefault d\r\njoin migration_portalProcess_data pp on pp.function_id = d.function_id\r\njoin t_vendor_function vf on vf.function_id = d.function_id\r\njoin migration_vendor_data v on v.vendorId = vf.vendor_id\r\njoin migration_portalProcess_strategy ps on ps.portalProcessId = pp.portalProcessId\r\n)\r\n\r\nselect ROW_NUMBER() over (order by portalProcessId) row_num\r\n, t.* from\r\n(   select\r\n    uuid() portalProcessStrategyVendorId,\r\n    fm.* from fromMatrix fm\r\n    union\r\n    select\r\n    uuid() portalProcessStrategyVendorId,\r\n    wd.* from withDefaults wd) t\r\n);\r\n\r\nselect count(*) rowsCount from migration_Strategy_Vendor;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Stratagy Vendor Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Process Strategies Vendors",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate Strategy Vendors",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iterationStart": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iterationStop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build Migration table for Process Strategies Vendors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_Strategy_Vendor"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"iterationStart": {
						"type": "Integer"
					},
					"iterationStop": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate Strategy Vendors')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Strategy Vendors')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Process Strategy Vendors",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select\nportalProcessStrategyVendorId\n, portalProcessStrategyId\n, vendorId\nfrom migration_Strategy_Vendor\nwhere row_num between\n@{pipeline().parameters.iterationStart}\nand @{pipeline().parameters.iterationStop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Strategy Vendor",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Process Strategy Vendors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Process Strategy Vendors').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Insert Process Strategy Vendor Script",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertProcessStrategyVendorScript",
										"value": {
											"value": "insert into bcPortalProcessStrategyVendor\n(\n    portalProcessStrategyVendorId\n    , portalProcessStrategyId\n    , vendorId\n    , processStrategyResourceStatusTypeId\n    , dateTimeCreated\n    , createdById\n)\nvalues\n(\n    '@{item().portalProcessStrategyVendorId}'\n    , '@{item().portalProcessStrategyId}'\n    , '@{item().vendorId}'\n    , 'dfa05d5e-7ec3-4d2e-8170-bbad882951c5'\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "testInsertStatements",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Process Strategy Vendor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testInsertStatements",
							"value": {
								"value": "@join(variables('insertProcessStrategyVendorScript'), ';')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Insert is not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Process Strategy Vendor",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insertProcessStrategyVendorScript')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Execute Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insertProcessStrategyVendorScript'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iterationStart": {
						"type": "int"
					},
					"iterationStop": {
						"type": "int"
					}
				},
				"variables": {
					"insertProcessStrategyVendorScript": {
						"type": "Array"
					},
					"testInsertStatements": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Technologies Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Technology Migration table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_technology_type_data;\r\n\r\ncreate table migration_technology_type_data as (\r\n    select \r\n    id rp_technology_type_id,\r\n    `name`,\r\n    uuid() technologyTypeId\r\n from t_resource_type\r\n);\r\n\r\ndrop table if exists migration_technology_data;\r\n\r\ncreate table migration_technology_data as (\r\n    with combined_tech_data as (\r\n        SELECT\r\n        id as rp_technology_id\r\n        , uuid() as technologyId\r\n        , r.name\r\n        , rpo\r\n        , rpoType \r\n        , case rpoType\r\n            when 0 then 'Milliseconds'\r\n            when 1 then 'Seconds'\r\n            when 2 then 'Minutes'\r\n            when 3 then 'Hours'\r\n            when 4 then 'Days'\r\n            when 5 then 'Weeks'\r\n            end as rpoTypeName\r\n        , case rpoType \r\n            when 0 then rpo/1000\r\n            when 5 then 7 * rpo\r\n            else rpo\r\n            end as rpoTime\r\n        , case rpoType\r\n            when 0 then rpo/1000\r\n            when 1 then rpo\r\n            when 2 then rpo * 60\r\n            when 3 then rpo * 3600\r\n            when 4 then rpo * 3600 * 24\r\n            when 5 then rpo * 3600 * 24 * 7\r\n            end as rpoTimeInSeconds\r\n        , case rpoType \r\n            when 0 then 'E5967FB9-16CE-4545-A5F5-2B78014C9016'\r\n            when 1 then 'E5967FB9-16CE-4545-A5F5-2B78014C9016'\r\n            when 2 then '368095B8-685E-4F99-A3C5-C44BBD30783C'\r\n            when 3 then '41BB6FC1-DF74-42B5-8F41-E55E5A4570ED'\r\n            when 4 then '0CAB3E34-0F19-4CC6-B580-CC8DC70AF2D5'\r\n            when 5 then '0CAB3E34-0F19-4CC6-B580-CC8DC70AF2D5'\r\n            end as preparisTimeDurationUnitId\r\n        , case rpoType \r\n            when 0 then 'Second * 1000'\r\n            when 1 then 'Second'\r\n            when 2 then 'Minute'\r\n            when 3 then 'Hour'\r\n            when 4 then 'Day'\r\n            when 5 then 'Day * 7'\r\n            end as preparisTimeDurationConversion\r\n        , tt.technologyTypeId\r\n        , tt.rp_technology_type_id\r\n        FROM t_resource r\r\n        join migration_technology_type_data tt on r.type_id = tt.rp_technology_type_id\r\n    )\r\n    select \r\n    ROW_NUMBER() OVER (ORDER BY technologyId) row_num\r\n    , ctd.*\r\n    from combined_tech_data ctd\r\n);\r\n\r\nselect count(*) res from migration_technology_data;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute Pipeline Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Migrate Technology Types",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_technology_data"
							}
						}
					},
					{
						"name": "ForEach Technology",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Execute Pipeline Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Pipeline Migrate Technologies",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Migrate Technologies",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"portalEntityId": {
												"value": "@pipeline().parameters.portalEntityId",
												"type": "Expression"
											},
											"iterationStart": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iterationStop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Migrate Technology Types",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build Technology Migration table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Migrate Technology Types",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@pipeline().parameters.portalEntityId",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"portalEntityId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Vendors and Technologies"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T12:56:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate Technology Types')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate Technologies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Technologies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup migration_technology_data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \ntechnologyId\n, replace(name, '''','''''') as name\n, cast(rpoTime as unsigned) rpoTime\n, cast(rpoTimeInSeconds as unsigned) as rpoTimeInSeconds\n, preparisTimeDurationUnitId\n, technologyTypeId\nfrom migration_technology_data\nwhere row_num between @{pipeline().parameters.iterationStart} and @{pipeline().parameters.iterationStop}\n\n",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Migration Technology Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup migration_technology_data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup migration_technology_data').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable technology_insert_statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "technology_insert_statements",
										"value": {
											"value": "begin try\nINSERT INTO [dbo].[bcTechnology]\n           ([technologyId]\n           ,[technologyName]\n           ,[portalId]\n           ,[technologyStatusTypeId]\n           ,[technologyTypeId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[rpoTime]\n           ,[rpoTimeInSeconds]\n           ,[rpoTimeDurationUnitId])\nSELECT \n    '@{item().technologyId}'\n    , '@{item().name}'\n    , '@{pipeline().parameters.portalEntityId}'\n    , '9255219C-A219-4F5B-9AB2-130289FDBB92'\n    , '@{item().technologyTypeId}'\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}'\n    , case when '@{item().rpoTime}' = '' then NULL \n    else cast('@{item().rpoTime}' as int) end\n    , case when '@{item().rpoTimeInSeconds}' = '' then NULL\n    else cast('@{item().rpoTimeInSeconds}' as int) end\n    , case when '@{item().preparisTimeDurationUnitId}' = '' then NULL else '@{item().preparisTimeDurationUnitId}' end\nend try\nbegin catch\n    insert into migration_errors\n    (portalId, errorStr)\n    values\n    (\n        '@{pipeline().parameters.portalEntityId}',\n        CONCAT('Technology: ', '@{item().technologyId}', ' ', '@{item().name}')\n    )\nend catch",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "If Condition Lookup gt 0",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ForEach Migration Technology Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Lookup migration_technology_data').output.count,0) ",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Bulk Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('technology_insert_statements'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "testInsertStatements",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach Migration Technology Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testInsertStatements",
							"value": {
								"value": "@join(variables('technology_insert_statements'), ';')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"portalEntityId": {
						"type": "string"
					},
					"iterationStart": {
						"type": "int"
					},
					"iterationStop": {
						"type": "int"
					}
				},
				"variables": {
					"technology_insert_statements": {
						"type": "Array"
					},
					"testInsertStatements": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Vendors and Technologies"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T15:18:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Technology Types')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Technology Types",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select\r\ntechnologyTypeId,\r\nREPLACE(name, '''', '''''') technologyTypeName\r\nfrom migration_technology_type_data",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Technology Types",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Technology Types').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "technologyTypeStatements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "technologyTypeStatements",
										"value": {
											"value": "insert into bcTechnologyTypes\n(\n    portalId,\n    technologyTypeId,\n    technologyTypeName,\n    technologyTypeStatusId,\n    dateTimeCreated,\n    createdById\n)\nVALUES\n(\n    '@{pipeline().parameters.currentPortalId}',\n    '@{item().technologyTypeId}',\n    '@{item().technologyTypeName}',\n    '9255219c-a219-4f5b-9ab2-130289fdbb92',\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Insert Technology Types",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@join(variables('technologyTypeStatements'), ';')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Hide system technology types",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Insert Technology Types",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update tt1\nset tt1.sourceTechnologyTypeId = tt2.technologyTypeId\nfrom bcTechnologyTypes tt1\njoin bcTechnologyTypes tt2 on tt1.technologyTypeName = tt2.technologyTypeName and tt2.portalId is null\nwhere tt1.portalId = '@{pipeline().parameters.currentPortalId}'",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"technologyTypeStatements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Vendors and Technologies"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Migrate Vendors')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build vendor migration tables",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "/* vendor and address */\r\ndrop table if exists migration_vendor_data;\r\n\r\ncreate table migration_vendor_data as (\r\n    with distinct_vendor_contract_data as (\r\n        select distinct v.id vendorId\r\n        , ROW_NUMBER() OVER (PARTITION by v.id ORDER BY cast(vc.expirationDate as datetime) desc) row_num\r\n        , v.name as vendorName\r\n        , 'D355632B-46AB-4376-9591-318F44A505C1' as vendorStatusTypeId\r\n        , v.description as comments\r\n        , case when vc.expirationDate is null then NULL\r\n            else cast(vc.expirationDate as datetime) end as contractEndDate \r\n        , v.address\r\n        , v.address2\r\n        , v.city\r\n        , v.state\r\n        , v.zip\r\n        , v.mainNumber as phone\r\n        , v.url\r\n        , v.country_id\r\n        , c.name as rpCountryName\r\n        , pc.CountryTypeName \r\n        , pc.CountryTypeId \r\n        , 1 as isPrimary\r\n        from T_VENDOR v\r\n        /*join t_vendor_contact vc on v.id = vc.vendor_id*/\r\n        join t_country c on v.country_id = c.id\r\n        left join migration_preparis_userCountry pc on pc.CountryTypeName = c.name\r\n        left join t_contract vc on v.id = vc.vendor_id\r\n        order by v.id\r\n    )\r\n    select *, (select uuid()) as newVendorId, (select uuid()) as newVendorAddressId, 1 as doMigrate\r\n    from distinct_vendor_contract_data\r\n    where row_num = 1\r\n);\r\n\r\n\r\n/*vendor contact */\r\ndrop table if exists migration_vendor_contact;\r\n\r\ncreate table migration_vendor_contact as (\r\n\r\n    with all_vendor_contacts as (\r\n        select \r\n        c.id contactId\r\n        , mvd.vendorId\r\n        , mvd.newVendorId\r\n        , (select uuid()) as newVendorContactId \r\n        , concat(c.firstname, ' ', c.lastname) as name \r\n        , (select min(cast(AES_DECRYPT(numberString, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255))) from t_contact_info where owner_id = c.id and  contact_info_type = 'PHONE') as phone\r\n        , (select min(email) from t_contact_info where owner_id = c.id and  contact_info_type = 'EMAIL') as email\r\n        from migration_vendor_data mvd\r\n        join t_vendor_contact vc on mvd.vendorId = vc.vendor_id\r\n        join t_contact c on vc.id = c.id\r\n        order by c.name\r\n    )\r\n    , vendor_primary_contact as (\r\n        select min(contactId) contactId, vendorId \r\n            from all_vendor_contacts\r\n        group by vendorId\r\n    )\r\n    select avc.* \r\n    , case when vpc.contactId is null then 0\r\n        else 1 \r\n        end as isPrimary\r\n    , 1 as doMigrate\r\n    from all_vendor_contacts avc\r\n    left join vendor_primary_contact vpc on avc.contactId = vpc.contactId\r\n\r\n);\r\n\r\n\r\nselect 'tables created' as 'Lookup hack';",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup migration_vendor_data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup migration_vendor_data').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Preparis Vendor",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[bcVendor]\n           ([vendorId]\n           ,[vendorName]\n           ,[portalId]\n           ,[vendorStatusTypeId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[contactName]\n           ,[contactPhone]\n           ,[comments]\n           ,[contractStartDate]\n           ,[contractEndDate]\n           ,[documentFolderId])\nSELECT\n      '@{item().newVendorId}' \n      ,'@{item().vendorName}'\n      ,'@{pipeline().parameters.portalEntityId}'\n      ,'@{item().vendorStatusTypeId}'\n      ,CURRENT_TIMESTAMP\n      ,'@{pipeline().globalParameters.preparisCreatedById}'\n      ,CURRENT_TIMESTAMP\n      ,'@{pipeline().globalParameters.preparisCreatedById}'\n      ,NULL\n      ,NULL\n      ,case \n            when '@{item().comments}' = '' then null\n            else '@{item().comments}' \n            end\n      ,NULL\n      ,case \n            when '@{item().contractEndDate}' = '' then null\n            else '@{item().contractEndDate}' \n            end\n      ,NULL\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create Vendor Addresses",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Create Preparis Vendor",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[bcVendorAddress]\n           ([vendorAddressId]\n           ,[vendorId]\n           ,[address1]\n           ,[address2]\n           ,[city]\n           ,[state]\n           ,[zip]\n           ,[phone]\n           ,[url]\n           ,[countryTypeId]\n           ,[isPrimary]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\nSELECT \n      '@{item().newVendorAddressId}'\n      ,'@{item().newVendorId}'\n      ,'@{item().address}'\n      ,case \n            when '@{item().address2}' = '' then null\n            else '@{item().address2}' \n            end\n      ,'@{item().city}'\n      ,'@{item().state}'\n      ,'@{item().zip}'\n      ,case \n            when '@{item().phone}' = '' then null\n            else '@{item().phone}' \n            end\n      ,case \n            when '@{item().url}' = '' then null\n            else '@{item().url}' \n            end\n      ,case \n            when LEN('@{item().CountryTypeId}') <> 36 then '2d76605b-86b5-40ff-9a71-c4893e5916fb'\n            else '@{item().CountryTypeId}'\n            end\n      ,1\n      ,CURRENT_TIMESTAMP\n      ,'@{pipeline().globalParameters.preparisCreatedById}'\n      ,CURRENT_TIMESTAMP\n      ,'@{pipeline().globalParameters.preparisCreatedById}'\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Lookup migration_vendor_data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Limit vendors migration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select newVendorId\r\n, substring(replace(vendorName, '''',''''''), 1, 200) vendorName\r\n, vendorStatusTypeId\r\n, replace(comments, '''','''''') comments\r\n, contractEndDate  \r\n, newVendorAddressId\r\n, substring(replace(address, '''',''''''), 1, 500) address\r\n, substring(replace(address2, '''',''''''), 1, 500) address2\r\n, substring(replace(city, '''',''''''), 1, 200) city\r\n, substring(state, 1, 200) state\r\n, substring(zip, 1, 100) zip\r\n, substring(replace(phone, '''',''''''), 1, 100) phone\r\n, substring(url, 1, 100) url\r\n, CountryTypeId\r\n, isPrimary\r\nfrom migration_vendor_data\r\nwhere doMigrate = 1;\r\n",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Lookup Vendor Contacts",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select \r\nnewVendorId\r\n, newVendorContactId\r\n, substring(replace(name, '''',''''''), 1,100) name \r\n, substring(phone, 1, 100) phone\r\n, substring(replace(email, '''',''''''), 1, 100) email\r\n, isPrimary\r\nfrom migration_vendor_contact\r\nwhere doMigrate = 1;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Vendor Contact",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Vendor Contacts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Vendor Contacts').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Create Vendor Contact",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[bcVendorContact]\n           ([vendorContactId]\n           ,[vendorId]\n           ,[name]\n           ,[email]\n           ,[phone]\n           ,[title]\n           ,[isPrimary]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById])\nSELECT\n      '@{item().newVendorContactId}'\n      ,'@{item().newVendorId}'\n      ,'@{item().name}'\n      ,case \n            when '@{item().email}' = '' then null\n            else '@{item().email}' \n            end      \n      ,case \n            when '@{item().phone}' = '' then null\n            else '@{item().phone}' \n            end  \n      ,NULL\n      , @{item().isPrimary}\n      , CURRENT_TIMESTAMP\n      , '@{pipeline().globalParameters.preparisCreatedById}'\n      , CURRENT_TIMESTAMP\n      , '@{pipeline().globalParameters.preparisCreatedById}'\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Limit vendors migration",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Build vendor migration tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().globalParameters.limitVendorsToBCAndITDRUsed, 1)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Filter out vendors to exclude from migration",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureMySqlSource",
											"query": "with distinctBC_ITDR_UsedVendors as\r\n(select distinct vendor_id from\r\n(/*vendors used for BC*/\r\nselect distinct\r\nmfe.function_id,\r\nfd.department_id,\r\nmve.vendor_id\r\n from T_BIA_MATRIX_VENDOR_ENTRY mve\r\njoin T_BIA_MATRIX_FUNCTION_ENTRY mfe on mve.function_entry_id = mfe.id\r\njoin T_FUNCTION_DEPARTMENT fd on fd.FUNCTION_ID = mfe.function_id\r\nwhere entry_type = 'FUNCTION'\r\nUNION\r\nselect distinct\r\nnull function_id,\r\nnull department_id,\r\nvendor_id\r\nfrom t_vendor_function\r\nunion\r\n/*vendors used for ITDR*/\r\nselect DISTINCT\r\nnull function_id,\r\nnull department_id,\r\nvendor_id\r\nfrom T_VENDOR_RESOURCE) t)\r\n\r\nupdate migration_vendor_data mvd\r\n left join distinctBC_ITDR_UsedVendors uv on uv.vendor_id = mvd.vendorId\r\n set mvd.doMigrate = 0\r\nwhere uv.vendor_id is null;\r\n\r\nupdate migration_vendor_contact mvc\r\njoin migration_vendor_data mvd on mvd.vendorId = mvc.vendorId\r\nset mvc.doMigrate = 0\r\nwhere mvd.doMigrate = 0;\r\n\r\nselect count(*) from migration_vendor_data where doMigrate = 1;",
											"queryTimeout": "02:00:00"
										},
										"dataset": {
											"referenceName": "RecoveryPlanner",
											"type": "DatasetReference",
											"parameters": {
												"db_name": {
													"value": "@pipeline().globalParameters.rp_db_name",
													"type": "Expression"
												},
												"server_name": {
													"value": "@pipeline().globalParameters.rp_server_name",
													"type": "Expression"
												}
											}
										},
										"firstRowOnly": false
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"portalEntityId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Vendors and Technologies"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T10:38:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orchestrator All Custom Fields')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create Custom Fields Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable currentPortalId from DB_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Custom Fields Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable currentPortalId from DB_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Portal Id By DB Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentPortalId",
							"value": {
								"value": "@activity('Get Portal Id By DB Name').output.pipelineReturnValue.currentPortalId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Create Custom Fields Options Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create Custom Fields Partitioned",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Custom Fields Options Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"portalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get Portal Id By DB Name",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Portal Id By DB Name",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "User Custom Fields values",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create Custom Fields Options Partitioned",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Custom Fields User Values Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Strategy Custom Fields Values",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create Custom Fields Options Partitioned",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Custom Fields Strategy Values Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Custom Fields ITDR",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create Custom Fields Options Partitioned",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Custom Fields ITDR",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"currentPortalId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Create Custom Fields Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Create Custom Fields Options Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Get Portal Id By DB Name')]",
				"[concat(variables('factoryId'), '/pipelines/Create Custom Fields User Values Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Create Custom Fields Strategy Values Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Create Custom Fields ITDR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orchestrator BC')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Orchestrator RTOs",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Orchestrator RTOs",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Orchestrator Process Strategies",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Orchestrator RTOs",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Orchestrator Process Strategies",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Orchestrator RTOs')]",
				"[concat(variables('factoryId'), '/pipelines/Orchestrator Process Strategies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orchestrator Files And Images')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Files Migration Table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "preparisSessionToken",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Current Portal Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "DROP TABLE IF EXISTS migration_doc_folders_and_files;\r\nCREATE TABLE migration_doc_folders_and_files as\r\n(\r\n    select uuid() newItemId, t.* from\r\n        (select id\r\n        , SUBSTRING_INDEX(name, '/', -1) name\r\n        , parent_Id\r\n        , case when fileSortType = 30 then 'file' else case when fileSortType = 20 then 'document' else case when fileSortType = 10 then 'folder' else '??' end end end itemType\r\n    from t_file_base\r\n    where forEvent = 0) t\r\n);\r\n\r\nDROP TABLE IF EXISTS migration_doc_folders;\r\nCREATE TABLE migration_doc_folders as\r\n(\r\n    with RECURSIVE r_folders\r\n    as \r\n    (\r\n        select\r\n        id\r\n        , newItemId\r\n        , parent_id\r\n        , name\r\n        , 0 as depth\r\n        , CONVERT('RecoveryPlanner Files', NCHAR(65535)) as path\r\n        from migration_doc_folders_and_files\r\n        where parent_id is null\r\n        and itemType = 'folder'\r\n        union all\r\n        select faf.id\r\n        , faf.newItemId\r\n        , faf.parent_id\r\n        , faf.name\r\n        , depth + 1 as depth\r\n        , concat(f.path, '\\\\', faf.name) path\r\n        from migration_doc_folders_and_files faf\r\n        join r_folders f on faf.parent_id = f.id\r\n        where faf.itemType = 'folder'\r\n    )\r\n\r\n    select f.*, faf.newItemId newParentItemId,\r\n    ROW_NUMBER() over (order by depth) row_num\r\n    from r_folders f\r\n    left join migration_doc_folders_and_files faf on f.parent_id = faf.id\r\n);\r\n\r\n-- rename 'Root' foler to 'RecoveryPlanner Files'\r\nupdate migration_doc_folders\r\n set name = 'RecoveryPlanner Files'\r\n where depth = 0;\r\n\r\nDROP TABLE IF EXISTS migration_doc_files;\r\nCREATE TABLE migration_doc_files as\r\n(\r\n    select faf1.*\r\n     , faf2.newItemId newParentItemId\r\n     , ROW_NUMBER() over (order by id) row_num\r\n     from migration_doc_folders_and_files faf1\r\n     join migration_doc_folders_and_files faf2 on faf1.parent_id = faf2.id\r\n     where faf1.itemType = 'file'\r\n);\r\n\r\nselect count(*) foldersCount from migration_doc_folders;\r\n",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Build Images Migration Table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "preparisSessionToken",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Current Portal Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "DROP TABLE IF EXISTS migration_doc_images_with_folders;\r\nCREATE TABLE migration_doc_images_with_folders as\r\n(\r\n\r\nwith\r\nrootImageFolderId as\r\n(\r\n    select id from t_image_folder where parent_Id is null limit 1\r\n),\r\n\r\nimage_folders AS\r\n(\r\n    select distinct id\r\n    , uuid() newItemId\r\n    , parent_id\r\n    , SUBSTRING_INDEX(name, '/', -1) name\r\n    , 'imageFolder' itemType\r\n    from t_image_folder\r\n),\r\n\r\nimages AS\r\n(\r\nselect\r\n rpxi.id\r\n , uuid() newItemId \r\n , IFNULL(rpxi.folder_id, rif.id) parent_Id\r\n , SUBSTRING_INDEX(fileName, '/', -1) name\r\n , 'image' itemType\r\n from t_rpx_image rpxi\r\n join rootImageFolderId rif on 1 = 1\r\n left join image_folders ifs on IFNULL(rpxi.folder_id, rif.id) = ifs.id\r\n )\r\n\r\nselect *\r\n from images\r\nunion \r\nselect *\r\n from image_folders\r\n);\r\n\r\nDROP TABLE IF EXISTS migration_doc_image_folders;\r\nCREATE TABLE migration_doc_image_folders as\r\n(\r\n    with RECURSIVE r_folders\r\n    as \r\n    (\r\n        select\r\n        id\r\n        , newItemId\r\n        , parent_id\r\n        , name\r\n        , 0 as depth\r\n        from migration_doc_images_with_folders\r\n        where parent_id is null\r\n        and itemType = 'imageFolder'\r\n        union all\r\n        select iwf.id\r\n        , iwf.newItemId\r\n        , iwf.parent_id\r\n        , iwf.name\r\n        , depth + 1 as depth\r\n        from migration_doc_images_with_folders iwf\r\n        join r_folders f on iwf.parent_id = f.id\r\n        where iwf.itemType = 'imageFolder'\r\n    )\r\n\r\n    select f.*, iwf.newItemId newParentItemId,\r\n    ROW_NUMBER() over (order by depth) row_num\r\n    from r_folders f\r\n    left join migration_doc_images_with_folders iwf on f.parent_id = iwf.id and iwf.itemType = 'imageFolder'\r\n);\r\n\r\n/* remove root level folder */\r\ndelete from migration_doc_image_folders\r\nwhere parent_id is null and depth = 0;\r\n/* first level parent should be null now */\r\nupdate migration_doc_image_folders\r\nset newParentItemId = null \r\nwhere depth = 1;\r\n\r\nDROP TABLE IF EXISTS migration_doc_images;\r\nCREATE TABLE migration_doc_images as\r\n(\r\n    select iwf.*\r\n    , dif.newItemId newParentItemId\r\n    , ROW_NUMBER() over (order by id) row_num\r\n    from migration_doc_images_with_folders iwf\r\n    join migration_doc_image_folders dif on iwf.parent_id = dif.id\r\n    where iwf.itemType = 'image'\r\n);\r\n\r\n\r\nselect count(*) imagesCount from migration_doc_images;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get Portal Id By DB Name",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "rpSessionToken",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Portal Id By DB Name",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Current Portal Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Portal Id By DB Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentPortalId",
							"value": {
								"value": "@activity('Get Portal Id By DB Name').output.pipelineReturnValue.currentPortalId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Doc Create Folders",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build Files Migration Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Doc Create Folders",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								},
								"folderTableName": "migration_doc_folders",
								"preparisSessionToken": {
									"value": "@variables('preparisSessionToken')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Doc Create Image Folders",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build Images Migration Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Doc Create Folders",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								},
								"folderTableName": "migration_doc_image_folders",
								"preparisSessionToken": {
									"value": "@variables('preparisSessionToken')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "preparisSessionToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Preparis Session Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisSessionToken",
							"value": {
								"value": "@activity('Get Preparis Session Token').output.pipelineReturnValue.preparisSessionToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Preparis Session Token",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Preparis Session Token",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisBaseURL": {
									"value": "@pipeline().globalParameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().globalParameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Create Files Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Doc Create Folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Doc Create Files Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisSessionToken": {
									"value": "@variables('preparisSessionToken')",
									"type": "Expression"
								},
								"file_table_name": "migration_doc_files",
								"rpSessionToken": {
									"value": "@variables('rpSessionToken')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Create Image Files Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Doc Create Image Folders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Doc Create Files Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisSessionToken": {
									"value": "@variables('preparisSessionToken')",
									"type": "Expression"
								},
								"file_table_name": "migration_doc_images",
								"rpSessionToken": {
									"value": "@variables('rpSessionToken')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get RP Session Token",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP Session Token",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "rpSessionToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get RP Session Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "rpSessionToken",
							"value": {
								"value": "@activity('Get RP Session Token').output.pipelineReturnValue.rpSessionToken",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"currentPortalId": {
						"type": "String"
					},
					"preparisSessionToken": {
						"type": "String"
					},
					"rpSessionToken": {
						"type": "String"
					},
					"userLocationsStatements": {
						"type": "Array"
					},
					"insertSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Files And Images"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Get Portal Id By DB Name')]",
				"[concat(variables('factoryId'), '/pipelines/Doc Create Folders')]",
				"[concat(variables('factoryId'), '/pipelines/Get Preparis Session Token')]",
				"[concat(variables('factoryId'), '/pipelines/Doc Create Files Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Get RP Session Token')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orchestrator ITDR')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create portalPlanTypeId for ITDR",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set currentPortalId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create ITDR portalPlanType - not used",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get Preparis PortalID",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Portal Id By DB Name",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Set currentPortalId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Preparis PortalID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentPortalId",
							"value": {
								"value": "@activity('Get Preparis PortalID').output.pipelineReturnValue.currentPortalId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set portalPlanTypeId",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Create portalPlanTypeId for ITDR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "portalPlanTypeId",
							"value": {
								"value": "@activity('Create portalPlanTypeId for ITDR').output.pipelineReturnValue.portalPlanTypeId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Migrate ITDR Technologies Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create ITDR Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Migrate ITDR Technologies Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								},
								"portalPlanTypeId": {
									"value": "@variables('portalPlanTypeId')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Create ITDR Data",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set portalPlanTypeId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "/*All technologies for ITDR*/\r\ndrop table if exists migration_itdr_technologies;\r\nCREATE TABLE migration_itdr_technologies\r\nas (\r\n    select tech.*,\r\n    td.technologyId,\r\n    uuid() newPortalPlanTechnologyId,\r\n    ROW_NUMBER() OVER (ORDER BY tech.rp_technology_id) row_num\r\n    from\r\n    (SELECT r.id rp_technology_id\r\n        , r.name rp_technology_name\r\n        , MAX(!ISNULL(vr.VENDOR_ID)) has_vendor\r\n        , MAX(!ISNULL(fr.FILE_ID)) has_file\r\n        , MAX(!ISNULL(pr.PLAN_ID)) has_plan\r\n        , MAX(!ISNULL(tr.TASK_ID)) has_task\r\n    FROM T_RESOURCE r\r\n        LEFT JOIN T_VENDOR_RESOURCE vr ON r.id = vr.RESOURCE_ID\r\n        LEFT JOIN T_FILE_RESOURCE fr ON r.id = fr.RESOURCE_ID\r\n        LEFT JOIN T_RESOURCE_PLAN pr ON r.id = pr.RESOURCE_ID\r\n        LEFT JOIN T_TASK_RESOURCE tr ON r.id = tr.RESOURCE_ID\r\n    GROUP BY r.id, r.name\r\n    HAVING has_vendor OR has_file OR has_plan OR has_task) tech\r\n    join migration_technology_data td on td.rp_technology_id = tech.rp_technology_id\r\n);\r\n\r\n/*select * from migration_itdr_technologies;*/\r\n\r\n/*Task sets*/\r\ndrop table if exists migration_itdr_task_sets;\r\ncreate table migration_itdr_task_sets\r\nas (\r\n    select t.*,\r\n    ROW_NUMBER() OVER (ORDER BY rp_technology_id) row_num,\r\n    ROW_NUMBER() OVER (PARTITION BY t.newPortalPlanTechnologyId ORDER BY t.newPortalPlanTechnologyId) sequence_number,\r\n    uuid() newPortalPlanTechnologyTaskSetId\r\n    from\r\n    (SELECT DISTINCT\r\n    r.rp_technology_id,\r\n    r.rp_technology_name,\r\n    r.newPortalPlanTechnologyId,\r\n    tm.id team_id,\r\n    tm.name team_name\r\n    FROM migration_itdr_technologies r\r\n        JOIN T_TASK_RESOURCE tr ON tr.RESOURCE_ID = r.rp_technology_id\r\n        JOIN T_TASK t ON tr.TASK_ID = t.id\r\n        JOIN T_TASK_HOLDER th ON th.task_id = t.id\r\n        JOIN T_TEAM tm ON tm.id = th.team_id and tm.forEvent = 0) t\r\n);\r\n\r\n/*\r\nselect distinct team_id, team_name from migration_itdr_task_sets;\r\nselect count(*) from migration_itdr_task_sets;\r\nselect distinct * from migration_itdr_task_sets;\r\n*/\r\n\r\n\r\n/*Task Set members*/\r\ndrop table if exists migration_itdr_task_set_members;\r\ncreate table migration_itdr_task_set_members\r\nas (\r\n    select mem.*,\r\n    ROW_NUMBER() OVER (ORDER BY mem.newPortalPlanTechnologyTaskSetId) row_num,\r\n    uuid() newPortalPlanTechnologyTaskSetMemberId\r\n    from \r\n    (select \r\n    DISTINCT\r\n    ts.newPortalPlanTechnologyTaskSetId,\r\n    ts.team_id,\r\n    ts.team_name,\r\n    ud.userId,\r\n    ud.firstName,\r\n    ud.lastName,\r\n    ud.newUserId\r\n    from migration_itdr_task_sets ts\r\n    JOIN T_INDIVIDUAL_ASSIGNMENT ia ON ia.team_id = ts.team_id\r\n    JOIN T_INDIVIDUAL_ASSIGNMENT_MEMBER iam ON ia.id = iam.ASSIGNMENT_ID\r\n    join migration_all_user_data ud on ud.userId = iam.user_id\r\n    order by newPortalPlanTechnologyTaskSetId) mem\r\n);\r\n\r\n/*select * from migration_itdr_task_set_members\r\norder by newPortalPlanTechnologyTaskSetMemberId;*/\r\n\r\n\r\n/*Task Sets Tasks*/\r\ndrop table if exists migration_itdr_task_set_tasks;\r\ncreate table migration_itdr_task_set_tasks\r\nas (\r\n/*Build a task tree - it is a hierarchical data. Sorting will be done after data is migrated to SQL server using hierarchyId data type*/\r\nwith recursive task_tree (id, task_id, team_id, root_position_sort, parent_id, depth, tp) as\r\n(select id, task_id, team_id, root_position + 1 root_position_sort, parent_id, 0, replace(cast((ifnull(root_position, -2) + 1) as char), '-1', '')\r\n from T_TASK_HOLDER\r\nwhere parent_id is null\r\nUNION ALL\r\nselect th.id, th.task_id, th.team_id, tt.root_position_sort, th.parent_id, tt.depth+1, concat(tt.tp, '.', replace(cast((ifnull(th.child_position, -2) + 1) as char), '-1', ''))\r\nfrom T_TASK_HOLDER th\r\njoin task_tree tt on tt.id = th.parent_id\r\nwhere th.parent_id is not null\r\n),\r\nfiltered_tasks as (\r\n    select tt.* from task_tree tt\r\n    join T_TASK t ON t.id = tt.task_id\r\n    where t.event_data_id is null\r\n)\r\n\r\nselect \r\nuuid() newPortalPlanTechnologyTaskId,\r\nts.newPortalPlanTechnologyTaskSetId,\r\nts.team_id,\r\nts.team_name,\r\nt.id task_id,\r\nt.estimatedTime,\r\nt.measure time_measure,\r\nft.tp,\r\nft.root_position_sort topLevelTaskPosition,\r\n/*CONVERT in this case returns TEXT data type (max 65,535 bytes)*/\r\nCONVERT(AES_DECRYPT(t.description, x'37a95c7d900e8ebb39c9d1b36cf448a5') using utf8) task_name,\r\nROW_NUMBER() OVER (ORDER BY ts.newPortalPlanTechnologyTaskSetId) row_num\r\nfrom\r\n/*Select distinct task ids*/\r\n(select distinct \r\ntask_id\r\n from\r\n    (\r\n    /*select tasks directly associated to the teams*/\r\n    select distinct\r\n    tt.task_id\r\n    from\r\n    filtered_tasks tt\r\nUNION\r\n    /*select all tasks associated to the teams via RP task sets*/\r\n    select distinct\r\n    t.id task_id\r\n    from\r\n    migration_itdr_task_sets ts\r\n    join t_team_task_set tts on tts.team_id = ts.team_id\r\n    join t_task t on t.task_set_id = tts.task_set_id and t.event_data_id is null\r\n    ) temp\r\n) dt\r\njoin t_task t on t.id = dt.task_id\r\njoin filtered_tasks ft on ft.task_id = dt.task_id\r\nJOIN migration_itdr_task_sets ts ON ft.team_id = ts.team_id\r\n);\r\n/*\r\nselect * from \r\nmigration_itdr_task_set_tasks\r\norder by newPortalPlanTechnologyTaskSetId, topLevelTaskPosition;\r\n*/\r\n\r\nselect count(*) from migration_itdr_task_set_tasks;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Migrate ITDR TaskSet Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Migrate ITDR Technologies Partitioned",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Migrate ITDR TaskSet Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Migrate ITDR TaskSet Members Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Migrate ITDR TaskSet Partitioned",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Migrate ITDR TaskSet Members Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Migrate ITDR TaskSet Tasks Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Migrate ITDR TaskSet Partitioned",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Migrate ITDR TaskSet Tasks Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Migrate ITDR Vendors Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Migrate ITDR Technologies Partitioned",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Migrate ITDR Vendors Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Migrate ITDR Technology Dependencies Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Migrate ITDR Technologies Partitioned",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Migrate ITDR Technology Dependencies Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Create Technology Attachments List",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Migrate ITDR Technologies Partitioned",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Technologies Attachments List",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Technology Custom Fields Values Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Migrate ITDR Technologies Partitioned",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Technology Custom Fields Values Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"currentPortalId": {
						"type": "String"
					},
					"portalPlanTypeId": {
						"type": "String"
					},
					"insertSQL": {
						"type": "Array"
					},
					"taskSetInsertSql": {
						"type": "Array"
					},
					"membersSQL": {
						"type": "Array"
					},
					"teamsSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Create ITDR portalPlanType - not used')]",
				"[concat(variables('factoryId'), '/pipelines/Get Portal Id By DB Name')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate ITDR Technologies Partitioned')]",
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate ITDR TaskSet Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate ITDR TaskSet Members Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate ITDR TaskSet Tasks Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate ITDR Vendors Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate ITDR Technology Dependencies Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Create Technologies Attachments List')]",
				"[concat(variables('factoryId'), '/pipelines/Technology Custom Fields Values Partitioned')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orchestrator Incidents')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup RP Events",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set variable preparisFolderGuid whenFolderExists_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "with dupe_event_name as (\n    select name, count(id) \n    from t_event \n    where deleted = 0\n    group by name\n    having count(id) > 1\n)\n, dupe_event_data as (\n    select id\n    , CONCAT(e.name,'_', cast(DATE(creationTime) as char)) as name \n    , creationTime\n    , description\n    from t_event e\n    join dupe_event_name de on e.name = de.name\n    where e.deleted = 0\n)\n, no_dupe_event_data as (\n    select id\n    , e.name\n    , creationTime\n    , description\n    from t_event e\n    left join dupe_event_name de on e.name = de.name\n    where e.deleted = 0\n    and de.name is null\n)\n, unique_event_data as(\n    select * from dupe_event_data\n    UNION\n    select * from no_dupe_event_data\n)\n\nselect id\n, replace(name, '''','''''') name\n, creationTime\n, replace(description, '''','''''') description\nfrom unique_event_data\n",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach RP Event",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup RP Events",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup RP Events').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Script create ppdocsDocumentHistory",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy Document from RP to Blob",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO ppdocsDocumentHistory\n    (documentHistoryId,documentId,archivedDocumentId,documentHistoryEventTypeId,additionalDetails,dateTimeCreated,createdById)\nVALUES(\n    '@{guid()}'\n    ,'@{variables('thisDocumentId')}'\n    ,'@{guid()}'\n    ,'46004597-7A44-434C-9792-5B763FDA45BD'\n    ,'Migration from Recovery Planner'\n    ,GETDATE()\n    ,'@{activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisUserId}'\n)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Script Merge into ppdocsDocuments",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Script create ppdocsDocumentHistory",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "IF NOT EXISTS(SELECT 1 FROM ppdocsDocuments WHERE documentId = '@{variables('thisDocumentId')}') \nBEGIN\n  INSERT INTO ppdocsDocuments\n  (documentId,documentName,documentFileName,description,documentStateId,folderId,owningAccountId,sizeInBytes,versionInfo,tagsJson,metadataJson,dateTimeCreated,createdById)\n  VALUES\n  ('@{variables('thisDocumentId')}'\n  ,'@{item().name}'\n  ,'@{item().name}.pdf'\n  ,'@{item().description}'\n  ,'a615996c-640f-47d1-948a-4a3cb1bc7766'\n  ,'@{variables('preparisFolderGuid')}'\n  ,'@{activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisUserId}'\n  ,@{activity('Copy Document from RP to Blob').output.dataWritten}\n  ,null\n  ,NULL\n  ,NULL\n  ,CURRENT_TIMESTAMP\n  ,'@{activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisUserId}');\nEND\nELSE\nBEGIN\n  UPDATE ppdocsDocuments\n  SET documentName = '@{item().name}',\n        documentFileName = '@{item().name}.pdf',\n        description = '@{item().description}',\n        documentStateId = 'a615996c-640f-47d1-948a-4a3cb1bc7766',\n        folderId = '@{variables('preparisFolderGuid')}',\n        owningAccountId = '@{activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisUserId}',\n        sizeInBytes = @{activity('Copy Document from RP to Blob').output.dataWritten},\n        versionInfo = NULL,\n        tagsJson = NULL,\n        metadataJson = NULL,\n        lastModifiedById = '@{activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisUserId}',\n        dateTimeLastModified = CURRENT_TIMESTAMP\n  WHERE documentId = '@{variables('thisDocumentId')}'\nEND",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Copy Document from RP to Blob",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "If Condition1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET",
												"additionalHeaders": {
													"value": "Rpxsession-Id: @{activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.rpSessionToken}  \nRpxclient-Id: @{activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.rpClientId}",
													"type": "Expression"
												},
												"requestTimeout": ""
											},
											"formatSettings": {
												"type": "BinaryReadSettings"
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "Binary_RP_Incident",
											"type": "DatasetReference",
											"parameters": {
												"eventId": {
													"value": "@item().id",
													"type": "Expression"
												},
												"rpBaseUrl": {
													"value": "@pipeline().parameters.rpBaseURL",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Binary_PreparisDocument",
											"type": "DatasetReference",
											"parameters": {
												"documentIdGuid": {
													"value": "@variables('thisDocumentId')",
													"type": "Expression"
												},
												"fileName": {
													"value": "@concat(item().name,'.pdf')",
													"type": "Expression"
												},
												"baseUrl": {
													"value": "@pipeline().globalParameters.PreparisStorageAccountBaseUrl",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Lookup existing document",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderQuery": {
												"value": "select documentId from ppdocsDocuments \nwhere documentName = '@{item().name}'\nand folderId = '@{variables('preparisFolderGuid')}'\nand documentStateId = 'a615996c-640f-47d1-948a-4a3cb1bc7766'\nand owningAccountId = '@{activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisUserId}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "Preparis",
											"type": "DatasetReference",
											"parameters": {}
										},
										"firstRowOnly": false
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Lookup existing document",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(activity('Lookup existing document').output.count,1)",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Set variable thisDocumentId",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "thisDocumentId",
													"value": {
														"value": "@{guid()}",
														"type": "Expression"
													}
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Set variable thisDocumentId existing",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "thisDocumentId",
													"value": {
														"value": "@activity('Lookup existing document').output.value[0].documentId",
														"type": "Expression"
													}
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Execute Pipeline Get or Replace Preparis Folder",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get Document Migration Objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get or Create Preparis Folder",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisBaseURL": {
									"value": "@pipeline().parameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().parameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								},
								"preparisSessionToken": {
									"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisSessionToken",
									"type": "Expression"
								},
								"entityId": {
									"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisCurrentPortalId",
									"type": "Expression"
								},
								"rootEntityId": {
									"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisCurrentPortalId",
									"type": "Expression"
								},
								"folderId": {
									"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisRootFolderId",
									"type": "Expression"
								},
								"portalId": {
									"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisCurrentPortalId",
									"type": "Expression"
								},
								"folderName": {
									"value": "@pipeline().parameters.folderName",
									"type": "Expression"
								},
								"parentFolderId": {
									"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisRootFolderId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable preparisFolderGuid whenFolderExists_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get or Replace Preparis Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "preparisFolderGuid",
							"value": {
								"value": "@activity('Execute Pipeline Get or Replace Preparis Folder').output.pipelineReturnValue.preparisFolderGuid",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Get Document Migration Objects",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Document Migration Objects",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_server_name",
									"type": "Expression"
								},
								"preparisBaseURL": {
									"value": "@pipeline().parameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().parameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								},
								"rpBaseURL": {
									"value": "@pipeline().parameters.rpBaseURL",
									"type": "Expression"
								},
								"rpRestUserName": {
									"value": "@pipeline().parameters.rpRestUserName",
									"type": "Expression"
								},
								"rpRestUserPassword": {
									"value": "@pipeline().parameters.rpRestUserPassword",
									"type": "Expression"
								},
								"rpClientId": {
									"value": "@pipeline().parameters.rpClientId",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rp_db_name": {
						"type": "string"
					},
					"rp_server_name": {
						"type": "string",
						"defaultValue": "recovery-planner-mysql-server.mysql.database.azure.com"
					},
					"preparisBaseURL": {
						"type": "string"
					},
					"preparisDeviceIdAsBase64": {
						"type": "string",
						"defaultValue": "cHJvZA=="
					},
					"folderName": {
						"type": "string",
						"defaultValue": "Incidents"
					},
					"rpBaseURL": {
						"type": "string"
					},
					"rpRestUserPassword": {
						"type": "string",
						"defaultValue": "LS3l3cs*"
					},
					"rpRestUserName": {
						"type": "string",
						"defaultValue": "RPSupport86421"
					},
					"rpClientId": {
						"type": "string"
					}
				},
				"variables": {
					"preparisFolderGuid": {
						"type": "String"
					},
					"thisDocumentId": {
						"type": "String"
					},
					"insertSQL": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T19:48:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Get or Create Preparis Folder')]",
				"[concat(variables('factoryId'), '/pipelines/Get Document Migration Objects')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]",
				"[concat(variables('factoryId'), '/datasets/Binary_RP_Incident')]",
				"[concat(variables('factoryId'), '/datasets/Binary_PreparisDocument')]",
				"[concat(variables('factoryId'), '/datasets/Preparis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orchestrator Migrate Single Portal')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Migration Tables",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Validate New API RP Credentials",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Check RP Session Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "DROP TABLE if exists migration_all_user_data;\r\n\r\nCREATE TABLE migration_all_user_data AS (\r\n\r\n    with user_role_status_data as (\r\n        SELECT \r\n            u.id as userId\r\n            , case \r\n                when u.role is NULL or u.role = 5 then 'LISTED'\r\n                when u.role = 4 then 'USER' \r\n                when u.role = 3 then 'MANAGER'\r\n                when u.role = 2 THEN 'ADMIN' \r\n                when u.role = 1 then 'PARTNER' \r\n                when u.role = 0 then 'SYSTEM' \r\n            end AS role\r\n            , case u.status when 0 then 'ACTIVE' when 1 then 'INACTIVE' when 2 then 'LOCKED' when 3 then 'TERMINATED' end AS status\r\n            , COALESCE(ci.email,c.name, CONCAT(c.firstName,'_',c.lastName,'_NoEmailOrContactName')) as username\r\n            , IFNULL(u.password,'') as password\r\n            , c.firstName\r\n            , c.lastName\r\n            , ci.pin\r\n            , u.title\r\n            , u.employeeID\r\n        FROM T_CONTACT c\r\n        LEFT JOIN T_USER u ON c.id = u.id\r\n        left JOIN T_CONTACT_INFO ci ON c.id = ci.owner_id and ci.primaryEmail = 1\r\n        /*new rule when you pull users from RecoveryPlanner. If their Role is System they need to be ignored and not migrated.  02_27_2024*/\r\n        where u.role != 0\r\n        and u.status != 3\r\n    )\r\n    , user_stateId_data as ( \r\n        select \r\n            * \r\n            , case \r\n                when status = 'INACTIVE' then 'ffb8849c-4dc6-4c66-9d00-f93ac2ef260b' /*INACTIVE*/\r\n                when role = 'LISTED' or username = '' then 'c1ff019b-b3f6-411c-b04e-59294e9090fe'  /*ACTIVE*/\r\n                else 'b5d6bc28-5e6d-4bd1-b028-f7e9a6c6b7a1' /*PENDING*/\r\n            end as userStateId\r\n        from user_role_status_data\r\n    )\r\n\r\n    select *\r\n    , (SELECT uuid()) as newUserId \r\n    , (SELECT uuid()) as entityUserItemId\r\n    from user_stateId_data\r\n);\r\n\r\n/*  DEDUPE USERNAME DATA */\r\ndrop table if exists migration_deduped_username_data;\r\n\r\ncreate table migration_deduped_username_data as (\r\n    with duplicated_userName_data as (\r\n        select \r\n        count(newUserId) dupeCount\r\n        , username\r\n        from migration_all_user_data mud\r\n        where mud.role != 'LISTED'\r\n        group by username\r\n        having count(newUserID) > 1\r\n    )\r\n    , keep_duplicated_userId as(\r\n        select min(mud.userId) userId, mud.username\r\n        from duplicated_userName_data dud\r\n        join migration_all_user_data mud on dud.username = mud.username\r\n        where mud.role != 'LISTED'\r\n        group by mud.username\r\n    )\r\n    , keep_duplicated_user_data as(\r\n        select mud.userId\r\n        , role\r\n        , 'PENDING' as status  /*  this is meaningless, the userStateId drives this data */\r\n        , mud.username\r\n        , mud.password\r\n        , mud.firstName\r\n        , mud.lastName\r\n        , mud.pin\r\n        , mud.title\r\n        , userStateId\r\n        , mud.newUserId\r\n        , mud.EntityUserItemId\r\n        , mud.employeeID\r\n        from keep_duplicated_userId kud\r\n        join migration_all_user_data mud on kud.userId = mud.userId\r\n    )\r\n    , overwrite_duplicated_user_data as (\r\n        select mud.userId\r\n        , 'LISTED' as role\r\n        , 'ACTIVE' as status\r\n        , case when mud.username like '_%@_%._%' then mud.username else '' end as username\r\n        , mud.password\r\n        , mud.firstName\r\n        , mud.lastName\r\n        , mud.pin\r\n        , mud.title\r\n        , 'c1ff019b-b3f6-411c-b04e-59294e9090fe' as userStateId  /*ACTIVE*/\r\n        , mud.newUserId\r\n        , mud.EntityUserItemId\r\n        , mud.employeeID\r\n        from duplicated_userName_data dud\r\n        join migration_all_user_data mud on dud.username = mud.username\r\n        left join keep_duplicated_userId kud on mud.userId = kud.userId\r\n        where kud.userId is null \r\n        and mud.role != 'LISTED'\r\n    )\r\n    select * from keep_duplicated_user_data\r\n    union\r\n    select * from overwrite_duplicated_user_data\r\n);\r\n\r\n\r\n/* MIGRATION USER DATA */\r\n\r\ndrop table if exists migration_user_data;\r\n\r\ncreate table migration_user_data as (\r\n    with mud as (\r\n        select aud.userId\r\n            , aud.role\r\n            , aud.status\r\n            , case when aud.username like '_%@_%._%' then aud.username else '' end as username\r\n            , aud.password\r\n            , aud.firstName\r\n            , aud.lastName\r\n            , aud.pin\r\n            , aud.title\r\n            , aud.userStateId\r\n            , aud.newUserId\r\n            , aud.EntityUserItemId \r\n            , aud.employeeID\r\n        from migration_all_user_data aud\r\n        left join migration_deduped_username_data dud on aud.userid = dud.userId\r\n        where dud.userid is null\r\n\r\n        union \r\n\r\n        select * from migration_deduped_username_data\r\n    )\r\n    select ROW_NUMBER() OVER (ORDER BY userId) row_num\r\n    , mud.*\r\n    from mud\r\n);\r\n\r\n/*PROFILE*/\r\nDROP TABLE if exists migration_user_profile;\r\n\r\nCREATE TABLE migration_user_profile AS (\r\n    with combined_user_profile as(\r\n        select \r\n        (SELECT uuid()) as userProfileId\r\n        , newUserId \r\n        , firstName\r\n        , lastName\r\n        , pin\r\n        , title\r\n        from migration_user_data ud\r\n    )\r\n    select \r\n    ROW_NUMBER() OVER (ORDER BY userProfileId) row_num\r\n    , cup.*\r\n    from combined_user_profile cup    \r\n);\r\n\r\n/* EMAILS */\r\n\r\n/*\r\nemailTypeId\t                            emailTypeName\r\nd440a213-3ab4-4fb9-b306-5f567141ac53\tBilling   -> preparisBillingEmail\r\nd2b1d156-bdf9-4223-9368-825a448025ad\tBusiness  -> preparisBusinessEmail\r\nacb4f38f-3642-472a-8de2-dcead28584a2\tPersonal  -> preparisPersonalEmail\r\n\r\n    Email data, map lowest internal ID data per distribution type that has data. \r\n        rp.user.email(Business Distribution Email)= p.user.email(Email)\r\n        rp.user.email(Personal Distribution Email) = p.user.email(Personal Email)\r\n\r\n\tdistributionType\r\n\t\t0 = business\r\n\t\t1 = personal\r\n\r\nselect * from T_CONTACT_TYPE\r\n*/\r\n\r\ndrop table if exists migration_all_userEmails;\r\n\r\ncreate table migration_all_userEmails as (\r\n    select \r\n        (select uuid()) as newEmailId\r\n        , mud.newUserId\r\n        , ci.id as rpEmailId\r\n        , ct.name  \r\n        , cast(AES_DECRYPT(ci.contactName, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) as contactName\r\n        , ci.email\r\n        , ci.emailToSms\r\n        , ci.primaryEmail\r\n        , ct.mappedName\r\n        , ct.distributionType\r\n        , case \r\n            when ct.distributionType = 0 then 'd2b1d156-bdf9-4223-9368-825a448025ad'\r\n            when ct.distributionType = 1 then 'acb4f38f-3642-472a-8de2-dcead28584a2'\r\n            end as 'emailAddressTypeId'\r\n\r\n    from migration_user_data mud\r\n    LEFT JOIN T_CONTACT_INFO ci ON mud.userId = ci.owner_id\r\n    left join migration_deduped_username_data dud on mud.userID = dud.userId and dud.role = 'LISTED'\r\n    JOIN T_CONTACT_TYPE ct ON ci.contact_type_id = ct.id\r\n    JOIN T_CONTACT_METHOD cm on ct.contact_method_id = cm.id\r\n    where cm.name = 'EMAIL'\r\n);\r\n\r\ndrop table if exists migration_userEmails_initial;\r\ncreate table migration_userEmails_initial as (\r\n    select minEmailId\r\n            ,newEmailId\r\n            ,newUserId\r\n            ,name\r\n            ,contactName\r\n            ,email\r\n            ,emailToSms\r\n            ,primaryEmail\r\n            ,distributiontype\r\n            ,emailAddressTypeId from\r\n(select ROW_NUMBER() over (partition by newUserId, emailAddressTypeId order by rpEmailId) internalRowNum\r\n            ,rpEmailId minEmailId\r\n            ,newEmailId\r\n            ,newUserId\r\n            ,name\r\n            ,contactName\r\n            ,email\r\n            ,emailToSms\r\n            ,primaryEmail\r\n            ,distributiontype\r\n            ,emailAddressTypeId\r\n        from migration_all_userEmails) em\r\nwhere internalRowNum = 1\r\n);\r\n\r\n/*  If a user has a personal email, but no business email, create the business email data \r\ncould not do inline insert with multiple CTE, kept getting error: check the manual that corresponds to your MySQL server version for the right syntax to use near 'insert into\r\n so I create a physical table to do the insert instead\r\n*/\r\n\r\ndrop table if exists migration_userEmails_additionalBusinessEmail;\r\ncreate table migration_userEmails_additionalBusinessEmail as (\r\n    with users_personal as (\r\n        select distinct newUserId \r\n        from migration_userEmails_initial \r\n        where emailAddressTypeId = 'acb4f38f-3642-472a-8de2-dcead28584a2'\r\n    )\r\n    , users_business as (\r\n        select distinct newUserId \r\n        from migration_userEmails_initial \r\n        where emailAddressTypeId = 'd2b1d156-bdf9-4223-9368-825a448025ad'\r\n    )\r\n    , target_users_to_create_business as (\r\n        select up.* \r\n        from users_personal up\r\n        left join users_business ub on up.newUserId = ub.newUserId\r\n        where ub.newUserId is NULL\r\n    )\r\n\r\n    /* protect from dupes*/\r\n    , distinct_target_users as (\r\n        select min(mue.minEmailID) minEmailId, mue.newUserId \r\n        from target_users_to_create_business tu\r\n        join migration_userEmails_initial mue on tu.newUserId = mue.newUserId\r\n        group by newUserId\r\n    )\r\n\r\n    select mue.minEmailId\r\n        , uuid() as newEmailId\r\n        , mue.newUserId\r\n        , mue.name\r\n        , mue.contactName\r\n        , mue.email\r\n        , mue.emailToSms\r\n        , 0 as primaryEmail \r\n        , 0 as distributionType\r\n        , 'd2b1d156-bdf9-4223-9368-825a448025ad' as emailAddressTypeId\r\n        from distinct_target_users dtu\r\n        join migration_userEmails_initial mue on dtu.newUserId = mue.newUserId\r\n);\r\n\r\n\r\ndrop table if exists migration_userEmails;\r\ncreate table migration_userEmails as (\r\n\r\n    with combined_email_data as (\r\n        select * from migration_userEmails_initial\r\n        UNION\r\n        select * from migration_userEmails_additionalBusinessEmail\r\n    )\r\n    select \r\n    ROW_NUMBER() OVER (ORDER BY newEmailId) row_num\r\n    , ced.*\r\n    from combined_email_data ced  \r\n);\r\n\r\n\r\n/*ROLE BUNDLE*/\r\nDROP TABLE if exists migration_user_roleBundle;\r\n\r\nCREATE TABLE migration_user_roleBundle AS (\r\n    select \r\n    row_num\r\n    , newUserId \r\n    , role \r\n    from migration_user_data ud\r\n);\r\n\r\n\r\nDROP TABLE if exists migration_site_data;\r\n\r\nCREATE TABLE migration_site_data AS (\r\n    select \r\n    (SELECT uuid()) as newSiteId\r\n    , (SELECT uuid()) as newAddressId\r\n    , (SELECT uuid()) as newMainNumberId\r\n    , (SELECT uuid()) as newFaxNumberId\r\n    , s.id\r\n    , s.legacyId\r\n    , case when length(s.name) > 100 then substring(s.name,1,100) else s.name end as name    \r\n    , s.accessLevel\r\n    , s.address\r\n    , s.address2\r\n    , s.altSiteSeatsAvailable\r\n    /*, s.alternateSite  bit columns in lwcotrust?! */\r\n    /*, s.available*/\r\n    , s.city\r\n    , s.description\r\n    , s.generalEmail\r\n    , s.geoCodeDate\r\n    , s.geoCodeStatus\r\n    , cast((case when (replace(s.latitude, '-', '') REGEXP '^[0-9]+\\\\.?[0-9]*$') = 0 then '0.0' else s.latitude end) as float) latitude\r\n    , cast((case when (replace(s.longitude, '-', '') REGEXP '^[0-9]+\\\\.?[0-9]*$') = 0 then '0.0' else s.longitude end) as float) longitude\r\n    , s.mainFax\r\n    , s.mainNumber\r\n    /*, s.planRequired*/\r\n    /*, s.primarySite*/\r\n    /*, s.region*/\r\n   /* , s.showWeather*/\r\n    , s.siteID\r\n    , s.state\r\n    , s.zip\r\n    , s.contactlist_id\r\n    , s.country_id\r\n    , s.currentSurvey_id\r\n    , s.alert_id\r\n    , c.name as siteCountryName\r\n    , c.code as countryCode\r\n    , c.phonePrefix as countryPhonePrefix\r\n    , case c.code \r\n        when 'US' then 'B4F1E6F9-D824-4F8B-8B4D-071D176FD9F3' \r\n        else 'E07182E2-6B17-420B-A613-33BF652B7E44' \r\n        end as 'PhoneTypeSubType'\r\n    from T_SITE s \r\n    LEFT JOIN T_COUNTRY c on s.country_id = c.id\r\n);\r\n\r\n\r\ncreate table if not exists migration_preparis_userCountry as (\r\n    Select 'B6ACC878-8EB9-41D6-A636-03921C8FF9FB' as 'CountryTypeId', 'Nigeria' as 'CountryTypeName'union \r\n    Select 'C87CAF13-D2C2-4D89-8ED3-0713814CC627', 'Norway' union \r\n    Select 'B352135E-0AD1-4518-A4CE-07D774EF6FDE', 'China' union \r\n    Select '43870421-4D2F-42C6-8B89-084DC6F8586A', 'Bahrain' union \r\n    Select '84C31639-DD3A-4D1B-98ED-09C332775495', 'Argentina' union \r\n    Select 'B4BD6E63-6EB1-4617-B3E0-0E30CB80E5E7', 'Lithuania' union \r\n    Select '0E703272-3672-485B-9E28-1866CE7844FD', 'Korea, Republic of' union \r\n    Select 'CF7F7DE8-A69F-4B36-A142-1289D1495119', 'Hong Kong' union \r\n    Select '04ADA07F-1F50-4358-B2CC-1340E337B6C7', 'Mauritius' union \r\n    Select '46FC1E96-2BE0-4AC4-A2A5-134D7049B829', 'Cameroon' union \r\n    Select '623C4DE2-764E-4EAB-A070-1512C9C368D7', 'El Salvador' union \r\n    Select 'B5CF4E7E-9D24-498C-9547-164A14906020', 'Finland' union \r\n    Select '293909AF-BBB1-4714-9056-27D9FC5645E6', 'Jersey' union \r\n    Select '88DA79E6-2623-47D3-93F9-2A6F28E30900', 'India' union \r\n    Select '655EDCB9-F22D-413A-996D-313B719133F6', 'Kazakhstan' union \r\n    Select '37A8443F-0C69-4563-8004-37A6013529C7', 'Macau' union \r\n    Select 'E18A52FD-C318-44F6-BD4E-3A956F594810', 'Equatorial Guinea' union \r\n    Select 'ABC7ACE5-8FA0-4897-A0AB-3AA23E378080', 'Uruguay' union \r\n    Select '07AA6006-882F-4A3C-BDEA-44F1F282F9DC', 'Bermuda' union \r\n    Select 'EE20D858-011F-4E97-9729-50AEEE0D69DD', 'Malta' union \r\n    Select 'CBF776D1-3482-4984-B51C-548989BEDE4A', 'Bolivia' union \r\n    Select 'ABFDAC74-265E-4521-976D-570B7CED3881', 'Thailand' union \r\n    Select 'E9BD6F88-D62A-4F52-95F4-5A0B6E684A1A', 'United States Virgin Islands' union \r\n    Select 'E0712A04-2CDB-4CFC-B0D4-5A3F4DCA0F50', 'Ireland' union \r\n    Select '2BF5D5C2-DA98-469A-B5AF-5E78A09F7D3D', 'Russian Federation' union \r\n    Select 'DF1B16BA-B7DB-4344-BEF3-616021F46F51', 'Taiwan' union \r\n    Select '2B3819DB-1BCB-478C-A9C9-64D29CB6D88C', 'Grenada' union \r\n    Select 'B7BEE327-7BE4-405D-AC47-694F54BAFB81', 'Belgium' union \r\n    Select '871A59AF-9412-477B-AEEA-69D86F9A5869', 'Mongolia' union \r\n    Select 'CE67B074-909F-45F2-8FDE-6A7AF1F480B7', 'Tunisia' union \r\n    Select 'E02AEF50-3871-41DF-B34D-740E2A0E869C', 'Azerbaijan' union \r\n    Select '9A64B9EA-4D3F-4872-8542-744544000800', 'United Kingdom' union \r\n    Select '4EF914B9-A5E1-4CAE-919E-77DD8EB08B2F', 'South Africa' union \r\n    Select '98865216-88A1-4D63-8D42-7937CABED4BC', 'Venezuela' union \r\n    Select 'E03665AC-F774-42D7-A648-7949C85E63C1', 'United Arab Emirates' union \r\n    Select '949EFF05-C41C-4D40-8FE5-7B93455D310B', 'North America' union \r\n    Select '0026A74D-6110-40DD-A2A7-827CF94884EE', 'Senegal' union \r\n    Select '6601A72C-BDB7-43B0-BCBA-8474F3BE0F45', 'Sweden' union \r\n    Select 'D7B2C181-1BA4-4619-ABA3-84B111A686F0', 'Malaysia' union \r\n    Select 'B18FA7F1-6EAA-4F48-B949-850F28D404FF', 'Spain' union \r\n    Select '92D1DC15-293F-485C-BF11-89F1F8CAC8A4', 'Gabon' union \r\n    Select 'F96C6543-83FE-499C-B06F-8DFBF1DE9B09', 'Myanmar' union \r\n    Select '9D208012-47F1-4D07-BD0B-9452A8A7FA64', 'Netherlands' union \r\n    Select '50CC2E57-CE21-4F77-A045-955FC487DAB5', 'Colombia' union \r\n    Select 'BB03198D-80E7-44C8-9944-9A430DADB28B', 'Qatar' union \r\n    Select '2DE84440-8D51-409A-AB83-9A53F79C3748', 'Brazil' union \r\n    Select 'BE7B6CF1-9735-49FE-9F72-A0CA1747FDF6', 'Asia' union \r\n    Select 'F4C13630-D69B-44D8-8695-A24CB0C3A273', 'Germany' union \r\n    Select '366F8A30-870D-4DA1-8B4F-A33FF64F3096', 'Congo, The Democratic Republic of the' union \r\n    Select '2BFE289E-8E60-4B39-BCE2-A3E3838CAE13', 'Puerto Rico' union \r\n    Select 'A35C0353-FDB9-4306-8777-A591CBC9F603', 'Kuwait' union \r\n    Select 'E1796D45-1C3A-46A7-8BD7-A62D030FBE36', 'Hungary' union \r\n    Select '7E543277-5D04-4577-835D-A7512DE441A8', 'Libya' union \r\n    Select 'DA3A869B-01A1-4A66-8DBA-A92BA20A22A3', 'Ecuador' union \r\n    Select 'A0FBC350-0CA7-4279-8DE6-AA4608A8CF9D', 'Honduras' union \r\n    Select '910A34DE-6AE0-4E2C-B58A-AC1CD9546B60', 'Canada' union \r\n    Select '2B3648AB-F413-49C4-97B8-AF37FD8735C7', 'Peru' union \r\n    Select '4C175BB7-3E32-4DE5-A519-B32260FA95DC', 'Mexico' union \r\n    Select '86DFB79F-1C2D-4744-A9B0-B87C2469D30D', 'Uganda' union \r\n    Select 'F1E6CD7A-A2EE-4A5E-89F6-BB01B5929077', 'Denmark' union \r\n    Select '42FA9678-CEDB-46BD-8BAE-BE374CD5CBB7', 'Congo, The Republic of the' union \r\n    Select 'BF5F6377-A748-4065-B1DD-BE71D47AF6D0', 'Romania' union \r\n    Select '9A81E2A8-334E-41DD-843F-C09E5E7E4E6A', 'Georgia' union \r\n    Select '38E06442-3107-40FA-9ED8-C436893CCF21', 'Costa Rica' union \r\n    Select '2D76605B-86B5-40FF-9A71-C4893E5916FB', 'United States' union \r\n    Select '466AA62A-7E3D-4C80-88BE-C7EA8416DA03', 'British Virgin Islands' union \r\n    Select 'DDB7C070-09D0-4517-88E0-CA6FD5646CA0', 'Poland' union \r\n    Select 'E339FBC0-711C-451A-A7D2-CBB7F883BA67', 'Mozambique' union \r\n    Select 'F843F3BB-4820-4EDA-BB5C-D5636CD2D532', 'Egypt' union \r\n    Select '223B88FD-69EA-4A4B-B21D-D725693D61F5', 'Angola' union \r\n    Select '3B12AEE6-D695-4F14-94E7-DA4FFE183D29', 'Oman' union \r\n    Select '1DD60AC9-2E5A-421C-97E9-DC26AB9F5E61', 'Luxembourg' union \r\n    Select '0A979A1A-7BCC-4540-BB25-DCEC89DFAF31', 'Chile' union \r\n    Select '81E875E5-6392-45E7-9104-DD50F7F307C5', 'Iraq' union \r\n    Select '920093F8-8A30-4895-8481-DDCC68CEEE3C', 'Viet Nam' union \r\n    Select '782DEB1D-31EB-4F49-9EB8-DE5FA4609954', 'Czech Republic' union \r\n    Select 'E8989E1B-8013-4B57-BF35-DFA9521F3491', 'Singapore' union \r\n    Select '2FAA3F54-C7F9-4F79-BEC4-E241B3BC4788', 'Saudi Arabia' union \r\n    Select 'D172FD46-9993-4FC3-83AB-E2F55A7721CB', 'Barbados' union \r\n    Select 'C82C9859-DEAB-4184-B609-E336E4C20A16', 'Cayman Islands' union \r\n    Select '0BA54706-9003-4F5F-8F6B-E39308FFFF96', 'Japan' union \r\n    Select '0B4D1AFD-007B-495E-9285-E8C7489068F2', 'Gibraltar' union \r\n    Select '63142716-400A-4866-AAA1-E9493F9674E1', 'Kenya' union \r\n    Select 'B6A3467B-C0A0-4177-AEA4-EB9598E382DB', 'Switzerland' union \r\n    Select 'AACF9CFF-2721-43AC-B6BC-EDC1E166A8EE', 'Australia' union \r\n    Select '10BEAE98-4504-4611-A83E-F12BEA302BEB', 'Italy' union \r\n    Select '97963F8D-1A49-48B2-99B8-F5EEE012A233', 'Guyana' union \r\n    Select 'C4197838-C032-4AAF-8A9B-FACAB71A4398', 'France' union \r\n    Select '8BB66470-F47D-4A9D-A808-FE885F235BF9', 'Ghana' \r\n);\r\n\r\ncreate table if not exists migration_country_mapping as (\r\n    select rpc.name as recoveryPlannerCountryName, pc.CountryTypeName, pc.CountryTypeId \r\n    from  T_COUNTRY rpc\r\n    join migration_preparis_userCountry pc on rpc.name = pc.CountryTypeName\r\n        or rpc.name = case \r\n                        when pc.CountryTypeName = 'Macau' then 'Macao' \r\n                        when pc.CountryTypeName = 'United States Virgin Islands' then 'Virgin Islands, U.S.'  \r\n                        when pc.CountryTypeName = 'Congo, The Republic of the' then 'Congo' \r\n                        when pc.CountryTypeName = 'Virgin Islands, British' then 'British Virgin Islands' \r\n                    end\r\n);\r\n\r\n\r\n/*  ADDRESSES */\r\n\r\ndrop table if exists migration_all_userAddresses;\r\n\r\ncreate table migration_all_userAddresses as (\r\n    select \r\n        (select uuid()) as newAddressId\r\n        , mud.newUserId\r\n        , mud.userId\r\n        , ci.id as rpAddressId\r\n        , ct.name  \r\n        , cast(AES_DECRYPT(ci.line1, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) line1\r\n        , cast(AES_DECRYPT(ci.line2, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) line2\r\n        , cast(AES_DECRYPT(ci.city, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) city\r\n        , cast(AES_DECRYPT(ci.state, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) state\r\n        , cast(AES_DECRYPT(ci.zip, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) zip\r\n        , mcm.recoveryPlannerCountryName\r\n        , mcm.CountryTypeName\r\n        , case when mcm.CountryTypeId is NULL or mcm.CountryTypeId = '' then '2D76605B-86B5-40FF-9A71-C4893E5916FB' \r\n            else mcm.CountryTypeId\r\n            end as CountryTypeId\r\n        , cast(replace(ci.latitude,',','') as float) as latitude\r\n        , cast(replace(ci.longitude,',','') as float) as longitude\r\n    from migration_user_data mud\r\n    LEFT JOIN T_CONTACT_INFO ci ON mud.userId = ci.owner_id\r\n    JOIN T_CONTACT_TYPE ct ON ci.contact_type_id = ct.id\r\n    JOIN T_CONTACT_METHOD cm on ct.contact_method_id = cm.id\r\n    JOIN T_COUNTRY cic on ci.country_id = cic.id\r\n    LEFT JOIN migration_country_mapping mcm on mcm.recoveryPlannerCountryName = cic.name\r\n    where cm.name = 'Address' \r\n);\r\n\r\ndrop table if exists migration_userAddresses;\r\n\r\ncreate table migration_userAddresses as (\r\n    with home_addresses as (\r\n        select  min(rpAddressId) 'minHomeAddressId'\r\n            ,ua.newAddressId\r\n            ,ua.newUserId\r\n            ,ua.name\r\n            ,ua.line1\r\n            ,ua.line2\r\n            ,ua.city\r\n            ,ua.state \r\n            ,ua.zip\r\n            ,ua.recoveryPlannerCountryName\r\n            ,ua.CountryTypeName\r\n            ,ua.CountryTypeId\r\n            ,ua.latitude\r\n            ,ua.longitude\r\n            ,'8BBE4178-8ADB-48AE-9035-6D683F855916' as 'userAddressTypeId'\r\n        from migration_all_userAddresses ua\r\n        where name = 'Home Address'\r\n        group by     \r\n            ua.newAddressId\r\n            ,ua.newUserId\r\n            ,ua.name\r\n            ,ua.line1\r\n            ,ua.line2\r\n            ,ua.city\r\n            ,ua.state \r\n            ,ua.zip\r\n            ,ua.recoveryPlannerCountryName\r\n            ,ua.CountryTypeName\r\n            ,ua.CountryTypeId\r\n            ,ua.latitude\r\n            ,ua.longitude\r\n    )\r\n    , business_addresses as (\r\n        select min(rpAddressId) 'minBusinessAddressId' \r\n            ,ua.newAddressId\r\n            ,ua.newUserId\r\n            ,ua.name\r\n            ,ua.line1\r\n            ,ua.line2\r\n            ,ua.city\r\n            ,ua.state \r\n            ,ua.zip\r\n            ,ua.recoveryPlannerCountryName\r\n            ,ua.CountryTypeName\r\n            ,ua.CountryTypeId\r\n            ,ua.latitude\r\n            ,ua.longitude\r\n            ,'8BBE4178-8ADB-48AE-9035-6D683F855916' as 'userAddressTypeId'\r\n        from migration_all_userAddresses ua \r\n        /* A user in Preparis is only allowed a single address. By convention it is generally the home address. So, if they have to you can only map one of them. If they have a home address use that one. If the don’t have a home address use the business address. But we can’t map them both.*/\r\n        left join home_addresses ha on ua.newUserId = ha.newUserId\r\n        where ha.newUserId is null \r\n        and ua.name = 'Business Address'\r\n        group by ua.newAddressId\r\n            ,ua.newUserId\r\n            ,ua.name\r\n            ,ua.line1\r\n            ,ua.line2\r\n            ,ua.city\r\n            ,ua.state \r\n            ,ua.zip\r\n            ,ua.recoveryPlannerCountryName\r\n            ,ua.CountryTypeName\r\n            ,ua.CountryTypeId\r\n            ,ua.latitude\r\n            ,ua.longitude\r\n    )\r\n    , combined_addresses as (\r\n        select * from home_addresses\r\n        UNION\r\n        select * from business_addresses\r\n    )\r\n    select \r\n    ROW_NUMBER() OVER (ORDER BY newAddressId) row_num\r\n    , ca.*\r\n    from combined_addresses ca\r\n);\r\n\r\n/*  USER LOCATION MAPPING => migration_user_primary_site_data */\r\n\r\ndrop table if exists migration_all_user_isPrimary_data ;\r\n\r\ncreate table migration_all_user_isPrimary_data as (\r\n    with migration_all_user_isPrimary_data as (\r\n        select user_id, site_id, isPrimaryForUser, concat(cast(user_id as char),'_',cast(site_id as char)) as composite_key\r\n        from T_USER_SITE\r\n        order by user_id\r\n    )\r\n    select * from migration_all_user_isPrimary_data\r\n);\r\n\r\n/*\r\nselect * from migration_all_user_isPrimary_data\r\n*/\r\n\r\n\r\ndrop table if exists migration_user_without_primary_site_data ;\r\ncreate table migration_user_without_primary_site_data as (\r\n    with userSiteCounts as (\r\n        select distinct user_id\r\n        , (select count(isPrimaryForUser) from migration_all_user_isPrimary_data where user_id = upd.user_id and isPrimaryForUser = 1) primaryCount\r\n        , (select count(isPrimaryForUser) from migration_all_user_isPrimary_data where user_id = upd.user_id and isPrimaryForUser = 0) secondaryCount\r\n        from migration_all_user_isPrimary_data upd\r\n    )\r\n    , users_without_primary as (\r\n        select user_id from userSiteCounts where primaryCount = 0\r\n    )\r\n    select upd.user_id, min(upd.site_id) as min_site_id\r\n    from migration_all_user_isPrimary_data upd\r\n    join users_without_primary uwp on upd.user_id = uwp.user_id\r\n    group by upd.user_id\r\n);\r\n\r\n/*\r\nselect * from migration_user_without_primary_site_data;\r\n*/\r\n\r\n\r\ndrop table if exists migration_user_min_primary_site_data ;\r\ncreate table migration_user_min_primary_site_data as (\r\n    with  migration_user_min_primary_site_data as(\r\n        select min(usd.site_id) site_id, usd.user_id\r\n        from migration_all_user_isPrimary_data usd\r\n        where usd.isPrimaryForUser = 1\r\n        group by usd.user_id\r\n    )\r\n    select * from migration_user_min_primary_site_data\r\n);\r\n/*\r\nselect * from migration_user_min_primary_site_data\r\n*/\r\n\r\ndrop table if exists migration_combined_primary_site_data ;\r\ncreate table migration_combined_primary_site_data as (\r\n    select * from migration_user_min_primary_site_data\r\n    UNION\r\n    select * from migration_user_without_primary_site_data\r\n);\r\n\r\n/*\r\nselect * from migration_combined_primary_site_data;\r\n*/\r\n\r\ndrop table if exists migration_combined_primary_site_data_ck ;\r\ncreate table migration_combined_primary_site_data_ck as (\r\n    with migration_combined_primary_site_data_ck as (\r\n        select *, concat(cast(user_id as char),'_',cast(site_id as char)) as composite_key from migration_combined_primary_site_data\r\n    )\r\n    select * from migration_combined_primary_site_data_ck\r\n);\r\n/*\r\nselect * from migration_combined_primary_site_data_ck\r\n*/\r\n\r\n\r\n\r\ndrop table if exists migration_not_user_primary_site ;\r\ncreate table migration_not_user_primary_site as (\r\n    with migration_not_user_primary_site as(\r\n        select usd.site_id, usd.user_id \r\n        from migration_all_user_isPrimary_data usd\r\n        left join migration_combined_primary_site_data_ck psd on usd.composite_key = psd.composite_key\r\n        where psd.composite_key is null\r\n    )\r\n    select * from migration_not_user_primary_site\r\n);\r\n/*\r\nselect * from migration_not_user_primary_site\r\n20\r\n*/\r\n\r\n\r\ndrop table if exists migration_all_user_isManager_data ;\r\ncreate table migration_all_user_isManager_data as (\r\n    with migration_all_user_isManager_data as (\r\n        select us.user_id, us.site_id, concat(cast(us.user_id as char),'_',cast(us.site_id as char)) as composite_key\r\n        , case ud.role when 'Manager' then 1 else 0 end as 'isManager'\r\n        from T_USER_SITE us\r\n        join migration_user_data ud on us.user_id = ud.userId \r\n        order by user_id\r\n    )\r\n    select * from migration_all_user_isManager_data\r\n);\r\n/*\r\nselect * from migration_all_user_isManager_data\r\n48\r\n*/\r\n\r\n\r\ndrop table if exists migration_user_min_isManager_data ;\r\ncreate table migration_user_min_isManager_data as (\r\n    with  migration_user_min_isManager_data as(\r\n        select min(uim.user_id) user_id, uim.site_id\r\n        from migration_all_user_isManager_data uim\r\n        where uim.isManager = 1\r\n        group by uim.site_id\r\n    )\r\n    select * from migration_user_min_isManager_data\r\n);\r\n/*\r\nselect * from migration_user_min_isManager_data\r\n8\r\n*/\r\n\r\n\r\ndrop table if exists migration_user_min_isManager_data_ck ;\r\ncreate table migration_user_min_isManager_data_ck as (\r\n    with  migration_user_min_isManager_data_ck as (\r\n        select *, concat(cast(user_id as char),'_',cast(site_id as char)) as composite_key from migration_user_min_isManager_data\r\n    )\r\n    select * from migration_user_min_isManager_data_ck\r\n);\r\n/*\r\nselect * from migration_user_min_isManager_data_ck\r\n8\r\n*/\r\n\r\n\r\n\r\ndrop table if exists migration_not_user_isManager ;\r\ncreate table migration_not_user_isManager as (\r\n    with  migration_not_user_isManager as(\r\n        select usd.site_id, usd.user_id \r\n        from migration_all_user_isManager_data usd\r\n        left join migration_user_min_isManager_data_ck uim on usd.composite_key = uim.composite_key\r\n        where uim.composite_key is null\r\n    )\r\n    select * from migration_not_user_isManager\r\n);\r\n/*\r\nselect * from migration_not_user_isManager\r\n40\r\n*/\r\n\r\ndrop table if exists migration_site_manager_data ;\r\ncreate table migration_site_manager_data as (\r\n    with migration_site_manager_data as (\r\n        select *, 1 isManager from migration_user_min_isManager_data\r\n        UNION\r\n        select *, 0 isManager from migration_not_user_isManager\r\n    )\r\n    select * from migration_site_manager_data\r\n);\r\n\r\n/*\r\nselect * from migration_site_manager_data\r\n48\r\n*/\r\n\r\n\r\ndrop table if exists migration_user_primary_site_data ;\r\ncreate table migration_user_primary_site_data as (\r\n    with migration_user_primary_site_data as (\r\n        select \r\n        (SELECT uuid()) as newEntityUserItemId\r\n        , sd.newSiteId\r\n        , ud.newUserId\r\n        , 1 as isPrimaryRelationship\r\n        , IFNULL(smd.isManager,0) isManager\r\n        from migration_combined_primary_site_data ups\r\n        left join migration_site_manager_data smd on ups.user_id = smd.user_id and ups.site_id = smd.site_id\r\n            join migration_user_data ud on ups.user_id = ud.userId \r\n            JOIN migration_site_data sd on ups.site_id = sd.id\r\n    )\r\n    select * from migration_user_primary_site_data\r\n);\r\n/*\r\nselect * from migration_user_primary_site_data\r\n28\r\n*/\r\n\r\n\r\ndrop table if exists migration_not_user_primary_site_data ;\r\ncreate table migration_not_user_primary_site_data as (\r\n    with migration_not_user_primary_site_data as (\r\n        select \r\n        (SELECT uuid()) as newEntityUserItemId\r\n        , sd.newSiteId\r\n        , ud.newUserId\r\n        , 0 as isPrimaryRelationship\r\n        , IFNULL(smd.isManager,0) isManager\r\n        from migration_not_user_primary_site ups\r\n        left join migration_site_manager_data smd on ups.user_id = smd.user_id and ups.site_id = smd.site_id\r\n            join migration_user_data ud on ups.user_id = ud.userId \r\n            JOIN migration_site_data sd on ups.site_id = sd.id\r\n    )\r\n    select * from migration_not_user_primary_site_data\r\n);\r\n\r\n/*\r\nselect * from migration_not_user_primary_site_data\r\n20\r\n*/\r\n\r\n/*\r\nWhen a user only has alternate sites, the one that has the lowest internal ID will be used as the primary location AND make sure that the selecte alertnate site is NOT added as an altern site.\r\n\r\nwhen a user exists in migration_not_user_primary_site_data\r\nAND \r\ndoes not exist in migration_user_site_data\r\n\r\nTHEN:\r\n    - create new table of distinct userids to operate on\r\n    - update isPrimaryRelationship in migration_not_user_primary_site_data to be 1\r\n*/\r\n\r\ndrop table if exists migration_user_to_update_primary ;\r\ncreate table migration_user_to_update_primary as (\r\n    select nup.newuserid \r\n    from migration_not_user_primary_site_data nup\r\n    left join migration_user_primary_site_data up on nup.newuserid = up.newuserid\r\n    where up.newuserid is null\r\n);\r\n\r\nupdate migration_not_user_primary_site_data \r\nset isPrimaryRelationship  = 1\r\nwhere newuserid in (select newuserid from migration_user_to_update_primary);\r\n\r\n\r\ndrop table if exists migration_user_site_data;\r\n\r\ncreate table migration_user_site_data as (\r\n    with combined_user_site_data as(\r\n        select * from migration_user_primary_site_data\r\n        UNION\r\n        select * from migration_not_user_primary_site_data\r\n    )\r\n    select ROW_NUMBER() OVER (ORDER BY newEntityUserItemId) row_num\r\n    , cusd.* \r\n    from combined_user_site_data cusd\r\n);\r\n\r\n/*\r\nselect * from migration_user_site_data;\r\n48\r\n*/\r\n/*\r\nselect newSiteId, count(isManager) \r\nfrom migration_user_site_data\r\nwhere isManager = 1\r\ngroup by newSiteId\r\n;\r\n*/\r\n\r\n/*  DEPARTMENT */\r\n\r\ndrop table if exists migration_department;\r\n\r\ncreate table migration_department as (\r\n    select *\r\n    , (SELECT uuid()) as newDepartmentId\r\n    from t_department\r\n    where dtype = 'DEPARTMENT'\r\n);\r\n\r\ndrop table if exists migration_department_hierarchy;\r\n/*\r\ncreate table migration_department_hierarchy as\r\nselect d.id department_id, d.newDepartmentId, d.parent_id department_parent_id, d.name, d.description\r\n, p.id as parent_id\r\n, p.name as parent_name\r\n, p.newDepartmentId as parent_newDepartmentId\r\nfrom migration_department  d\r\njoin migration_department p on  p.id = d.parent_id\r\n;\r\n*/\r\ndrop table if exists migration_department_users;\r\n\r\ncreate table migration_department_users as(\r\n    with combined_department_users as(\r\n        select \r\n        (SELECT uuid()) as newEntityUserItemId\r\n        , ud.user_id\r\n        , mud.newUserId\r\n        , ud.department_id \r\n        , newDepartmentId\r\n        from T_USER_DEPARTMENT ud\r\n        join migration_user_data mud on mud.userid = ud.user_id\r\n        join migration_department md on md.id = ud.department_id\r\n    )\r\n    select \r\n    ROW_NUMBER() OVER (ORDER BY newEntityUserItemId) row_num\r\n    , cdu.*\r\n    from combined_department_users cdu\r\n);\r\n\r\n\r\n/* GROUP*/\r\ndrop table if exists migration_groups;\r\n\r\ncreate table migration_groups as (\r\n    with notification_name_count as (\r\n        select distinct nl.name, count(id) idCount\r\n        from T_NOTIFICATION_LIST nl\r\n        group by nl.name\r\n    )\r\n    , notification_name_no_dupe as (\r\n        select nnc.name, nl.id, description\r\n        from notification_name_count nnc\r\n        join T_NOTIFICATION_LIST nl on nnc.name = nl.name\r\n        where idCount = 1\r\n    )\r\n    , notification_name_dupe_min as (\r\n        select min(nl.id) as id, nnc.name  \r\n        from notification_name_count nnc\r\n        join T_NOTIFICATION_LIST nl on nnc.name = nl.name\r\n        where nnc.idCount > 1\r\n        group by  nnc.name   \r\n    )\r\n\r\n    , notification_name_dupes as (\r\n        select nnc.name, nl.id, concat(nnc.name,'_',cast(nl.id as char)) as dupeName, nl.description  \r\n        from notification_name_count nnc\r\n        join T_NOTIFICATION_LIST nl on nnc.name = nl.name\r\n        left join notification_name_dupe_min ndm on nl.id = ndm.id\r\n        where nnc.idCount > 1\r\n        and ndm.id is null\r\n    )\r\n    , migration_group_names as(\r\n        select (select uuid()) as newGroupId, name, id, description  from notification_name_no_dupe\r\n        union\r\n        select (select uuid()) as newGroupId, dn.name, dn.id, nl.description  from notification_name_dupe_min dn join T_NOTIFICATION_LIST nl on dn.id = nl.id\r\n        union\r\n        select (select uuid()) as newGroupId, dupeName, id, description  from notification_name_dupes\r\n    )\r\n    \r\n    select distinct mgn.* \r\n    from migration_group_names mgn\r\n    join t_notification_list_contact nlc on mgn.id = nlc.notification_list_id\r\n\r\n);\r\n\r\ndrop table if exists migration_group_users;\r\ncreate table migration_group_users as (\r\n    with group_user_data as (\r\n        select nlm.*, mud.newUserId, mud.userId, (select uuid()) as newEntityUserItemId\r\n        from migration_groups nlm\r\n        join t_notification_list_contact nlc on nlm.id = nlc.notification_list_id\r\n        join migration_user_data mud on nlc.contact_id = mud.userId\r\n    )\r\n    select\r\n    ROW_NUMBER() OVER (ORDER BY newEntityUserItemId) row_num\r\n    , gud.* \r\n    from group_user_data gud\r\n);\r\n\r\n\r\n/*  FUNCTIONAL AREA  */\r\n\r\ndrop table if exists migration_bcPortalFunctionalArea_leaderUserId;\r\n\r\ncreate table migration_bcPortalFunctionalArea_leaderUserId as (\r\n    with admin_department_user as( \r\n        select min(mdu.user_id) as user_id, mdu.department_id\r\n        from migration_department_users mdu\r\n        join migration_user_data mud on mdu.user_id = mud.userid\r\n        where mud.role = 'ADMIN'\r\n        group by mdu.department_id\r\n    )\r\n    , not_admin_department_user as (\r\n        select min(mdu.user_id) as user_id, mdu.department_id\r\n        from migration_department_users mdu\r\n        join migration_user_data mud on mdu.user_id = mud.userid\r\n        left join admin_department_user adu on mdu.department_id = adu.department_id\r\n        where adu.department_id is null\r\n        group by  mdu.department_id\r\n    )\r\n    , lead_data as (\r\n    select * from admin_department_user\r\n    union \r\n    select * from not_admin_department_user\r\n    )\r\n\r\n    select mdu.user_id, mdu.newUserId as leaderUserId, mdu.department_id\r\n    from migration_department_users mdu\r\n    join lead_data ld on ld.user_id = mdu.user_id and ld.department_id = mdu.department_id\r\n    order by mdu.department_id\r\n\r\n);\r\n\r\ndrop table if exists migration_PortalFunctionalArea_data;\r\n\r\ncreate table migration_PortalFunctionalArea_data as (\r\n    with PortalFunctionalArea_data as (\r\n        select distinct \r\n        md.name as portalFunctionalAreaName\r\n        , md.description as portalFunctionalAreaDescription\r\n        , lu.leaderUserId\r\n        , fd.DEPARTMENT_ID\r\n        , md.newDepartmentId\r\n        from migration_department md\r\n        join t_function_department fd on md.ID = fd.DEPARTMENT_ID\r\n        join t_function f on fd.FUNCTION_ID = f.ID\r\n        left join migration_bcPortalFunctionalArea_leaderUserId lu on fd.DEPARTMENT_ID = lu.department_id\r\n    )\r\n    select\r\n        fad.* \r\n        , (Select uuid()) as portalFunctionalAreaId\r\n        , (select uuid()) as bcPortalFunctionalAreaToDepartmentId\r\n    from PortalFunctionalArea_data fad\r\n);\r\n\r\n\r\ndrop table if exists migration_FunctionalArea_data;\r\n\r\ncreate table migration_FunctionalArea_data as (\r\n    select distinct \r\n    md.name as portalFunctionalAreaName\r\n    , md.description as portalFunctionalAreaDescription\r\n    , lu.leaderUserId\r\n    , fd.DEPARTMENT_ID\r\n    , md.newDepartmentId\r\n    from migration_department md\r\n    join t_function_department fd on md.ID = fd.DEPARTMENT_ID\r\n    join t_function f on fd.FUNCTION_ID = f.ID\r\n    left join migration_bcPortalFunctionalArea_leaderUserId lu on fd.DEPARTMENT_ID = lu.department_id\r\n);\r\n\r\ndrop table if exists migration_PortalProcess_data;\r\n\r\ncreate table migration_PortalProcess_data as (\r\n    select distinct \r\n    (Select uuid()) as portalProcessId\r\n    , f.name as portalProcessName\r\n    , f.ID FUNCTION_ID\r\n    , pfa.portalFunctionalAreaName\r\n    , pfa.portalFunctionalAreaId\r\n    , f.description as portalProcessDescription\r\n    from migration_PortalFunctionalArea_data pfa\r\n    join t_function_department fd on pfa.department_ID = fd.DEPARTMENT_ID\r\n    join t_function f on fd.FUNCTION_ID = f.ID\r\n);\r\n\r\n\r\n/*  Map the Recovery Planner site types to Preparis location \"location types\" field.  MG-14*/\r\n\r\ndrop table if exists migration_site_type;\r\n\r\ncreate table migration_site_type as (\r\n    select ts.id, ts.primarySite, ts.alternateSite \r\n    , msd.newSiteId\r\n    , case \r\n        when ts.primarySite = 1 and ts.alternateSite = 1 then '2a136e36-be6d-4d2c-bacf-ee0a3cd08479'\r\n        when ts.primarySite = 1 then 'c97f4496-6d74-45eb-a742-bd6c77dad64f' \r\n        when ts.alternateSite = 1 then 'e7ecddd7-e040-4c92-8359-1861522561a1'\r\n        end as azstudioSettings_value\r\n    , (SELECT uuid()) as newSettingId \r\n    from T_SITE ts\r\n    join migration_site_data msd on ts.id = msd.id\r\n);\r\n\r\n\r\n\r\n\r\n/* notification lists  MG-15 */\r\ndrop table if exists migration_notification_list_names;\r\n\r\n\r\nselect 'DONE' as 'Lookup Activity Hack';",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Execute Pipeline Create Preparis Portal",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Preparis Portal",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"CompanyName": {
									"value": "@variables('CompanyName')",
									"type": "Expression"
								},
								"PortalEntityID": {
									"value": "@variables('PortalEntityID')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Create new EntityID",
						"description": "Create the new EntityID and put into a variable that can be re-used without doing a lookup. ",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Build Migration Tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "PortalEntityID",
							"value": {
								"value": "@{guid()}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Create Preparis Users",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build migration_users_without_site table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Users Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PortalEntityID": {
									"value": "@variables('PortalEntityID')",
									"type": "Expression"
								},
								"CreatedByGUID": {
									"value": "@pipeline().globalParameters.preparisCreatedById",
									"type": "Expression"
								},
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_db_server": {
									"value": "@pipeline().parameters.rp_server_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Create Portal Entities",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build migration_users_without_site table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Portal Entities",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"PortalEntityID": {
									"value": "@variables('PortalEntityID')",
									"type": "Expression"
								},
								"CreatedByGUID": {
									"value": "@pipeline().globalParameters.preparisCreatedById",
									"type": "Expression"
								},
								"db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"db_server": {
									"value": "@pipeline().parameters.rp_server_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Pipeline Post Portal and User Entities",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Create Preparis Users",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Execute Create Portal Entities",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Post Portal and User entities",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_server_name",
									"type": "Expression"
								},
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"company_name": {
									"value": "@variables('CompanyName')",
									"type": "Expression"
								},
								"DefaultLocationId": {
									"value": "@variables('DefaultLocationId')",
									"type": "Expression"
								},
								"PortalEntityID": {
									"value": "@variables('PortalEntityID')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set Default Location ID",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Default Location GUID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "DefaultLocationId",
							"value": {
								"value": "@activity('Get Default Location GUID').output.firstRow.entityId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Default Location GUID",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Create Preparis Portal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select e.entityId\nfrom azstudioEntityEntities e \nJOIN azstudioEntityHierarchy eh on eh.childEntityId = e.entityId\nwhere entityName =  '@{variables('CompanyName')} - default location'\nand e.entityTypeId = '2067409a-be15-492c-8954-9d76e8d8a140'\nand e.entityStatusTypeId = '4fdcaecc-b770-4202-a697-d52460223fe5'\nand eh.parentEntityId = '@{variables('PortalEntityID')}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "Preparis",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Create DefaultLocationId table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set Default Location ID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "drop table if exists migration_defaultLocationId;\n\ncreate table migration_defaultlocationID as(\n\tselect '@{variables('DefaultLocationId')}' as defaultLocationId\n);\n\nselect 'DONE' as 'LookupHack';",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Execute Pipeline Get RP CompanyName",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create new EntityID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP CompanyName",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Set variable CompanyName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get RP CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CompanyName",
							"value": {
								"value": "@activity('Execute Pipeline Get RP CompanyName').output.pipelineReturnValue.CompanyName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Build migration_users_without_site table",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Create DefaultLocationId table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "/*\npreparis requires a primary location\nIf a user does not have a location, use the default location and make it primary\n*/\ndrop table if exists migration_users_without_site;\n\ncreate table migration_users_without_site as (\n    with combined_users_without_site as (\n        select \n            (SELECT uuid()) as newEntityUserItemId\n            , (select defaultlocationid from migration_defaultLocationId) defaultLocationId\n            , ud.newUserId \n            , 1 as isPrimaryRelationship\n            , 0 isManager\n        from migration_user_data ud\n        left join migration_user_site_data usd on ud.newUserId = usd.newUSerId\n        where usd.NewUserId is null\n    )\n    select \n    ROW_NUMBER() OVER (ORDER BY newEntityUserItemId) row_num\n    , cuws.*\n    from combined_users_without_site cuws\n);\n\nselect 'DONE' as 'Lookup Hack';",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Validate New API RP Credentials",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": {
								"value": "@{pipeline().globalParameters.rpOldAPIBaseUrl}token",
								"type": "Expression"
							},
							"body": {
								"value": "{\n    \"rpClientId\": \"@{pipeline().globalParameters.rpClientId}\",\n    \"clientId\": \"@{pipeline().globalParameters.rpOldAPIClientId}\",\n    \"clientSecret\": \"@{pipeline().globalParameters.rpOldAPIClientSecret}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Check RP Session Token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": {
								"value": "@{pipeline().globalParameters.rpBaseURL}login?client=@{pipeline().globalParameters.rpClientId}",
								"type": "Expression"
							},
							"body": {
								"value": "{\n    \"clientId\": \"@{pipeline().globalParameters.rpClientId}\",\n    \"username\": \"@{pipeline().globalParameters.rpRestUserName}\",\n    \"password\": \"@{pipeline().globalParameters.rpRestUserPassword}\"\n}",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rp_server_name": {
						"type": "string",
						"defaultValue": "recovery-planner-mysql-server.mysql.database.azure.com"
					},
					"rp_db_name": {
						"type": "string"
					}
				},
				"variables": {
					"DefaultLocationId": {
						"type": "String"
					},
					"PortalEntityID": {
						"type": "String"
					},
					"CompanyName": {
						"type": "String"
					},
					"keepProcessing": {
						"type": "Boolean"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T21:21:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Create Preparis Portal')]",
				"[concat(variables('factoryId'), '/pipelines/Create Users Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Create Portal Entities')]",
				"[concat(variables('factoryId'), '/pipelines/Create Post Portal and User entities')]",
				"[concat(variables('factoryId'), '/datasets/Preparis')]",
				"[concat(variables('factoryId'), '/pipelines/Get RP CompanyName')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orchestrator Migrate multiple Customers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach Recovery Planner Database",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.migrationConfig.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Pipeline Orchestrator Migrate Single Portal",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Orchestrator Migrate Single Portal",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"rp_server_name": {
												"value": "@pipeline().globalParameters.rp_server_name",
												"type": "Expression"
											},
											"rp_db_name": {
												"value": "@pipeline().globalParameters.rp_db_name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute Pipeline Orchestrator Vendors",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute Pipeline Orchestrator Migrate Single Portal",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Orchestrator Vendors",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								},
								{
									"name": "Execute Pipeline Orchestrator Incidents",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute Pipeline Orchestrator Migrate Single Portal",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Orchestrator Incidents",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"rp_db_name": {
												"value": "@pipeline().globalParameters.rp_db_name",
												"type": "Expression"
											},
											"rp_server_name": {
												"value": "@pipeline().globalParameters.rp_server_name",
												"type": "Expression"
											},
											"preparisBaseURL": {
												"value": "@pipeline().globalParameters.preparisBaseURL",
												"type": "Expression"
											},
											"preparisDeviceIdAsBase64": {
												"value": "@pipeline().parameters.preparisDeviceIdAsBase64",
												"type": "Expression"
											},
											"folderName": "Incidents",
											"rpBaseURL": {
												"value": "@pipeline().globalParameters.rpBaseURL",
												"type": "Expression"
											},
											"rpRestUserPassword": {
												"value": "@pipeline().globalParameters.rpRestUserPassword",
												"type": "Expression"
											},
											"rpRestUserName": {
												"value": "@pipeline().globalParameters.rpRestUserName",
												"type": "Expression"
											},
											"rpClientId": {
												"value": "@pipeline().globalParameters.rpClientId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute Pipeline Orchestrator Plans",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute Pipeline Orchestrator Migrate Single Portal",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Orchestrator Plans",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"rp_server_name": {
												"value": "@pipeline().globalParameters.rp_server_name",
												"type": "Expression"
											},
											"rp_db_name": {
												"value": "@pipeline().globalParameters.rp_db_name",
												"type": "Expression"
											},
											"preparisBaseURL": {
												"value": "@pipeline().globalParameters.preparisBaseURL",
												"type": "Expression"
											},
											"preparisDeviceIdAsBase64": {
												"value": "@pipeline().parameters.preparisDeviceIdAsBase64",
												"type": "Expression"
											},
											"baseFolderName": "Plans",
											"rpBaseURL": {
												"value": "@pipeline().globalParameters.rpBaseURL",
												"type": "Expression"
											},
											"rpRestUserName": {
												"value": "@pipeline().globalParameters.rpRestUserName",
												"type": "Expression"
											},
											"rpRestUserPassword": {
												"value": "@pipeline().globalParameters.rpRestUserPassword",
												"type": "Expression"
											},
											"rpClientId": {
												"value": "@pipeline().globalParameters.rpClientId",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Execute Pipeline Orchestrator Technologies",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute Pipeline Orchestrator Migrate Single Portal",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Orchestrator Technologies",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"rp_server_name": {
												"value": "@pipeline().globalParameters.rp_server_name",
												"type": "Expression"
											},
											"rp_db_name": {
												"value": "@pipeline().globalParameters.rp_db_name",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Orchestrator BC",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute Pipeline Orchestrator Technologies",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Execute Pipeline Orchestrator Vendors",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Orchestrator BC",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								},
								{
									"name": "Create All Custom Fields",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Orchestrator BC",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Orchestrator All Custom Fields",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								},
								{
									"name": "File And Images",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Execute Pipeline Orchestrator Migrate Single Portal",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Orchestrator Files And Images",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {}
									}
								},
								{
									"name": "Migrating ITDR",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "File And Images",
											"dependencyConditions": [
												"Completed"
											]
										},
										{
											"activity": "Create All Custom Fields",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@equals(pipeline().globalParameters.migrateITDR, 1)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Orchestrator ITDR",
												"type": "ExecutePipeline",
												"dependsOn": [],
												"policy": {
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"pipeline": {
														"referenceName": "Orchestrator ITDR",
														"type": "PipelineReference"
													},
													"waitOnCompletion": true,
													"parameters": {}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"migrationConfig": {
						"type": "object"
					},
					"preparisDeviceIdAsBase64": {
						"type": "string",
						"defaultValue": "cHJvZA=="
					}
				},
				"variables": {
					"keepProcessing": {
						"type": "Boolean"
					},
					"insertSQL": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T18:14:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Orchestrator Migrate Single Portal')]",
				"[concat(variables('factoryId'), '/pipelines/Orchestrator Vendors')]",
				"[concat(variables('factoryId'), '/pipelines/Orchestrator Incidents')]",
				"[concat(variables('factoryId'), '/pipelines/Orchestrator Plans')]",
				"[concat(variables('factoryId'), '/pipelines/Orchestrator Technologies')]",
				"[concat(variables('factoryId'), '/pipelines/Orchestrator BC')]",
				"[concat(variables('factoryId'), '/pipelines/Orchestrator All Custom Fields')]",
				"[concat(variables('factoryId'), '/pipelines/Orchestrator Files And Images')]",
				"[concat(variables('factoryId'), '/pipelines/Orchestrator ITDR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orchestrator Migrate multiple portals')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach Recovery Planner Database",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.dbNameArray",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Execute Pipeline Orchestrator Migrate Single Portal",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Orchestrator Migrate Single Portal",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"rp_server_name": {
												"value": "@variables('rp_server_name')",
												"type": "Expression"
											},
											"rp_db_name": {
												"value": "@item()",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"dbNameArray": {
						"type": "array",
						"defaultValue": [
							"nationalindemnity"
						]
					}
				},
				"variables": {
					"rp_server_name": {
						"type": "String",
						"defaultValue": "recovery-planner-mysql-server.mysql.database.azure.com"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-20T16:34:29Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Orchestrator Migrate Single Portal')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orchestrator Plans')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Get Document Migration Objects",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Document Migration Objects",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_server_name",
									"type": "Expression"
								},
								"preparisBaseURL": {
									"value": "@pipeline().parameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().parameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								},
								"rpBaseURL": {
									"value": "@pipeline().parameters.rpBaseURL",
									"type": "Expression"
								},
								"rpRestUserName": {
									"value": "@pipeline().parameters.rpRestUserName",
									"type": "Expression"
								},
								"rpRestUserPassword": {
									"value": "@pipeline().parameters.rpRestUserPassword",
									"type": "Expression"
								},
								"rpClientId": {
									"value": "@pipeline().parameters.rpClientId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Execute Pipeline Get or Create Plans Folder",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get Document Migration Objects",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get or Create Preparis Folder",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"preparisBaseURL": {
									"value": "@pipeline().parameters.preparisBaseURL",
									"type": "Expression"
								},
								"preparisDeviceIdAsBase64": {
									"value": "@pipeline().parameters.preparisDeviceIdAsBase64",
									"type": "Expression"
								},
								"preparisSessionToken": {
									"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisSessionToken",
									"type": "Expression"
								},
								"entityId": {
									"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisCurrentPortalId",
									"type": "Expression"
								},
								"rootEntityId": {
									"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisCurrentPortalId",
									"type": "Expression"
								},
								"folderId": {
									"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisRootFolderId",
									"type": "Expression"
								},
								"portalId": {
									"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisCurrentPortalId",
									"type": "Expression"
								},
								"folderName": "Plans",
								"parentFolderId": {
									"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisRootFolderId",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Lookup distinct Plans",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get or Create Plans Folder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "/* distinct plans */\r\nwith plansWithoutDepartment as (\r\n    select p.id as plan_id,\r\n    replace(p.name, '''','''''') as plan_name,\r\n    DATE(p.lastUpdateDate) as LastUpdateDate\r\n    from t_plan p\r\n    where forEvent = 0\r\n)\r\n, dupePlanNames as (\r\n    select pwod.plan_name, count(pwod.plan_id)\r\n    from plansWithoutDepartment pwod\r\n    group by pwod.plan_name\r\n    having count(pwod.plan_id) > 1\r\n)\r\n, dupePlanData as (\r\n    select plan_id\r\n    , CONCAT(pwod.plan_name, '_', cast(LastUpdateDate as char)) as plan_name\r\n    , LastUpdateDate\r\n    from plansWithoutDepartment pwod\r\n    join dupePlanNames dpn on pwod.plan_name = dpn.plan_name \r\n)\r\n, noDupePlanData as(\r\n    select pwod.* \r\n    from plansWithoutDepartment pwod\r\n    left join dupePlanData dpd on pwod.plan_id = dpd.plan_id\r\n    where dpd.plan_id is null\r\n)\r\n\r\nselect * from dupePlanData\r\nunion\r\nselect * from noDupePlanData\r\n",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().parameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().parameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach distinct Plan",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup distinct Plans",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup distinct Plans').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Execute Pipeline Create Plan Document",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Create Preparis Plan Document",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"rpSessionToken": {
												"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.rpSessionToken",
												"type": "Expression"
											},
											"rpClientId": {
												"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.rpClientId",
												"type": "Expression"
											},
											"plan_id": {
												"value": "@item().plan_id",
												"type": "Expression"
											},
											"rpBaseURL": {
												"value": "@pipeline().parameters.rpBaseURL",
												"type": "Expression"
											},
											"rp_server_name": {
												"value": "@pipeline().parameters.rp_server_name",
												"type": "Expression"
											},
											"rp_db_name": {
												"value": "@pipeline().parameters.rp_db_name",
												"type": "Expression"
											},
											"preparisBaseURL": {
												"value": "@pipeline().parameters.preparisBaseURL",
												"type": "Expression"
											},
											"preparisDeviceIdAsBase64": {
												"value": "@pipeline().parameters.preparisDeviceIdAsBase64",
												"type": "Expression"
											},
											"preparisSessionToken": {
												"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisSessionToken",
												"type": "Expression"
											},
											"preparisCurrentPortalId": {
												"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisCurrentPortalId",
												"type": "Expression"
											},
											"plan_name": {
												"value": "@item().plan_name",
												"type": "Expression"
											},
											"preparisUserId": {
												"value": "@activity('Execute Pipeline Get Document Migration Objects').output.pipelineReturnValue.preparisUserId",
												"type": "Expression"
											},
											"preparisFolderGuid": {
												"value": "@activity('Execute Pipeline Get or Create Plans Folder').output.pipelineReturnValue.preparisFolderGuid",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rp_server_name": {
						"type": "string",
						"defaultValue": "recovery-planner-mysql-server.mysql.database.azure.com"
					},
					"rp_db_name": {
						"type": "string"
					},
					"preparisBaseURL": {
						"type": "string"
					},
					"preparisDeviceIdAsBase64": {
						"type": "string",
						"defaultValue": "cHJvZA=="
					},
					"baseFolderName": {
						"type": "string",
						"defaultValue": "Plans"
					},
					"rpBaseURL": {
						"type": "string"
					},
					"rpRestUserName": {
						"type": "string",
						"defaultValue": "RPSupport86421"
					},
					"rpRestUserPassword": {
						"type": "string",
						"defaultValue": "LS3l3cs*"
					},
					"rpClientId": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-26T19:00:58Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Get Document Migration Objects')]",
				"[concat(variables('factoryId'), '/pipelines/Get or Create Preparis Folder')]",
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Create Preparis Plan Document')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orchestrator Process Strategies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Migrate strategies",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable currentPortalId from DB_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Migrate Strategies Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Migrate Strategy Vendors",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Migrate strategies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Migrate Strategy Vendors Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Migrate Strategy Employees",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Migrate strategies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Migrate Strategy Employees Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Set variable currentPortalId from DB_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Portal Id By DB Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentPortalId",
							"value": {
								"value": "@activity('Get Portal Id By DB Name').output.pipelineReturnValue.currentPortalId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Portal Id By DB Name",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Portal Id By DB Name",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Migrate Strategy Technologies",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Migrate strategies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Migrate Strategy Technologies Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"currentPortalId": {
						"type": "String"
					},
					"keepProcessing": {
						"type": "Boolean"
					}
				},
				"folder": {
					"name": "BC/Strategies"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Migrate Strategies Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate Strategy Vendors Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate Strategy Employees Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Get Portal Id By DB Name')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate Strategy Technologies Partitioned')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orchestrator RTOs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Portal Id By DB Name",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Portal Id By DB Name",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"rp_db_name": {
									"value": "@pipeline().globalParameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().globalParameters.rp_server_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Current Portal Id",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Portal Id By DB Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentPortalId",
							"value": {
								"value": "@activity('Get Portal Id By DB Name').output.pipelineReturnValue.currentPortalId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Create RTO Intervals",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Current Portal Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "RTO Intervals",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Processes RTOs",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create RTO Intervals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Processes RTOs",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Update Impact Categories",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Current Portal Id",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Update Impact Categories",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Process Impact Categories-Timespan-Severity",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Processes RTOs",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Update Impact Categories",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Process Impact Categories-Timespans-Severity",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Process MTD",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Process Impact Categories-Timespan-Severity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Process MTD",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"currentPortalId": {
						"type": "String"
					},
					"insertRTOIntervalsSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "BC/RTO MTD"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Get Portal Id By DB Name')]",
				"[concat(variables('factoryId'), '/pipelines/RTO Intervals')]",
				"[concat(variables('factoryId'), '/pipelines/Processes RTOs')]",
				"[concat(variables('factoryId'), '/pipelines/Update Impact Categories')]",
				"[concat(variables('factoryId'), '/pipelines/Process Impact Categories-Timespans-Severity')]",
				"[concat(variables('factoryId'), '/pipelines/Process MTD')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orchestrator Technologies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Get RP CompanyName",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP CompanyName",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"rp_server_name": {
									"value": "@pipeline().parameters.rp_server_name",
									"type": "Expression"
								},
								"rp_db_name": {
									"value": "@pipeline().parameters.rp_db_name",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable CompanyName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get RP CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CompanyName",
							"value": {
								"value": "@activity('Execute Pipeline Get RP CompanyName').output.pipelineReturnValue.CompanyName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Get Preparis PortalID",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Preparis Portal ID",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"companyName": {
									"value": "@variables('CompanyName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable currentPortalId from DB_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get Preparis PortalID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentPortalId",
							"value": {
								"value": "@activity('Execute Pipeline Get Preparis PortalID').output.pipelineReturnValue.portalEntityId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Migrate Technologies",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable currentPortalId from DB_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Migrate Technologies Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"portalEntityId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rp_server_name": {
						"type": "string",
						"defaultValue": "recovery-planner-mysql-server.mysql.database.azure.com"
					},
					"rp_db_name": {
						"type": "string"
					}
				},
				"variables": {
					"CompanyName": {
						"type": "String"
					},
					"currentPortalId": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T12:25:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Get RP CompanyName')]",
				"[concat(variables('factoryId'), '/pipelines/Get Preparis Portal ID')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate Technologies Partitioned')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orchestrator User Fields old')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create Custom Fields Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable currentPortalId from DB_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Custom Fields Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								},
								"rpCustomFieldType": {
									"value": "@variables('rpCustomFieldType')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable currentPortalId from DB_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Portal Id By DB Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentPortalId",
							"value": {
								"value": "@activity('Get Portal Id By DB Name').output.pipelineReturnValue.currentPortalId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Create Custom Fields Values Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create Custom Fields Options Partitioned",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Custom Fields User Values Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"currentPortalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Create Custom Fields Options Partitioned",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create Custom Fields Partitioned",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Custom Fields Options Partitioned",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"portalId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								},
								"rpCustomFieldType": {
									"value": "@variables('rpCustomFieldType')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Get Portal Id By DB Name",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Portal Id By DB Name",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"CompanyName": {
						"type": "String"
					},
					"currentPortalId": {
						"type": "String"
					},
					"createdByGUID": {
						"type": "String",
						"defaultValue": "7b5ea827-bcd7-4a8a-8807-fc7e94a93455"
					},
					"rpCustomFieldType": {
						"type": "Integer",
						"defaultValue": 5
					}
				},
				"folder": {
					"name": "Users"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Create Custom Fields Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Create Custom Fields User Values Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Create Custom Fields Options Partitioned')]",
				"[concat(variables('factoryId'), '/pipelines/Get Portal Id By DB Name')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Orchestrator Vendors')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Get RP CompanyName",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP CompanyName",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Set variable CompanyName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get RP CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "CompanyName",
							"value": {
								"value": "@activity('Execute Pipeline Get RP CompanyName').output.pipelineReturnValue.CompanyName",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Get Preparis PortalID",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable CompanyName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Preparis Portal ID",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"companyName": {
									"value": "@variables('CompanyName')",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "Set variable currentPortalId from DB_copy1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get Preparis PortalID",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "currentPortalId",
							"value": {
								"value": "@activity('Execute Pipeline Get Preparis PortalID').output.pipelineReturnValue.portalEntityId",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Execute Pipeline Migrate Vendors",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Set variable currentPortalId from DB_copy1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Migrate Vendors",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"portalEntityId": {
									"value": "@variables('currentPortalId')",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"CompanyName": {
						"type": "String"
					},
					"currentPortalId": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-03-20T16:34:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Get RP CompanyName')]",
				"[concat(variables('factoryId'), '/pipelines/Get Preparis Portal ID')]",
				"[concat(variables('factoryId'), '/pipelines/Migrate Vendors')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Process Dependencies Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Build Migration table for Process Dependencies",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "/*custom field type mapping*/\r\nDROP TABLE IF EXISTS migration_portalProcess_dependency;\r\n\r\nCREATE TABLE IF NOT EXISTS migration_portalProcess_dependency\r\n(\r\n    row_num INT,\r\n    dependentPortalProcessId CHAR(38),\r\n    child_Id INT,\r\n    portalProcessId CHAR(38),\r\n    parent_id INT,\r\n    portalProcessDependencyId char(38)\r\n);\r\n\r\ninsert into migration_portalProcess_dependency\r\n(row_num, dependentPortalProcessId, child_Id, portalProcessId, parent_id, portalProcessDependencyId)\r\nselect\r\nROW_NUMBER() OVER (ORDER by child_Id) row_num,\r\nppdChild.portalProcessId dependentPortalProcessId\r\n, fg.child_Id\r\n, ppdParent.portalProcessId portalProcessId\r\n, fg.parent_id\r\n, uuid() portalProcessDependencyId\r\nfrom t_function_graph fg\r\njoin migration_portalProcess_data ppdChild on ppdChild.function_id = fg.child_id\r\njoin migration_portalProcess_data ppdParent on ppdParent.function_id = fg.parent_id;\r\n\r\n\r\nselect 'DONE' as 'Lookup Activity Hack';",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process Dependency",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Iteration Data').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Set Iteration start",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "iterationStart",
										"value": {
											"value": "@item().iteration_start",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Iteration stop",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "iterationStop",
										"value": {
											"value": "@item().iteration_stop",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Process Dependencies",
									"type": "ExecutePipeline",
									"dependsOn": [
										{
											"activity": "Set Iteration start",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set Iteration stop",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Process Dependencies",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iterationStart": {
												"value": "@variables('iterationStart')",
												"type": "Expression"
											},
											"iterationStop": {
												"value": "@variables('iterationStop')",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Lookup Iteration Data",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Build Migration table for Process Dependencies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_portalProcess_dependency",
								"rp_db_name": {
									"value": "@pipeline().globalParameters.rp_db_name",
									"type": "Expression"
								},
								"rp_server_name": {
									"value": "@pipeline().globalParameters.rp_server_name",
									"type": "Expression"
								}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"iterationStart": {
						"type": "Integer"
					},
					"iterationStop": {
						"type": "Integer"
					}
				},
				"folder": {
					"name": "BC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Process Dependencies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Process Dependencies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Dependencies",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select portalProcessDependencyId,\nportalProcessId,\ndependentPortalProcessId\n from migration_portalProcess_dependency\nwhere row_num between @{pipeline().parameters.iterationStart}\nand @{pipeline().parameters.iterationStop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Dependency",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Dependencies",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Dependencies').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertProcessDependencyScript",
										"value": {
											"value": "insert into bcPortalProcessDependency\n(portalProcessDependencyId,\nportalProcessId,\ndependentPortalProcessId,\nportalProcessDependencyStatusTypeId,\ndateTimeCreated,\ncreatedById)\nvalues\n(\n'@{item().portalProcessDependencyId}',\n'@{item().portalProcessId}',\n'@{item().dependentPortalProcessId}',\n'c60d99bf-eb57-4880-8a73-9e879ecb5fdc',\nCURRENT_TIMESTAMP,\n'@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Insert Process Dependencies",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Dependency",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@join(variables('insertProcessDependencyScript'), ';')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iterationStart": {
						"type": "int"
					},
					"iterationStop": {
						"type": "int"
					}
				},
				"variables": {
					"insertProcessDependencyScript": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "BC"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Process Impact Categories-Timespans-Severity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Insert Data",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"parameters": [
										{
											"name": "portalId",
											"type": "String",
											"value": {
												"value": "@pipeline().parameters.currentPortalId",
												"type": "Expression"
											},
											"direction": "Input"
										}
									],
									"type": "Query",
									"text": {
										"value": "insert into bcProcessImpact\n(\n    processImpactId,\n    portalProcessId,\n    impactCategoryId,\n    impactSeverityId,\n    impactTimespanId,\n    dateTimeCreated,\n    createdById\n)\nselect\nNEWID() processImpactId,\nportalProcessId,\nimpactCategoryId,\nist.impactSeverityId,\nits.impactTimespanId,\nCURRENT_TIMESTAMP,\n'@{pipeline().globalParameters.preparisCreatedById}'\nfrom bcPortalProcess pp\njoin bcPortalFunctionalArea pfa on pp.portalFunctionalAreaId = pfa.portalFunctionalAreaId\njoin (select impactCategoryId from bcOverrideSystemImpactCategories where portalId = '@{pipeline().parameters.currentPortalId}') ic on 1=1\njoin (select impactTimespanId from bcImpactTimespan where portalId = '@{pipeline().parameters.currentPortalId}') its on 1 = 1\njoin (select impactSeverityId from bcImpactSeverity where sequenceNbr = 1) ist on 1=1\nwhere pfa.portalId = '@{pipeline().parameters.currentPortalId}'",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BC/RTO MTD"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Process MTD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Is MTD Enabled",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "SELECT\ncase when enabled = 1 then 'True' else 'False' end isEnabled\nFROM T_FUNCTION_FIELD_ORDER WHERE field = 4;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Insert Entity Setting MTD",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Is MTD Enabled",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "insert into azstudioEntitySettings\n(\n    settingId,\n    settingTypeId,\n    entityId,\n    userStringTypeId,\n    settingValue,\n    dateTimeCreated,\n    createdById\n)\nVALUES\n(\n    NEWID(),\n    '1ce7f8d7-da70-41e3-8107-d9926dc61bb8',\n    '@{pipeline().parameters.currentPortalId}',\n    '00000000-0000-0000-0000-000000000000',\n    '@{activity('Is MTD Enabled').output.firstRow.isEnabled}',\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "isMTDEnabled True",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Is MTD Enabled",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@activity('Is MTD Enabled').output.firstRow.isEnabled",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Update Processes MTD",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "/*\n-- test code\nselect\npp.portalProcessName,\npp.rtoImpactTimespanId,\nts.timespanInSeconds,\nts.timespanName,\nts.rn,\nts1.timespanName,\nts1.rn,\nISNULL(ts1.timespanName, ts.timespanName) mtdName,\nISNULL(ts1.impactTimespanId, ts.impactTimespanId) mtdId\n*/\n\nupdate pp\nset pp.mtdImpactTimespanId = ISNULL(ts1.impactTimespanId, ts.impactTimespanId)\n from bcPortalProcess pp\njoin bcPortalFunctionalArea pfa on pfa.portalFunctionalAreaId = pp.portalFunctionalAreaId\njoin (\n    select \nROW_NUMBER() OVER (ORDER by timespanInSeconds desc) rn,\n* from bcImpactTimespan\nwhere portalId = '@{pipeline().parameters.currentPortalId}') ts on ts.impactTimespanId = pp.rtoImpactTimespanId\nleft join (\n    select \nROW_NUMBER() OVER (ORDER by timespanInSeconds desc) rn,\n* from bcImpactTimespan\nwhere portalId = '@{pipeline().parameters.currentPortalId}') ts1 on ts.rn = (ts1.rn + 1)\nwhere pfa.portalId = '@{pipeline().parameters.currentPortalId}'",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"test": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BC/RTO MTD"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Processes RTOs')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Old API RP Session Token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": {
								"value": "@{pipeline().globalParameters.rpOldAPIBaseUrl}token",
								"type": "Expression"
							},
							"body": {
								"value": "{\n    \"rpClientId\": \"@{pipeline().globalParameters.rpClientId}\",\n    \"clientId\": \"@{pipeline().globalParameters.rpOldAPIClientId}\",\n    \"clientSecret\": \"@{pipeline().globalParameters.rpOldAPIClientSecret}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable rpJWT",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Old API RP Session Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "rpJWT",
							"value": {
								"value": "@activity('Get Old API RP Session Token').output.accessToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Processes without RTO",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Build RTO Migration tables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": " select FUNCTION_ID from migration_portalProcess_RTO\r\n where rto_id is null;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process No RTO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Processes without RTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Processes without RTO').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get RP Process",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "GET",
										"headers": {
											"Authorization": {
												"value": "@concat('Bearer ', variables('rpJWT'))",
												"type": "Expression"
											}
										},
										"url": {
											"value": "@{pipeline().globalParameters.rpOldAPIBaseUrl}v1/functions/@{item().FUNCTION_ID}?size=1802&page=0",
											"type": "Expression"
										}
									}
								},
								{
									"name": "RTO set",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get RP Process",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@greater(length(activity('Get RP Process').output.rto), 0)",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Update Process RTO",
												"type": "Lookup",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureMySqlSource",
														"query": {
															"value": "with tempRTO as (\nselect id, seconds, description, newImpactTimespanId\n from migration_rto_intervals\nwhere description = '@{activity('Get RP Process').output.rto}'\nLIMIT 1)\n\nupdate migration_portalProcess_RTO\nset rto_id = (select id from tempRTO),\nrto_seconds = (select seconds from tempRTO),\nrto_description = (select description from tempRTO),\nnewImpactTimespanId = (select newImpactTimespanId from tempRTO)\nwhere FUNCTION_ID = @{activity('Get RP Process').output.id};\n\nselect 'DONE' as 'Lookup Activity Hack';",
															"type": "Expression"
														},
														"queryTimeout": "02:00:00"
													},
													"dataset": {
														"referenceName": "RecoveryPlanner",
														"type": "DatasetReference",
														"parameters": {
															"db_name": {
																"value": "@pipeline().globalParameters.rp_db_name",
																"type": "Expression"
															},
															"server_name": {
																"value": "@pipeline().globalParameters.rp_server_name",
																"type": "Expression"
															}
														}
													},
													"firstRowOnly": false
												}
											}
										]
									}
								}
							]
						}
					},
					{
						"name": "Build RTO Migration tables",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Set variable rpJWT",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "DROP TABLE IF EXISTS migration_portalProcess_RTO;\r\n\r\nCREATE TABLE migration_portalProcess_RTO AS\r\n(select * from\r\n(select \r\nROW_NUMBER() OVER(PARTITION BY pp.portalProcessId ORDER BY rto.seconds) rn,\r\npp.FUNCTION_ID,\r\npp.portalProcessId,\r\nrto.id rto_id,\r\nrto.seconds rto_seconds,\r\nrto.description rto_description,\r\nrto.newImpactTimespanId\r\n from\r\n migration_portalProcess_data pp\r\nleft join T_BIA_MATRIX_FUNCTION_ENTRY functStrategy on pp.FUNCTION_ID = functStrategy.FUNCTION_ID\r\nleft join migration_rto_intervals rto on rto.id = functStrategy.rto_id\r\n)\r\n minRTOs\r\nwhere rn = 1);\r\n\r\nselect 'DONE' as 'Lookup Activity Hack';",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Processes RTO",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Process No RTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select portalProcessId,\r\nnewImpactTimespanId\r\n from migration_portalProcess_RTO where rto_id is not null",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Process RTO",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Processes RTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Processes RTO').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append Update Process script",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "updateProcessRTOSQL",
										"value": {
											"value": "update bcPortalProcess\nset rtoImpactTimespanId = '@{item().newImpactTimespanId}'\nwhere portalProcessId = '@{item().portalProcessId}'",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set Test script variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Process RTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testUpdateScript",
							"value": {
								"value": "@join(variables('updateProcessRTOSQL'), ';')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Process RTO",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('updateProcessRTOSQL')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Update Portal Process RTO",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('updateProcessRTOSQL'),';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"rpJWT": {
						"type": "String"
					},
					"processesFromRP": {
						"type": "Array"
					},
					"updateProcessRTOSQL": {
						"type": "Array"
					},
					"currentPortalId": {
						"type": "String"
					},
					"testUpdateScript": {
						"type": "String"
					}
				},
				"folder": {
					"name": "BC/RTO MTD"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RP Session Token Tester')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline Get RP Session Token",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get RP Session Token",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Set variable rpSessionToken",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Execute Pipeline Get RP Session Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "rpSessionToken",
							"value": {
								"value": "@activity('Execute Pipeline Get RP Session Token').output.pipelineReturnValue.rpSessionToken",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Get Old API RP Session Token",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"url": {
								"value": "@{pipeline().globalParameters.rpOldAPIBaseUrl}token",
								"type": "Expression"
							},
							"body": {
								"value": "{\n    \"rpClientId\": \"@{pipeline().globalParameters.rpClientId}\",\n    \"clientId\": \"@{pipeline().globalParameters.rpOldAPIClientId}\",\n    \"clientSecret\": \"@{pipeline().globalParameters.rpOldAPIClientSecret}\"\n}",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable rpJWT",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Old API RP Session Token",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "rpJWT",
							"value": {
								"value": "@activity('Get Old API RP Session Token').output.accessToken",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"rpClientId": {
						"type": "string",
						"defaultValue": "afsvision_preparis"
					}
				},
				"variables": {
					"rpSessionToken": {
						"type": "String"
					},
					"rpJWT": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Testers and Misc"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-14T10:53:56Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Get RP Session Token')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RTO Intervals')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RTO intervals",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "Build Migration Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select * from migration_rto_intervals",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RTO Interval",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "RTO intervals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('RTO intervals').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append Insert interval script",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertRTOIntervalsSQL",
										"value": {
											"value": "insert into bcImpactTimespan\n(impactTimespanId,\ntimespanName,\nimpactTimespanStatusTypeId,\nportalId,\ntimespanInSeconds,\ntimespanDuration,\ntimespanDurationUnitId,\ndateTimeCreated,\ncreatedById)\nVALUES\n(\n    '@{item().newImpactTimespanId}',\n    '@{item().description}',\n    'e37def28-175b-4543-89b4-af86220f1bba',\n    '@{pipeline().parameters.currentPortalId}',\n    @{item().seconds},\n    @{item().timespanDuration},\n    '@{item().timespanDurationUnitId}',\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)\n\n",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Append Insert interval Translations script",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertRTOIntervalTranslationsSQL",
										"value": {
											"value": "insert into bcImpactTimespanTranslation\n(impactTimespanTranslationId,\nimpactTimespanId,\ntimespanName,\nlanguageCode,\ndateTimeCreated,\ncreatedById)\nvalues\n(\n    NEWID(),\n    '@{item().newImpactTimespanId}',\n    '@{item().description}',\n    'en',\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Build Migration Table",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "-- Seconds In Day = 86400\r\n\r\nDROP TABLE IF EXISTS migration_rto_intervals;\r\n\r\nCREATE TABLE migration_rto_intervals AS (\r\n\r\nwith temp as\r\n(select \r\nid,\r\nuuid() newImpactTimespanId,\r\nsubstring(description, 1, 20) description,\r\n(FRAME_END_HOURS * 3600) +\r\n(FRAME_END_DAYS * 86400) +\r\n(FRAME_END_WEEKS * 86400 * 7) +\r\n(FRAME_END_MONTHS * 86400 * 30) seconds\r\n from t_recovery_time_objective)\r\n\r\nselect t.*,\r\ncase when unit = 'days' then seconds DIV (3600 * 24) else\r\n    case when unit = 'hours' then seconds DIV 3600 else 100 end end timespanDuration,\r\ncase when unit = 'days' then '0cab3e34-0f19-4cc6-b580-cc8dc70af2d5' else\r\n    case when unit = 'hours' then '41bb6fc1-df74-42b5-8f41-e55e5a4570ed' else '9372a9f2-4391-4a8b-80ec-9c6150a48f23' end end timespanDurationUnitId\r\n from\r\n(select id, newImpactTimespanId, description, seconds,\r\nIF ((seconds / 86400) != CONVERT(seconds / 86400, UNSIGNED), 'hours', 'days') unit\r\n from temp\r\n UNION\r\n select\r\n -1,\r\n uuid() newImpactTimespanId,\r\n substring((select CONCAT(temp.description, ' +')\r\n from temp\r\n where seconds = (select max(seconds) from temp)), 1, 20) description,\r\n  3153600000 seconds,\r\n  'years' unit) t\r\n);\r\n\r\nselect 'DONE' as 'Lookup Activity Hack';",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Insert RTO intervals",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "RTO Interval",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@join(variables('insertRTOIntervalsSQL'),';')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Exclude System RTO intervals",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Insert RTO intervals Translations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "insert into bcExcludedSystemImpactTimeSpans\n(\n    excludedSystemImpactTimeSpanId,\n    portalId,\n    impactTimespanId,\n    dateTimeCreated,\n    createdById\n)\nselect \nNEWID(),\n'@{pipeline().parameters.currentPortalId}',\nimpactTimespanId,\nCURRENT_TIMESTAMP,\n'@{pipeline().globalParameters.preparisCreatedById}'\nfrom\nbcImpactTimespan\nwhere portalId is null",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Insert RTO intervals Translations",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Insert RTO intervals",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@join(variables('insertRTOIntervalTranslationsSQL'),';')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"insertRTOIntervalsSQL": {
						"type": "Array"
					},
					"insertRTOIntervalTranslationsSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "BC/RTO MTD"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Technology Custom Fields Values Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Create Data For Migration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "DROP TABLE IF EXISTS migration_technology_custom_fields_values;\r\n\r\nCREATE TABLE IF NOT EXISTS migration_technology_custom_fields_values as\r\n(\r\nselect\r\n    ROW_NUMBER() OVER (ORDER BY resource_id) row_num, t.*\r\n    from\r\n    (select\r\n    uuid() newCustomFieldValueId,\r\n    cv.resource_id,\r\n    cv.field_id,\r\n    mcf.areaType,\r\n    case when mcf.customFieldDataTypeId = '0f6f2372-1e4c-4d67-ad13-615a0540488c'/*ShortText*/ then convert(cv.text, char(4000)) else\r\n    case when mcf.customFieldDataTypeId = 'd8bd3d80-d25d-4056-8754-a740f2396792'/*TrueFalse*/ then convert((cv.checked = 1), char(4000)) else\r\n        case when mcf.customFieldDataTypeId = 'b9847d16-19b5-4ed4-a4e3-d7f07533ab5a'/*LongText*/ then convert(cv.textArea, char(4000)) else\r\n            case when mcf.customFieldDataTypeId = '1eccbe40-1b3b-461b-95df-35f1fe6a8af2'/*DateTime*/ then convert(cv.date, char(4000)) \r\n                end end end end tValue,\r\n    t.newPortalPlanTechnologyId,\r\n    mcf.newCustomFieldId\r\n    from t_custom_value cv\r\n    join migration_itdr_technologies t on t.rp_technology_id = cv.resource_id\r\n    join migration_custom_fields mcf on mcf.id = cv.field_id\r\n    where mcf.areaType = 3\r\n    and mcf.customFieldDataTypeId in ('0f6f2372-1e4c-4d67-ad13-615a0540488c', 'd8bd3d80-d25d-4056-8754-a740f2396792', 'b9847d16-19b5-4ed4-a4e3-d7f07533ab5a', '1eccbe40-1b3b-461b-95df-35f1fe6a8af2')\r\nunion\r\n-- add picklist values\r\n    select \r\n    uuid() newCustomFieldValueId,\r\n    cv.resource_id,\r\n    cv.field_id,\r\n    mcf.areaType,\r\n    convert(cfc.name, char(4000)) tValue,\r\n    t.newPortalPlanTechnologyId,\r\n    mcf.newCustomFieldId\r\n    from t_custom_value cv\r\n    join t_custom_field_choice cfc on cv.choice_id = cfc.id\r\n    join migration_itdr_technologies t on t.rp_technology_id = cv.resource_id\r\n    join migration_custom_fields mcf on mcf.id = cv.field_id\r\n    where resource_id is not null\r\n    and mcf.areaType = 3\r\n    and mcf.customFieldDataTypeId = 'aad6f035-05f9-42d3-b6ea-682371340875' /*PICKLIST*/) t);\r\n\r\nselect count(*) customFieldsCount from migration_technology_custom_fields_values;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Iterations for Custom Fields Values",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create Data For Migration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_technology_custom_fields_values"
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Iterations for Custom Fields Values",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Iterations for Custom Fields Values').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Technology Custom Fields Values",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Technology Custom Fields Values",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"currentPortalId": {
												"value": "@pipeline().parameters.currentPortalId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "ITDR/Technology Type Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Technology Custom Fields Values')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Technology Custom Fields Values')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Iteration Data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select\nnewCustomFieldValueId,\nnewCustomFieldId,\nnewPortalPlanTechnologyId,\nreplace(tValue,'''','''''') tValue\nfrom migration_technology_custom_fields_values\nwhere row_num between\n@{pipeline().parameters.iteration_start}\nand @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Custom Field Value",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Iteration Data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Iteration Data').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "insertSQL",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertSQL",
										"value": {
											"value": "insert into bcTechnologyCustomFieldValues\n(\n    technologyCustomFieldValueId,\n    portalId,\n    customFieldId,\n    fieldValue,\n    portalPlanTechnologyId,\n    dateTimeCreated,\n    createdById\n)\nvalues\n(\n    '@{item().newCustomFieldValueId}',\n    '@{pipeline().parameters.currentPortalId}',\n    '@{item().newCustomFieldId}',\n    '@{item().tValue}',\n    '@{item().newPortalPlanTechnologyId}',\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Insert",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Custom Field Value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@join(variables('insertSQL'), ';')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					},
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"insertSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR/Technology Type Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Technology Type Custom Fields Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Technology Type Custom Fields Iteration",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_custom_fields_vs_technology_type"
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Technology Type Custom Fields Iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Technology Type Custom Fields Iteration').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Technology Type Custom Fields",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Technology Type Custom Fields",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											},
											"currentPortalId": {
												"value": "@pipeline().parameters.currentPortalId",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					},
					{
						"name": "Create data",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "/* portal process technology custom fields vs technology type */\r\nDROP TABLE IF EXISTS migration_custom_fields_vs_technology_type;\r\n\r\nCREATE TABLE IF NOT EXISTS migration_custom_fields_vs_technology_type as\r\n(\r\n    select\r\n    ROW_NUMBER() OVER (ORDER BY cf.id) row_num,\r\n    UUID() newTechnologyTypeCustomFieldId,\r\n    cf.id rp_custom_field_id,\r\n    cf.name custom_field_name,\r\n    cf.resource_type_id,\r\n    ttd.technologyTypeId,\r\n    ttd.name technology_type_name,\r\n    concat(ttd.name, ' - ', cf.name) newCustomFieldName,\r\n    mcf.newCustomFieldId\r\n    from t_custom_field cf\r\n    join migration_custom_fields mcf on mcf.id = cf.id\r\n    join migration_technology_type_data ttd on ttd.rp_technology_type_id = cf.resource_type_id\r\n    where cf.areaType = 3\r\n);\r\n\r\nselect count(*) from migration_custom_fields_vs_technology_type;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"insertSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR/Technology Type Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Technology Type Custom Fields')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Technology Type Custom Fields')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Iteration Technology Type custom Fields",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select \nnewTechnologyTypeCustomFieldId,\ntechnologyTypeId,\nnewCustomFieldId,\nreplace(newCustomFieldName, '''','''''') newCustomFieldName\nfrom migration_custom_fields_vs_technology_type\nwhere row_num between\n@{pipeline().parameters.iteration_start}\nand @{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Technology Type Custom Field",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Iteration Technology Type custom Fields",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Iteration Technology Type custom Fields').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "insertSQL",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insertSQL",
										"value": {
											"value": "insert into bcTechnologyTypeCustomFields\n(\n    technologyTypeCustomFieldId,\n    technologyTypeId,\n    customFieldId,\n    dateTimeCreated,\n    createdById\n)\nvalues\n(\n    '@{item().newTechnologyTypeCustomFieldId}',\n    '@{item().technologyTypeId}',\n    '@{item().newCustomFieldId}',\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "updateSQL",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "updateSQL",
										"value": {
											"value": "update ppPortalCustomField\nset fieldName = '@{item().newCustomFieldName}'\nwhere portalId = '@{pipeline().parameters.currentPortalId}'\nand customFieldId = '@{item().newCustomFieldId}'",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "insert is not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Technology Type Custom Field",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insertSQL')), 0)",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "Insert",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('insertSQL'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Update",
									"description": "Update ITDR customFieldName to the pattern technologyName_customFieldName.\nThis is done because RP does not support sharing of the custom fields between technologies and may have the same name, but different options, for example.",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@join(variables('updateSQL'), ';')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					},
					"currentPortalId": {
						"type": "string"
					}
				},
				"variables": {
					"insertSQL": {
						"type": "Array"
					},
					"updateSQL": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "ITDR/Technology Type Custom Fields"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Test Create Recovery Planner Sites')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Create Recovery Planner Sites",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"json_data": {
									"value": "@variables('test_array')",
									"type": "Expression"
								},
								"PortalEntityID": "987654321"
							}
						}
					},
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select user_site_json from user_site_migration_data;\n",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "test_array",
							"value": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"test_array": {
						"type": "Array",
						"defaultValue": [
							{
								"siteFax": "ronTest",
								"siteZip": null,
								"siteCity": "TBD",
								"siteName": "Test Alt Site",
								"newUserId": "83e9a761-c4fa-11ee-b23f-6045bd7c0953",
								"siteState": null,
								"siteRegion": null,
								"primarySite": 1,
								"siteAddress": "TBD",
								"siteCountry": 2,
								"siteAddress2": null,
								"siteLatitude": "",
								"siteLongitude": "",
								"siteDescription": null,
								"sitePhoneNumber": "",
								"siteGeneralEmail": null,
								"newSiteLocationId": "83ef4ff2-c4fa-11ee-b23f-6045bd7c0953"
							},
							{
								"siteFax": "",
								"siteZip": "06611",
								"siteCity": "Trumbull",
								"siteName": "Main Site (1)",
								"newUserId": "83e9a761-c4fa-11ee-b23f-6045bd7c0953",
								"siteState": "CT",
								"siteRegion": null,
								"primarySite": 1,
								"siteAddress": "101 Merritt Blvd.",
								"siteCountry": 2,
								"siteAddress2": null,
								"siteLatitude": "41.23933",
								"siteLongitude": "-73.14601",
								"siteDescription": null,
								"sitePhoneNumber": "+1 (203) 455-9990",
								"siteGeneralEmail": null,
								"newSiteLocationId": "83ef5074-c4fa-11ee-b23f-6045bd7c0953"
							}
						]
					}
				},
				"folder": {
					"name": "Backup"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-15T15:58:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Create Recovery Planner Sites')]",
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Update Impact Categories')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "RP Impact Categories",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select uuid() overrideSystemImpactCategoryId,\n replace(t.name, '''','''''') name,\n replace(t.description, '''','''''') description,\n numericValue\n   from t_detailed_outage_impact_type t\n   order by numericValue\n   limit 9;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "RP Impact Category",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "RP Impact Categories",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('RP Impact Categories').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Update Impact Categories",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "insert into bcOverrideSystemImpactCategories\n(overrideSystemImpactCategoryId,\nportalId,\nimpactCategoryId,\ncategoryName,\ncategoryColor,\ncategoryDescription,\ndateTimeCreated,\ncreatedById)\nVALUES\n(\n    '@{item().overrideSystemImpactCategoryId}',\n    '@{pipeline().parameters.currentPortalId}',\n    (select impactCategoryId from bcImpactCategory where sequenceNbr = @{item().numericValue}),\n    '@{item().name}',\n    (select categoryColor from bcImpactCategory where sequenceNbr = @{item().numericValue}),\n    '@{item().description}',\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n);\n\ninsert into bcImpactCategoryTranslation\n(\n    impactCategoryTranslationId,\n    impactCategoryId,\n    categoryName,\n    categoryDescription,\n    languageCode,\n    overrideSystemImpactCategoryId,\n    dateTimeCreated,\n    createdById\n)\nvalues\n(\n    NEWID(),\n    (select impactCategoryId from bcImpactCategory where sequenceNbr = @{item().numericValue}),\n    '@{item().name}',\n    '@{item().description}',\n    'en',\n    '@{item().overrideSystemImpactCategoryId}',\n    CURRENT_TIMESTAMP,\n    '@{pipeline().globalParameters.preparisCreatedById}'\n)\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Exclude System Impacts",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "RP Impact Category",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "insert into bcExcludedSystemImpactCategories\n(excludedSystemImpactCatogoryId,\nportalId,\nimpactCategoryId,\ndateTimeCreated,\ncreatedById)\nSELECT\nNEWID(),\n'@{pipeline().parameters.currentPortalId}',\nic.impactCategoryId,\nCURRENT_TIMESTAMP,\n'@{pipeline().globalParameters.preparisCreatedById}'\nFROM \nbcImpactCategory ic\nleft join (\n   SELECT impactCategoryId\n   from bcOverrideSystemImpactCategories\n   where portalId = '@{pipeline().parameters.currentPortalId}}') osic on osic.impactCategoryId = ic.impactCategoryId\nwhere osic.impactCategoryId is null",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"currentPortalId": {
						"type": "string"
					}
				},
				"folder": {
					"name": "BC/RTO MTD"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Update User Primary Location')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Data for iteration",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "select\nnewUserLocationItemId\n, preparisUserId\n, preparisLocationId\nfrom migration_user_location_fix\nwhere row_num between\n@{pipeline().parameters.iteration_start}\nand\n@{pipeline().parameters.iteration_stop}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "User Location",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Data for iteration",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Data for iteration').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "userLocationsStatements",
										"value": {
											"value": "IF NOT EXISTS (SELECT 1 FROM azstudioEntityUsers \n    WHERE userId = '@{item().preparisUserId}' AND\n    entityId = '@{item().preparisLocationId}')\nBEGIN\n    INSERT INTO azstudioEntityUsers\n    (entityUserItemId\n    , entityId\n    , userId\n    , isPrimaryRelationship\n    , dateTimeCreated\n    , createdById)\n    VALUES\n    ('@{item().newUserLocationItemId}'\n    , '@{item().preparisLocationId}'\n    , '@{item().preparisUserId}'\n    , 1\n    , CURRENT_TIMESTAMP\n    , '@{pipeline().globalParameters.preparisCreatedById}')\nEND",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Update Entity Users",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Fail1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@join(variables('userLocationsStatements'), ';')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Fail1",
						"type": "Fail",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "User Location",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"message": "ok",
							"errorCode": "1"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"iteration_start": {
						"type": "int"
					},
					"iteration_stop": {
						"type": "int"
					}
				},
				"variables": {
					"userLocationsStatements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Fixes For Failures"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Update Users Primary Location Partitioned')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Existing Preparis To RP Location Matcher",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Existing Preparis To RP Location Matcher",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Existing Preparis To RP User Matcher",
						"type": "ExecutePipeline",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Existing Preparis To RP User Matcher Opt",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Create Users Locations Table",
						"type": "Lookup",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Existing Preparis To RP Location Matcher",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Existing Preparis To RP User Matcher",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "drop table if exists migration_user_location_fix;\r\ncreate table migration_user_location_fix as\r\n(\r\nselect\r\nROW_NUMBER() OVER (order by rpUserId) row_num\r\n, uuid() newUserLocationItemId\r\n, rpUserId\r\n, userName\r\n, rpLocationId\r\n, rpLocationName\r\n, isPrimaryRelationship\r\n, isManager\r\n, preparisUserId\r\n, ifnull(plm.preparisLocationId, defaultLocation.preparisLocationId) preparisLocationId\r\n from\r\n(select \r\nud.userId rpUserId,\r\nreplace(concat(ifnull(ud.userName, ''), ifnull(ud.firstName, ''), ifnull(ud.lastName, ''), ifnull(ud.employeeID, '')), '''', '') matcher,\r\nsd.id rpLocationId,\r\nsd.name rpLocationName,\r\nusd.isPrimaryRelationship,\r\nusd.isManager,\r\nud.userName\r\n from migration_user_data ud\r\nleft join migration_user_site_data usd on ud.newUserId = usd.newUserId\r\nleft join migration_site_data sd on usd.newSiteId = sd.newSiteId) rpUsersLocations\r\njoin migration_preparis_users_match pum on REPLACE(pum.matchString, '''', '') = rpUsersLocations.matcher\r\nleft join migration_preparis_locations_match plm on plm.matchString = rpUsersLocations.rpLocationName\r\njoin (select * from migration_preparis_locations_match where isDefault = 1 limit 1) defaultLocation on 1 = 1\r\n);\r\n\r\nSelect count(*) userLocationsCount from migration_user_location_fix",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": {
										"value": "@pipeline().globalParameters.rp_db_name",
										"type": "Expression"
									},
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Get Iterations",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Create Users Locations Table",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Lookup Iteration Data",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"tableName": "migration_user_location_fix"
							}
						}
					},
					{
						"name": "Iteration",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Iterations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Iterations').output.pipelineReturnValue.iteration_data_array",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Update User Primary Location",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"policy": {
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "Update User Primary Location",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"iteration_start": {
												"value": "@item().iteration_start",
												"type": "Expression"
											},
											"iteration_stop": {
												"value": "@item().iteration_stop",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"userLocationsStatements": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "Fixes For Failures"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Existing Preparis To RP Location Matcher')]",
				"[concat(variables('factoryId'), '/pipelines/Existing Preparis To RP User Matcher Opt')]",
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/pipelines/Lookup Iteration Data')]",
				"[concat(variables('factoryId'), '/pipelines/Update User Primary Location')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/UpdateCompanyNameForApostrophe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Company Name from RP DB",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": {
									"value": "SELECT \ncase when fullName is NULL or fullName ='' \n    then REPLACE(TRIM(dbname), '''', '''''') \n    else REPLACE(TRIM(fullName), '''', '''''') end as CompanyName\nFROM T_CLIENT_NAME\nwhere dbname = '@{pipeline().globalParameters.rp_db_name}'\nand datacenter = '@{pipeline().globalParameters.rp_datacenter}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": "Common",
									"server_name": {
										"value": "@pipeline().globalParameters.rp_server_name",
										"type": "Expression"
									}
								}
							}
						}
					},
					{
						"name": "Script1",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Company Name from RP DB",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Portal Id By DB Name",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase_Preparis_dev",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "update azstudioEntityEntities\nset entityName = '@{activity('Company Name from RP DB').output.firstRow.CompanyName}'\nwhere entityId = '@{activity('Get Portal Id By DB Name').output.pipelineReturnValue.currentPortalId}'\n\n\nupdate e\nset e.entityName = CONCAT('@{activity('Company Name from RP DB').output.firstRow.CompanyName}', ' - default location')\nfrom azstudioEntityEntities e \nJOIN azstudioEntityHierarchy eh on eh.childEntityId = e.entityId\nwhere entityName = REPLACE(CONCAT('@{activity('Company Name from RP DB').output.firstRow.CompanyName}', ' - default location'), '''', '')\nand e.entityTypeId = '2067409a-be15-492c-8954-9d76e8d8a140'\nand e.entityStatusTypeId = '4fdcaecc-b770-4202-a697-d52460223fe5'\nand eh.parentEntityId = '@{activity('Get Portal Id By DB Name').output.pipelineReturnValue.currentPortalId}'\n\nupdate azstudioEntitySettings\nset settingValue = '@{activity('Company Name from RP DB').output.firstRow.CompanyName}'\nwhere settingTypeId = '3754b3df-137c-4feb-a06f-240b5f3fb1c8' /*Portal Email From Name*/\nand entityId = '@{activity('Get Portal Id By DB Name').output.pipelineReturnValue.currentPortalId}'",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Get Portal Id By DB Name",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Get Portal Id By DB Name",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Portal"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]",
				"[concat(variables('factoryId'), '/pipelines/Get Portal Id By DB Name')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/backup Create Preparis Users_BeforeTrim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Recovery Planner Users",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "SELECT \n    (SELECT uuid()) as newUserId\n    , (SELECT uuid()) as entityUserItemId_portal\n    , (SELECT uuid()) as entityUserItemId_location\n    , IFNULL(c.name,'') as username\n    , c.firstName\n    , c.middleInitials\n    , c.lastName\n    , case u.role when 0 then 'SYSTEM' when 1 then 'PARTNER' when 2 THEN 'ADMIN' when 3 then 'MANAGER' when 4 then 'USER' when 5 then 'LISTED' end AS role\n    , case u.status when 0 then 'ACTIVE' when 1 then 'INACTIVE' when 2 then 'LOCKED' when 3 then 'TERMINATED' end AS status\n    , ct.name\n    , ci.email\n    , ci.primaryEmail\n    , cast(AES_DECRYPT(ci.line1, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) line1\n    , cast(AES_DECRYPT(ci.line2, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) line2\n    , cast(AES_DECRYPT(ci.city, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) city\n    , cast(AES_DECRYPT(ci.state, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) state\n    , cast(AES_DECRYPT(ci.zip, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) zip\n    , cast(AES_DECRYPT(ci.numberString, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) numberString\n    , cic.name as contactInfoCountry\n    , ct.NAME as contactTypeName\n    , s.name as siteName\n    , sc.name as siteCountryName\n    , us.floor\n    , us.room\n    , us.seat\n    , u.currentLoginAttempts\n    , IFNULL(u.password,'') as password\n    , u.passwordExpired\n    , u.passwordLastUpdated\n    , u.twoFactorAuth\n    , u.twoFactorAuthSecret\n    , u.creationdate\n    , cast(s.latitude as float) as latitude\n    , cast(s.longitude as float) as longitude\n    , u.timezone\n    , c.externalID\n    , case u.timezone \n        when 'UTC' then '8fa8449a-4be5-4b8c-9bcd-c7f378a9f438'\n        when 'JST' then '8702ab86-8acc-468d-a735-f5ab8c8de4d5'\n        when 'CST' OR 'America/Chicago' then '19a4144b-76bd-42fd-baa8-bb528a814884'\n        when 'EST' OR 'America/New_York' then 'c16ab931-6dfa-40b0-ac2a-e404e725c8b9'\n        else concat('TimeZone', u.timezone, ' Not Yet Mapped')\n        END  as timeZoneId\nFROM T_CONTACT c\nLEFT JOIN T_USER u ON c.id = u.id\nJOIN T_CONTACT_INFO ci ON c.id = ci.owner_id\nJOIN T_CONTACT_TYPE ct ON ci.contact_type_id = ct.id\nJOIN T_CONTACT_METHOD cm on ct.contact_method_id = cm.id\nJOIN T_USER_SITE us ON u.id = us.user_id\nJOIN T_SITE s on us.site_id = s.id\nLEFT JOIN T_COUNTRY sc on s.country_id = sc.id \nLEFT JOIN T_COUNTRY cic on ci.country_id = cic.id \n",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable RecoveryPlannerUsers",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Recovery Planner Users",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RecoveryPlannerUsers",
							"value": {
								"value": "@activity('Get Recovery Planner Users').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set variable RecoveryPlannerUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('RecoveryPlannerUsers')",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "create new SecurityUser",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioSecurityUsers]\n           ([userId]\n           ,[userName]\n           ,[passwordHash]\n           ,[userStateId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[passwordResetRequired]\n           ,[lat]\n           ,[lng]\n           ,[consecutiveFailedLoginAttempts]\n           ,[dateTimePasswordLockout]\n           ,[externalSystemId]\n           ,[timeZoneId]\n           ,[seed]\n           ,[isFullyMigrated]\n           ,[isSelfRegistered]\n           ,[dateTimePasswordLastModified])\nSELECT '@{item().newUserId}' as newUserId\n, '@{item().username}' as username\n, '@{item().password}' as password\n, case when '@{item().role}' = 'LISTED' then '@{variables('userStateId_Active')}' else '@{variables('userStateId_Pending')}' end as userStateId\n, CURRENT_TIMESTAMP as dateTimeCreated\n, '@{variables('CreatedByGUID')}' as createdById\n, CURRENT_TIMESTAMP as dateTimeLastModified\n, '@{variables('CreatedByGUID')}' as lastModifiedById\n, 1 as passwordResetRequired\n, @{item().latitude} as lat\n, @{item().longitude} as lng\n, 0 as consecutiveFailedLoginAttempts\n, CURRENT_TIMESTAMP as dateTimePasswordLockout\n, '@{item().externalId}' as externalSystemId\n, '@{item().timeZoneId}' as timeZoneId\n, '' as seed\n, 0 as isFullyMigrated\n, 0 as isSelfRegistered\n, CURRENT_TIMESTAMP as dateTimePasswordLastModified",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Create EntityUsers entries",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "create new SecurityUser",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioEntityUsers]\n           ([entityUserItemId]\n           ,[entityId]\n           ,[userId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[isPrimaryRelationship]\n           ,[isManager])\n     VALUES\n           ('@{item().entityUserItemId_portal}'\n           ,'@{pipeline().parameters.PortalEntityID}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{variables('CreatedByGUID')}'\n           ,CURRENT_TIMESTAMP\n           ,'@{variables('CreatedByGUID')}'\n           ,0\n           ,NULL),\n            ('@{item().entityUserItemId_location}'\n           ,'@{pipeline().parameters.LocationEntityId}'\n           ,'@{item().newUserId}'\n           ,CURRENT_TIMESTAMP\n           ,'@{variables('CreatedByGUID')}'\n           ,CURRENT_TIMESTAMP\n           ,'@{variables('CreatedByGUID')}'\n           ,0\n           ,NULL)",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string",
						"defaultValue": "7cbeaaf5-0b30-4809-91d5-f0e00446544d"
					},
					"LocationEntityId": {
						"type": "string",
						"defaultValue": "19ed2bc4-b9e7-4a56-ad3e-981b1010254e"
					}
				},
				"variables": {
					"userStateId_Active": {
						"type": "String",
						"defaultValue": "c1ff019b-b3f6-411c-b04e-59294e9090fe"
					},
					"userStateId_Pending": {
						"type": "String",
						"defaultValue": "b5d6bc28-5e6d-4bd1-b028-f7e9a6c6b7a1"
					},
					"RecoveryPlannerUsers": {
						"type": "Array"
					},
					"SelectString": {
						"type": "String"
					},
					"CreatedByGUID": {
						"type": "String",
						"defaultValue": "7b5ea827-bcd7-4a8a-8807-fc7e94a93455"
					}
				},
				"folder": {
					"name": "Backup"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-15T15:58:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/debug azstudioSecurityUsers_sequential')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Recovery Planner Users",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "SELECT \n    (SELECT uuid()) as newUserId\n    , concat(\"'\",IFNULL(c.name,''),\"'\") as username\n    , c.firstName\n    , c.middleInitials\n    , c.lastName\n    , case u.role when 0 then 'SYSTEM' when 1 then 'PARTNER' when 2 THEN 'ADMIN' when 3 then 'MANAGER' when 4 then 'USER' when 5 then 'LISTED' end AS role\n    , case u.status when 0 then 'ACTIVE' when 1 then 'INACTIVE' when 2 then 'LOCKED' when 3 then 'TERMINATED' end AS status\n    , ct.name\n    , ci.email\n    , ci.primaryEmail\n    , cast(AES_DECRYPT(ci.line1, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) line1\n    , cast(AES_DECRYPT(ci.line2, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) line2\n    , cast(AES_DECRYPT(ci.city, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) city\n    , cast(AES_DECRYPT(ci.state, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) state\n    , cast(AES_DECRYPT(ci.zip, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) zip\n    , cast(AES_DECRYPT(ci.numberString, x'37a95c7d900e8ebb39c9d1b36cf448a5') as char(255)) numberString\n    , cic.name as contactInfoCountry\n    , ct.NAME as contactTypeName\n    , s.name as siteName\n    , sc.name as siteCountryName\n    , us.floor\n    , us.room\n    , us.seat\n    , u.currentLoginAttempts\n    , concat(\"'\",IFNULL(u.password,''),\"'\") as password\n    , u.passwordExpired\n    , u.passwordLastUpdated\n    , u.twoFactorAuth\n    , u.twoFactorAuthSecret\n    , u.creationdate\n    , cast(s.latitude as float) as latitude\n    , cast(s.longitude as float) as longitude\n    , u.timezone\n    , c.externalID\n    , case u.timezone \n        when 'UTC' then '8fa8449a-4be5-4b8c-9bcd-c7f378a9f438'\n        when 'JST' then '8702ab86-8acc-468d-a735-f5ab8c8de4d5'\n        when 'CST' OR 'America/Chicago' then '19a4144b-76bd-42fd-baa8-bb528a814884'\n        when 'EST' OR 'America/New_York' then 'c16ab931-6dfa-40b0-ac2a-e404e725c8b9'\n        else concat('TimeZone', u.timezone, ' Not Yet Mapped')\n        END  as timeZoneId\nFROM T_CONTACT c\nLEFT JOIN T_USER u ON c.id = u.id\nJOIN T_CONTACT_INFO ci ON c.id = ci.owner_id\nJOIN T_CONTACT_TYPE ct ON ci.contact_type_id = ct.id\nJOIN T_CONTACT_METHOD cm on ct.contact_method_id = cm.id\nJOIN T_USER_SITE us ON u.id = us.user_id\nJOIN T_SITE s on us.site_id = s.id\nLEFT JOIN T_COUNTRY sc on s.country_id = sc.id \nLEFT JOIN T_COUNTRY cic on ci.country_id = cic.id ",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable RecoveryPlannerUsers",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Get Recovery Planner Users",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "RecoveryPlannerUsers",
							"value": {
								"value": "@activity('Get Recovery Planner Users').output.value",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set variable RecoveryPlannerUsers",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('RecoveryPlannerUsers')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "create new SecurityUser",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "AzureSqlDatabase_Preparis_dev",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "INSERT INTO [dbo].[azstudioSecurityUsers]\n           ([userId]\n           ,[userName]\n           ,[passwordHash]\n           ,[userStateId]\n           ,[dateTimeCreated]\n           ,[createdById]\n           ,[dateTimeLastModified]\n           ,[lastModifiedById]\n           ,[passwordResetRequired]\n           ,[lat]\n           ,[lng]\n           ,[consecutiveFailedLoginAttempts]\n           ,[dateTimePasswordLockout]\n           ,[externalSystemId]\n           ,[timeZoneId]\n           ,[seed]\n           ,[isFullyMigrated]\n           ,[isSelfRegistered]\n           ,[dateTimePasswordLastModified])\n@{variables('SelectString')}",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SelectString",
										"value": {
											"value": "SELECT '@{item().newUserId}' as newUserId\n, case when @{item().username} = 'NULL' then NULL else @{item().username} end as username\n, case when @{item().password} = 'NULL' then NULL else @{item().password} end as password\n, case when '@{item().role}' = 'LISTED' then '@{variables('userStateId_Active')}' else '@{variables('userStateId_Pending')}' end as userStateId\n, CURRENT_TIMESTAMP as dateTimeCreated\n, '@{variables('CreatedByGUID')}' as createdById\n, CURRENT_TIMESTAMP as dateTimeLastModified\n, '@{variables('CreatedByGUID')}' as lastModifiedById\n, 1 as passwordResetRequired\n, @{item().latitude} as lat\n, @{item().longitude} as lng\n, 0 as consecutiveFailedLoginAttempts\n, CURRENT_TIMESTAMP as dateTimePasswordLockout\n, '@{item().externalId}' as externalSystemId\n, '@{item().timeZoneId}' as timeZoneId\n, '' as seed\n, 0 as isFullyMigrated\n, 0 as isSelfRegistered\n, CURRENT_TIMESTAMP as dateTimePasswordLastModified",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"PortalEntityID": {
						"type": "string",
						"defaultValue": "7cbeaaf5-0b30-4809-91d5-f0e00446544d"
					},
					"LocationEntityId": {
						"type": "string",
						"defaultValue": "19ed2bc4-b9e7-4a56-ad3e-981b1010254e"
					}
				},
				"variables": {
					"userStateId_Active": {
						"type": "String",
						"defaultValue": "c1ff019b-b3f6-411c-b04e-59294e9090fe"
					},
					"userStateId_Pending": {
						"type": "String",
						"defaultValue": "b5d6bc28-5e6d-4bd1-b028-f7e9a6c6b7a1"
					},
					"RecoveryPlannerUsers": {
						"type": "Array"
					},
					"SelectString": {
						"type": "String"
					},
					"CreatedByGUID": {
						"type": "String",
						"defaultValue": "7b5ea827-bcd7-4a8a-8807-fc7e94a93455"
					}
				},
				"folder": {
					"name": "Backup"
				},
				"annotations": [],
				"lastPublishTime": "2024-02-15T15:58:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/json obj parameter tester')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.obj.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "newEmailId",
										"value": {
											"value": "@item().newEmailId",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable1_copy1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "newUserId",
										"value": {
											"value": "@item().newUserId",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"obj": {
						"type": "object",
						"defaultValue": {
							"value": [
								{
									"newEmailId": "48a47dc2-eae7-11ee-8102-6045bd7c0953",
									"newUserId": "482b541d-eae7-11ee-8102-6045bd7c0953",
									"emailAddressTypeId": "d2b1d156-bdf9-4223-9368-825a448025ad",
									"email": "9175583867@vtext.com"
								},
								{
									"newEmailId": "48a4829b-eae7-11ee-8102-6045bd7c0953",
									"newUserId": "482b541d-eae7-11ee-8102-6045bd7c0953",
									"emailAddressTypeId": "acb4f38f-3642-472a-8de2-dcead28584a2",
									"email": "9175583867@vtext.com"
								}
							]
						}
					}
				},
				"variables": {
					"newEmailId": {
						"type": "String"
					},
					"newUserId": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Testers and Misc"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-25T20:52:08Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/null tester')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup null value",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureMySqlSource",
								"query": "select null as test_value;",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "RecoveryPlanner",
								"type": "DatasetReference",
								"parameters": {
									"db_name": "marshall",
									"server_name": "recovery-planner-mysql-server.mysql.database.azure.com"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Set variable anything",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Lookup null value",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "anything",
							"value": {
								"value": "@activity('Lookup null value').output.value[0].test_value",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"anything": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Testers and Misc"
				},
				"annotations": [],
				"lastPublishTime": "2024-03-21T10:38:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/RecoveryPlanner')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test looping')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Initial Array",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "Initial array",
							"value": {
								"value": "@json('[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Element in initial array",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Initial Array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('Initial array')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Batch Is Ready",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Set Test variable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@and(\ngreater(item(), 0),\nequals(mod(item(), 5), 0)\n) \n",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Reset insert Statement variable",
												"type": "SetVariable",
												"dependsOn": [],
												"policy": {
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"variableName": "insert_statemts",
													"value": {
														"value": "@json('[]')",
														"type": "Expression"
													}
												}
											}
										]
									}
								},
								{
									"name": "Append variable to insert statements",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "insert_statemts",
										"value": {
											"value": "insert item '@{item()}'",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Test variable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Append variable to insert statements",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "testResult",
										"value": {
											"value": "'@{join(variables('insert_statemts'), ';')}'",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Batch is not empty",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Element in initial array",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(length(variables('insert_statemts')), 0)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set test variable at the end",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Batch is not empty",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "testResult",
							"value": {
								"value": "@join(variables('insert_statemts'), ';')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"Initial array": {
						"type": "Array"
					},
					"insert_statemts": {
						"type": "Array"
					},
					"testResult": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Testers and Misc"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryBlobStorage')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "test2.pdf",
						"folderPath": "pdf",
						"container": "test"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureBlobStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinaryPreparis')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServerPreparis",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServerPreparis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_PreparisDocument')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "StorageAccount_Preparis",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseUrl": {
							"value": "@dataset().baseUrl",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"documentIdGuid": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"baseUrl": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().documentIdGuid",
							"type": "Expression"
						},
						"container": "documents"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/StorageAccount_Preparis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_RP_Incident')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer_RecoveryPlanner_Incidents",
					"type": "LinkedServiceReference",
					"parameters": {
						"rpBaseUrl": {
							"value": "@dataset().rpBaseUrl",
							"type": "Expression"
						},
						"rpEventId": {
							"value": "@dataset().eventId",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"eventId": {
						"type": "string"
					},
					"rpBaseUrl": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServer_RecoveryPlanner_Incidents')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_RecoveryPlannerFile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer_RecoveryPlanner_Files",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseURL": {
							"value": "@dataset().BaseURL",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"BaseURL": {
						"type": "string"
					},
					"RelativeUrl": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation",
						"relativeUrl": {
							"value": "@dataset().RelativeUrl",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServer_RecoveryPlanner_Files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Binary_RecoveryPlannerPlan')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "HttpServer_RecoveryPlannerPlans",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseURL": {
							"value": "@dataset().BaseURL",
							"type": "Expression"
						},
						"PlanID": {
							"value": "@dataset().PlanID",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"BaseURL": {
						"type": "string"
					},
					"PlanID": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "HttpServerLocation"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/HttpServer_RecoveryPlannerPlans')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedTextPreparis')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "StorageAccount_Preparis",
					"type": "LinkedServiceReference",
					"parameters": {
						"BaseUrl": {
							"value": "@dataset().baseUrl",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"baseUrl": {
						"type": "string"
					},
					"fileName": {
						"type": "string"
					},
					"documentIdGuid": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().fileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().documentIdGuid",
							"type": "Expression"
						},
						"container": "documents"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/StorageAccount_Preparis')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Preparis')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase_Preparis_dev",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase_Preparis_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RecoveryPlanner')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureMySql_dynamic",
					"type": "LinkedServiceReference",
					"parameters": {
						"db_name": {
							"value": "@dataset().db_name",
							"type": "Expression"
						},
						"server_name": {
							"value": "@dataset().server_name",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"db_name": {
						"type": "string",
						"defaultValue": "marshall"
					},
					"server_name": {
						"type": "string",
						"defaultValue": "recovery-planner-mysql-server.mysql.database.azure.com"
					}
				},
				"annotations": [],
				"type": "AzureMySqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureMySql_dynamic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestResource_RP')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "RestService_RP",
					"type": "LinkedServiceReference",
					"parameters": {
						"incidentId": {
							"value": "@dataset().incidentId",
							"type": "Expression"
						}
					}
				},
				"parameters": {
					"rpSessionToken": {
						"type": "string"
					},
					"rpClentId": {
						"type": "string"
					},
					"incidentId": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/RestService_RP')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureBlobStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('AzureBlobStorage1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureFunction_GeneratePlanPrintNodesDTO')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFunction",
				"typeProperties": {
					"functionAppUrl": "[parameters('AzureFunction_GeneratePlanPrintNodesDTO_properties_typeProperties_functionAppUrl')]",
					"authentication": "Anonymous",
					"functionKey": {
						"type": "SecureString",
						"value": "[parameters('AzureFunction_GeneratePlanPrintNodesDTO_functionKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureMySql_dynamic')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"db_name": {
						"type": "string",
						"defaultValue": "marshall"
					},
					"server_name": {
						"type": "string",
						"defaultValue": "recovery-planner-mysql-server.mysql.database.azure.com"
					}
				},
				"annotations": [],
				"type": "AzureMySql",
				"typeProperties": {
					"connectionString": "[parameters('AzureMySql_dynamic_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase_Preparis_dev')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase_Preparis_dev_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServerPreparis')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServerPreparis_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServer_RecoveryPlannerPlans')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"BaseURL": {
						"type": "string"
					},
					"PlanID": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer_RecoveryPlannerPlans_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServer_RecoveryPlanner_Files')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "source for getting files from RP",
				"parameters": {
					"BaseURL": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer_RecoveryPlanner_Files_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/HttpServer_RecoveryPlanner_Incidents')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"rpBaseUrl": {
						"type": "string"
					},
					"rpEventId": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('HttpServer_RecoveryPlanner_Incidents_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/RestService_RP')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"incidentId": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('RestService_RP_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/StorageAccount_Preparis')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"parameters": {
					"BaseUrl": {
						"type": "string",
						"defaultValue": "''"
					}
				},
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('StorageAccount_Preparis_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "Storage"
				}
			},
			"dependsOn": []
		}
	]
}